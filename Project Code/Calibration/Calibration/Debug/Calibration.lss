
Calibration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000098e  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800200  00800200  0000098e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000278b  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc0  00000000  00000000  000032ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c08  00000000  00000000  0000428a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9c  00000000  00000000  00005663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000060ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000862  00000862  00000976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000061f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000002c  0000073c  0000073c  00000850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000e  0000082a  0000082a  0000093e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.disable_adc 0000000c  00000838  00000838  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.enable_adc 0000000c  00000844  00000844  00000958  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.run_dc_motor 0000000a  00000850  00000850  00000964  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.brake_dc_motor 00000008  0000085a  0000085a  0000096e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.init_dc_moter 00000022  000007e0  000007e0  000008f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCDBusyLoop 0000007e  0000048a  0000048a  0000059e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCDByte 00000070  00000508  00000508  0000061c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.InitLCD 00000088  00000402  00000402  00000516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCDWriteInt 000000c4  0000033e  0000033e  00000452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDGotoXY 00000012  00000818  00000818  0000092c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    000001e0  0000015e  0000015e  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_default 00000002  0000086e  0000086e  00000982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_29 0000005e  0000064a  0000064a  0000075e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_5 0000006c  00000578  00000578  0000068c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_6 00000066  000005e4  000005e4  000006f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_3 00000054  000006a8  000006a8  000007bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss.ADC_result_flag 00000001  00800210  00800210  0000098e  2**0
                  ALLOC
 34 .data.ADC_curr_min 00000002  0080020a  00000876  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .bss.ADC_max_min 00000002  0080020c  0080020c  0000098e  2**0
                  ALLOC
 36 .data.ADC_min_min 00000002  0080020e  00000878  0000098c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .text.mTimer  00000040  000006fc  000006fc  00000810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.init_pwm 00000028  00000768  00000768  0000087c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.change_pwm_speed 00000004  00000866  00000866  0000097a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.libgcc.div 00000028  00000790  00000790  000008a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc.div 00000028  000007b8  000007b8  000008cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__dummy_fini 00000002  00000870  00000870  00000984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_funcs_on_exit 00000002  00000872  00000872  00000986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_simulator_exit 00000002  00000874  00000874  00000988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.exit    00000016  00000802  00000802  00000916  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text._Exit   00000004  0000086a  0000086a  0000097e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 81 00 	jmp	0x102	; 0x102 <__ctors_end>
   4:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
   8:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
   c:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_3>
  10:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  14:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_5>
  18:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_6>
  1c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  20:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  24:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  28:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  2c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  30:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  34:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  38:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  3c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  40:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  44:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  48:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  4c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  50:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  54:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  58:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  5c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  60:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  64:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  68:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  6c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  70:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  74:	0c 94 25 03 	jmp	0x64a	; 0x64a <__vector_29>
  78:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  7c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  80:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  84:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  88:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  8c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  90:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  94:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  98:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  9c:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  a0:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  a4:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  a8:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  ac:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  b0:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  b4:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  b8:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  bc:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  c0:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  c4:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  c8:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  cc:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  d0:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  d4:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  d8:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  dc:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>
  e0:	0c 94 31 04 	jmp	0x862	; 0x862 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 0a       	sbc	r0, r18
  e8:	80 02       	muls	r24, r16
  ea:	0a 02       	muls	r16, r26
  ec:	0c 00       	.word	0x000c	; ????
  ee:	08 76       	andi	r16, 0x68	; 104
  f0:	02 0c       	add	r0, r2
  f2:	02 0e       	add	r0, r18
  f4:	80 02       	muls	r24, r16
  f6:	0e 02       	muls	r16, r30
  f8:	10 00       	.word	0x0010	; ????
  fa:	08 78       	andi	r16, 0x88	; 136
  fc:	02 10       	cpse	r0, r2
  fe:	02 11       	cpse	r16, r2
 100:	80 00       	.word	0x0080	; ????

00000102 <__ctors_end>:
 102:	11 24       	eor	r1, r1
 104:	1f be       	out	0x3f, r1	; 63
 106:	cf ef       	ldi	r28, 0xFF	; 255
 108:	d1 e2       	ldi	r29, 0x21	; 33
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0c bf       	out	0x3c, r16	; 60

00000112 <__do_copy_data>:
 112:	e4 ee       	ldi	r30, 0xE4	; 228
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	19 c0       	rjmp	.+50     	; 0x14c <__do_clear_bss+0x8>
 11a:	b7 91       	elpm	r27, Z+
 11c:	a7 91       	elpm	r26, Z+
 11e:	37 91       	elpm	r19, Z+
 120:	27 91       	elpm	r18, Z+
 122:	07 91       	elpm	r16, Z+
 124:	07 fd       	sbrc	r16, 7
 126:	0e c0       	rjmp	.+28     	; 0x144 <__do_clear_bss>
 128:	97 91       	elpm	r25, Z+
 12a:	87 91       	elpm	r24, Z+
 12c:	ef 01       	movw	r28, r30
 12e:	f9 2f       	mov	r31, r25
 130:	e8 2f       	mov	r30, r24
 132:	0b bf       	out	0x3b, r16	; 59
 134:	07 90       	elpm	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	a2 17       	cp	r26, r18
 13a:	b3 07       	cpc	r27, r19
 13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x22>
 13e:	fe 01       	movw	r30, r28
 140:	1b be       	out	0x3b, r1	; 59
 142:	04 c0       	rjmp	.+8      	; 0x14c <__do_clear_bss+0x8>

00000144 <__do_clear_bss>:
 144:	1d 92       	st	X+, r1
 146:	a2 17       	cp	r26, r18
 148:	b3 07       	cpc	r27, r19
 14a:	e1 f7       	brne	.-8      	; 0x144 <__do_clear_bss>
 14c:	e1 30       	cpi	r30, 0x01	; 1
 14e:	f4 07       	cpc	r31, r20
 150:	21 f7       	brne	.-56     	; 0x11a <__do_copy_data+0x8>
 152:	0e 94 af 00 	call	0x15e	; 0x15e <_etext>
 156:	0c 94 01 04 	jmp	0x802	; 0x802 <exit>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>

Disassembly of section .text:

00000862 <__bad_interrupt>:
 862:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_default>

Disassembly of section .text.init_adc:

0000073c <init_adc>:
	ADCSRA &= ~(_BV(ADSC));		// clear ADSC
	cli();
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
 73c:	8d b3       	in	r24, 0x1d	; 29
 73e:	84 60       	ori	r24, 0x04	; 4
 740:	8d bb       	out	0x1d, r24	; 29
 742:	e9 e6       	ldi	r30, 0x69	; 105
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	80 63       	ori	r24, 0x30	; 48
 74a:	80 83       	st	Z, r24
 74c:	ea e7       	ldi	r30, 0x7A	; 122
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	80 68       	ori	r24, 0x80	; 128
 754:	80 83       	st	Z, r24
 756:	80 81       	ld	r24, Z
 758:	88 60       	ori	r24, 0x08	; 8
 75a:	80 83       	st	Z, r24
 75c:	ec e7       	ldi	r30, 0x7C	; 124
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	80 66       	ori	r24, 0x60	; 96
 764:	80 83       	st	Z, r24
 766:	08 95       	ret

Disassembly of section .text.start_conversion:

0000082a <start_conversion>:
 82a:	78 94       	sei
 82c:	ea e7       	ldi	r30, 0x7A	; 122
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	80 64       	ori	r24, 0x40	; 64
 834:	80 83       	st	Z, r24
 836:	08 95       	ret

Disassembly of section .text.disable_adc:

00000838 <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
 838:	ea e7       	ldi	r30, 0x7A	; 122
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	8f 77       	andi	r24, 0x7F	; 127
 840:	80 83       	st	Z, r24
 842:	08 95       	ret

Disassembly of section .text.enable_adc:

00000844 <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
 844:	ea e7       	ldi	r30, 0x7A	; 122
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	80 68       	ori	r24, 0x80	; 128
 84c:	80 83       	st	Z, r24
 84e:	08 95       	ret

Disassembly of section .text.run_dc_motor:

00000850 <run_dc_motor>:
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
 850:	85 b1       	in	r24, 0x05	; 5
 852:	80 7f       	andi	r24, 0xF0	; 240
 854:	8b 60       	ori	r24, 0x0B	; 11
 856:	85 b9       	out	0x05, r24	; 5
 858:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

0000085a <brake_dc_motor>:
	//PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
 85a:	85 b1       	in	r24, 0x05	; 5
 85c:	8f 60       	ori	r24, 0x0F	; 15
 85e:	85 b9       	out	0x05, r24	; 5
 860:	08 95       	ret

Disassembly of section .text.init_dc_moter:

000007e0 <init_dc_moter>:

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
 7e0:	8d b3       	in	r24, 0x1d	; 29
 7e2:	80 63       	ori	r24, 0x30	; 48
 7e4:	8d bb       	out	0x1d, r24	; 29
 7e6:	ea e6       	ldi	r30, 0x6A	; 106
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	8a 60       	ori	r24, 0x0A	; 10
 7ee:	80 83       	st	Z, r24
 7f0:	84 b1       	in	r24, 0x04	; 4
 7f2:	8f 60       	ori	r24, 0x0F	; 15
 7f4:	84 b9       	out	0x04, r24	; 4
 7f6:	8d b1       	in	r24, 0x0d	; 13
 7f8:	8c 7f       	andi	r24, 0xFC	; 252
 7fa:	8d b9       	out	0x0d, r24	; 13
 7fc:	0e 94 2d 04 	call	0x85a	; 0x85a <brake_dc_motor>
 800:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

0000048a <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 48a:	87 b1       	in	r24, 0x07	; 7
 48c:	80 7f       	andi	r24, 0xF0	; 240
 48e:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 490:	88 b1       	in	r24, 0x08	; 8
 492:	80 62       	ori	r24, 0x20	; 32
 494:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 496:	88 b1       	in	r24, 0x08	; 8
 498:	8f 7b       	andi	r24, 0xBF	; 191
 49a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	8a 95       	dec	r24
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCDBusyLoop+0x14>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 4a4:	88 b1       	in	r24, 0x08	; 8
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	88 b9       	out	0x08, r24	; 8
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	9a 95       	dec	r25
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCDBusyLoop+0x22>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 4b2:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 4b4:	82 95       	swap	r24
 4b6:	80 7f       	andi	r24, 0xF0	; 240
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	9a 95       	dec	r25
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCDBusyLoop+0x30>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 4c0:	98 b1       	in	r25, 0x08	; 8
 4c2:	9f 77       	andi	r25, 0x7F	; 127
 4c4:	98 b9       	out	0x08, r25	; 8
 4c6:	95 e0       	ldi	r25, 0x05	; 5
 4c8:	9a 95       	dec	r25
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <LCDBusyLoop+0x3e>
 4cc:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 4ce:	98 b1       	in	r25, 0x08	; 8
 4d0:	90 68       	ori	r25, 0x80	; 128
 4d2:	98 b9       	out	0x08, r25	; 8
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	9a 95       	dec	r25
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCDBusyLoop+0x4c>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 4dc:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 4de:	80 78       	andi	r24, 0x80	; 128
 4e0:	92 e0       	ldi	r25, 0x02	; 2
 4e2:	9a 95       	dec	r25
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCDBusyLoop+0x58>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 4e8:	98 b1       	in	r25, 0x08	; 8
 4ea:	9f 77       	andi	r25, 0x7F	; 127
 4ec:	98 b9       	out	0x08, r25	; 8
 4ee:	95 e0       	ldi	r25, 0x05	; 5
 4f0:	9a 95       	dec	r25
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <LCDBusyLoop+0x66>
 4f4:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 4f6:	81 11       	cpse	r24, r1
 4f8:	d5 cf       	rjmp	.-86     	; 0x4a4 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 4fa:	88 b1       	in	r24, 0x08	; 8
 4fc:	8f 7d       	andi	r24, 0xDF	; 223
 4fe:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 500:	87 b1       	in	r24, 0x07	; 7
 502:	8f 60       	ori	r24, 0x0F	; 15
 504:	87 b9       	out	0x07, r24	; 7
 506:	08 95       	ret

Disassembly of section .text.LCDByte:

00000508 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 508:	28 2f       	mov	r18, r24
 50a:	22 95       	swap	r18
 50c:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 50e:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 510:	61 11       	cpse	r22, r1
 512:	04 c0       	rjmp	.+8      	; 0x51c <LCDByte+0x14>
	CLEAR_RS();
 514:	98 b1       	in	r25, 0x08	; 8
 516:	9f 7b       	andi	r25, 0xBF	; 191
 518:	98 b9       	out	0x08, r25	; 8
 51a:	03 c0       	rjmp	.+6      	; 0x522 <LCDByte+0x1a>
else
	SET_RS();
 51c:	98 b1       	in	r25, 0x08	; 8
 51e:	90 64       	ori	r25, 0x40	; 64
 520:	98 b9       	out	0x08, r25	; 8
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	9a 95       	dec	r25
 526:	f1 f7       	brne	.-4      	; 0x524 <LCDByte+0x1c>
 528:	00 c0       	rjmp	.+0      	; 0x52a <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 52a:	98 b1       	in	r25, 0x08	; 8
 52c:	90 68       	ori	r25, 0x80	; 128
 52e:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 530:	98 b1       	in	r25, 0x08	; 8
 532:	90 7f       	andi	r25, 0xF0	; 240
 534:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 536:	98 b9       	out	0x08, r25	; 8
 538:	95 e0       	ldi	r25, 0x05	; 5
 53a:	9a 95       	dec	r25
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCDByte+0x32>
 53e:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 540:	98 b1       	in	r25, 0x08	; 8
 542:	9f 77       	andi	r25, 0x7F	; 127
 544:	98 b9       	out	0x08, r25	; 8
 546:	95 e0       	ldi	r25, 0x05	; 5
 548:	9a 95       	dec	r25
 54a:	f1 f7       	brne	.-4      	; 0x548 <LCDByte+0x40>
 54c:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 54e:	98 b1       	in	r25, 0x08	; 8
 550:	90 68       	ori	r25, 0x80	; 128
 552:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 554:	98 b1       	in	r25, 0x08	; 8
 556:	90 7f       	andi	r25, 0xF0	; 240
 558:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 55a:	88 b9       	out	0x08, r24	; 8
 55c:	85 e0       	ldi	r24, 0x05	; 5
 55e:	8a 95       	dec	r24
 560:	f1 f7       	brne	.-4      	; 0x55e <LCDByte+0x56>
 562:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 564:	88 b1       	in	r24, 0x08	; 8
 566:	8f 77       	andi	r24, 0x7F	; 127
 568:	88 b9       	out	0x08, r24	; 8
 56a:	95 e0       	ldi	r25, 0x05	; 5
 56c:	9a 95       	dec	r25
 56e:	f1 f7       	brne	.-4      	; 0x56c <LCDByte+0x64>
 570:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 572:	0e 94 45 02 	call	0x48a	; 0x48a <LCDBusyLoop>
 576:	08 95       	ret

Disassembly of section .text.InitLCD:

00000402 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 402:	cf 93       	push	r28
 404:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 406:	2f ef       	ldi	r18, 0xFF	; 255
 408:	86 e7       	ldi	r24, 0x76	; 118
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	90 40       	sbci	r25, 0x00	; 0
 412:	e1 f7       	brne	.-8      	; 0x40c <InitLCD+0xa>
 414:	00 c0       	rjmp	.+0      	; 0x416 <InitLCD+0x14>
 416:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 418:	87 b1       	in	r24, 0x07	; 7
 41a:	8f 60       	ori	r24, 0x0F	; 15
 41c:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 41e:	87 b1       	in	r24, 0x07	; 7
 420:	80 68       	ori	r24, 0x80	; 128
 422:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 424:	87 b1       	in	r24, 0x07	; 7
 426:	80 64       	ori	r24, 0x40	; 64
 428:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 42a:	87 b1       	in	r24, 0x07	; 7
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 430:	88 b1       	in	r24, 0x08	; 8
 432:	80 7f       	andi	r24, 0xF0	; 240
 434:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 436:	88 b1       	in	r24, 0x08	; 8
 438:	8f 77       	andi	r24, 0x7F	; 127
 43a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 43c:	88 b1       	in	r24, 0x08	; 8
 43e:	8f 7d       	andi	r24, 0xDF	; 223
 440:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 442:	88 b1       	in	r24, 0x08	; 8
 444:	8f 7b       	andi	r24, 0xBF	; 191
 446:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	00 c0       	rjmp	.+0      	; 0x44a <InitLCD+0x48>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <InitLCD+0x4a>
 44c:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 44e:	88 b1       	in	r24, 0x08	; 8
 450:	80 68       	ori	r24, 0x80	; 128
 452:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 454:	88 b1       	in	r24, 0x08	; 8
 456:	82 60       	ori	r24, 0x02	; 2
 458:	88 b9       	out	0x08, r24	; 8
 45a:	25 e0       	ldi	r18, 0x05	; 5
 45c:	2a 95       	dec	r18
 45e:	f1 f7       	brne	.-4      	; 0x45c <InitLCD+0x5a>
 460:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 462:	88 b1       	in	r24, 0x08	; 8
 464:	8f 77       	andi	r24, 0x7F	; 127
 466:	88 b9       	out	0x08, r24	; 8
 468:	85 e0       	ldi	r24, 0x05	; 5
 46a:	8a 95       	dec	r24
 46c:	f1 f7       	brne	.-4      	; 0x46a <InitLCD+0x68>
 46e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 470:	0e 94 45 02 	call	0x48a	; 0x48a <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	8c 2f       	mov	r24, r28
 478:	8c 60       	ori	r24, 0x0C	; 12
 47a:	0e 94 84 02 	call	0x508	; 0x508 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	88 e2       	ldi	r24, 0x28	; 40
 482:	0e 94 84 02 	call	0x508	; 0x508 <LCDByte>
}
 486:	cf 91       	pop	r28
 488:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

0000033e <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <LCDWriteInt+0xe>
 34c:	0f 92       	push	r0
 34e:	0f 92       	push	r0
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 356:	fe 01       	movw	r30, r28
 358:	31 96       	adiw	r30, 0x01	; 1
 35a:	25 e0       	ldi	r18, 0x05	; 5
 35c:	df 01       	movw	r26, r30
 35e:	1d 92       	st	X+, r1
 360:	2a 95       	dec	r18
 362:	e9 f7       	brne	.-6      	; 0x35e <LCDWriteInt+0x20>
	int i=4,j=0;
 364:	24 e0       	ldi	r18, 0x04	; 4
 366:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 368:	0f c0       	rjmp	.+30     	; 0x388 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 36a:	6a e0       	ldi	r22, 0x0A	; 10
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 c8 03 	call	0x790	; 0x790 <__divmodhi4>
 372:	e1 e0       	ldi	r30, 0x01	; 1
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	ec 0f       	add	r30, r28
 378:	fd 1f       	adc	r31, r29
 37a:	e2 0f       	add	r30, r18
 37c:	f3 1f       	adc	r31, r19
 37e:	80 83       	st	Z, r24
	val=val/10;
 380:	86 2f       	mov	r24, r22
 382:	97 2f       	mov	r25, r23
	i--;
 384:	21 50       	subi	r18, 0x01	; 1
 386:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	79 f7       	brne	.-34     	; 0x36a <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 38c:	bf ef       	ldi	r27, 0xFF	; 255
 38e:	eb 16       	cp	r14, r27
 390:	fb 06       	cpc	r15, r27
 392:	81 f4       	brne	.+32     	; 0x3b4 <LCDWriteInt+0x76>
 394:	03 c0       	rjmp	.+6      	; 0x39c <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 396:	0f 5f       	subi	r16, 0xFF	; 255
 398:	1f 4f       	sbci	r17, 0xFF	; 255
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <LCDWriteInt+0x62>
 39c:	00 e0       	ldi	r16, 0x00	; 0
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ec 0f       	add	r30, r28
 3a6:	fd 1f       	adc	r31, r29
 3a8:	e0 0f       	add	r30, r16
 3aa:	f1 1f       	adc	r31, r17
 3ac:	20 81       	ld	r18, Z
 3ae:	22 23       	and	r18, r18
 3b0:	91 f3       	breq	.-28     	; 0x396 <LCDWriteInt+0x58>
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 3b4:	05 e0       	ldi	r16, 0x05	; 5
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	0e 19       	sub	r16, r14
 3ba:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 3bc:	99 23       	and	r25, r25
 3be:	94 f4       	brge	.+36     	; 0x3e4 <LCDWriteInt+0xa6>
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	8d e2       	ldi	r24, 0x2D	; 45
 3c4:	0e 94 84 02 	call	0x508	; 0x508 <LCDByte>
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	e0 0f       	add	r30, r16
 3d4:	f1 1f       	adc	r31, r17
 3d6:	80 81       	ld	r24, Z
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	80 5d       	subi	r24, 0xD0	; 208
 3dc:	0e 94 84 02 	call	0x508	; 0x508 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3e0:	0f 5f       	subi	r16, 0xFF	; 255
 3e2:	1f 4f       	sbci	r17, 0xFF	; 255
 3e4:	05 30       	cpi	r16, 0x05	; 5
 3e6:	11 05       	cpc	r17, r1
 3e8:	84 f3       	brlt	.-32     	; 0x3ca <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

00000818 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 818:	88 32       	cpi	r24, 0x28	; 40
 81a:	30 f4       	brcc	.+12     	; 0x828 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 81c:	61 11       	cpse	r22, r1
 81e:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	80 68       	ori	r24, 0x80	; 128
 824:	0e 94 84 02 	call	0x508	; 0x508 <LCDByte>
 828:	08 95       	ret

Disassembly of section .text.main:

0000015e <main>:


int main(void)
{
	/* Disable global interrupt */
	cli();
 15e:	f8 94       	cli
		
	/* Initialize main clock: 8 MHz */
	CLKPR = 0x80;
 160:	e1 e6       	ldi	r30, 0x61	; 97
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	80 83       	st	Z, r24
	CLKPR = 0x01;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 83       	st	Z, r24
	
	/* Set PORTC as output to display ADC result */
	DDRL = 0xFF;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0x00;	// for buttons
 172:	11 b8       	out	0x01, r1	; 1


	InitLCD(LS_BLINK|LS_ULINE);
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	0e 94 01 02 	call	0x402	; 0x402 <InitLCD>
	LCDClear();	
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 84 02 	call	0x508	; 0x508 <LCDByte>
	init_adc();
 182:	0e 94 9e 03 	call	0x73c	; 0x73c <init_adc>
	init_pwm();
 186:	0e 94 b4 03 	call	0x768	; 0x768 <init_pwm>
	change_pwm_speed(60);
 18a:	8c e3       	ldi	r24, 0x3C	; 60
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 33 04 	call	0x866	; 0x866 <change_pwm_speed>
	init_dc_moter();
 192:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <init_dc_moter>
	run_dc_motor();
 196:	0e 94 28 04 	call	0x850	; 0x850 <run_dc_motor>
	

	sei();
 19a:	78 94       	sei

	while(1){			
		PORTL = 0x10;
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		while(OR){ // when object is at the reflective sensor
 1a2:	21 c0       	rjmp	.+66     	; 0x1e6 <main+0x88>
			start_conversion();
 1a4:	0e 94 15 04 	call	0x82a	; 0x82a <start_conversion>
			PORTL = 0x20;
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	
			if(ADC_result_flag){
 1ae:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ADC_result_flag>
 1b2:	88 23       	and	r24, r24
 1b4:	99 f0       	breq	.+38     	; 0x1dc <main+0x7e>
				if(ADC_result < ADC_curr_min){
 1b6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <ADC_result>
 1ba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <ADC_result+0x1>
 1be:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 1c2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 1c6:	28 17       	cp	r18, r24
 1c8:	39 07       	cpc	r19, r25
 1ca:	40 f4       	brcc	.+16     	; 0x1dc <main+0x7e>
					ADC_curr_min = ADC_result;
 1cc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ADC_result>
 1d0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ADC_result+0x1>
 1d4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <ADC_curr_min+0x1>
 1d8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <ADC_curr_min>
				}
				//ADCSRA |= _BV(ADSC);
			}
			
			ADC_result_flag = 0;
 1dc:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <ADC_result_flag>
			item_adc_ready = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <item_adc_ready>
	sei();

	while(1){			
		PORTL = 0x10;

		while(OR){ // when object is at the reflective sensor
 1e6:	1c 99       	sbic	0x03, 4	; 3
 1e8:	dd cf       	rjmp	.-70     	; 0x1a4 <main+0x46>
			item_adc_ready = 1;
		}
		
		//ADCSRA &= ~_BV(ADSC);
		
		if(item_adc_ready){
 1ea:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <item_adc_ready>
 1ee:	88 23       	and	r24, r24
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <main+0x96>
 1f2:	83 c0       	rjmp	.+262    	; 0x2fa <main+0x19c>
			disable_adc();
 1f4:	0e 94 1c 04 	call	0x838	; 0x838 <disable_adc>
			item_counter += 1;
 1f8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <item_counter>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <item_counter>

			if(item_counter == 1){
 202:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <item_counter>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	89 f4       	brne	.+34     	; 0x22c <main+0xce>
				ADC_min_min = ADC_curr_min;
 20a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 20e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 212:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ADC_min_min+0x1>
 216:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ADC_min_min>
				ADC_max_min = ADC_curr_min;
 21a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 21e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 222:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <ADC_max_min+0x1>
 226:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ADC_max_min>
 22a:	26 c0       	rjmp	.+76     	; 0x278 <main+0x11a>
			} else {
				if(ADC_min_min > ADC_curr_min){
 22c:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <ADC_min_min>
 230:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <ADC_min_min+0x1>
 234:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 238:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 23c:	82 17       	cp	r24, r18
 23e:	93 07       	cpc	r25, r19
 240:	40 f4       	brcc	.+16     	; 0x252 <main+0xf4>
					ADC_min_min = ADC_curr_min;
 242:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 246:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 24a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ADC_min_min+0x1>
 24e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ADC_min_min>
				}
				if(ADC_max_min < ADC_curr_min){
 252:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <ADC_max_min>
 256:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <ADC_max_min+0x1>
 25a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 25e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 262:	28 17       	cp	r18, r24
 264:	39 07       	cpc	r19, r25
 266:	40 f4       	brcc	.+16     	; 0x278 <main+0x11a>
					ADC_max_min = ADC_curr_min;
 268:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 26c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 270:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <ADC_max_min+0x1>
 274:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ADC_max_min>
				}
			}

			LCDWriteIntXY(0,0,item_counter,3);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 0c 04 	call	0x818	; 0x818 <LCDGotoXY>
 280:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <item_counter>
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDWriteInt>
			LCDWriteIntXY(5,0,ADC_counter,5);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	0e 94 0c 04 	call	0x818	; 0x818 <LCDGotoXY>
 296:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ADC_counter>
 29a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <ADC_counter+0x1>
 29e:	65 e0       	ldi	r22, 0x05	; 5
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDWriteInt>
			LCDWriteIntXY(0,1,ADC_min_min,4);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 0c 04 	call	0x818	; 0x818 <LCDGotoXY>
 2ae:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <ADC_min_min>
 2b2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <ADC_min_min+0x1>
 2b6:	64 e0       	ldi	r22, 0x04	; 4
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDWriteInt>
			LCDWriteIntXY(5,1,ADC_max_min,4);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	0e 94 0c 04 	call	0x818	; 0x818 <LCDGotoXY>
 2c6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ADC_max_min>
 2ca:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ADC_max_min+0x1>
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDWriteInt>
			LCDWriteIntXY(10,1,ADC_curr_min,4);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	0e 94 0c 04 	call	0x818	; 0x818 <LCDGotoXY>
 2de:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ADC_curr_min>
 2e2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <ADC_curr_min+0x1>
 2e6:	64 e0       	ldi	r22, 0x04	; 4
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	0e 94 9f 01 	call	0x33e	; 0x33e <LCDWriteInt>
			
			item_adc_ready = 0;
 2ee:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <item_adc_ready>
			ADC_counter = 0;
 2f2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ADC_counter+0x1>
 2f6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <ADC_counter>

		}

		if(kill_flag){
 2fa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2fe:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 302:	89 2b       	or	r24, r25
 304:	11 f0       	breq	.+4      	; 0x30a <main+0x1ac>
			brake_dc_motor();
 306:	0e 94 2d 04 	call	0x85a	; 0x85a <brake_dc_motor>
		}
		
		if(reset_flag){
 30a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <reset_flag>
 30e:	88 23       	and	r24, r24
 310:	09 f4       	brne	.+2      	; 0x314 <main+0x1b6>
 312:	44 cf       	rjmp	.-376    	; 0x19c <main+0x3e>
			ADC_max_min = 0;
 314:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <ADC_max_min+0x1>
 318:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <ADC_max_min>
			ADC_min_min = 1023;
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	93 e0       	ldi	r25, 0x03	; 3
 320:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ADC_min_min+0x1>
 324:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ADC_min_min>
			ADC_curr_min = 1023;
 328:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <ADC_curr_min+0x1>
 32c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <ADC_curr_min>
			item_counter = 0;
 330:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <item_counter>
			ADC_counter = 0;
 334:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ADC_counter+0x1>
 338:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <ADC_counter>
 33c:	2f cf       	rjmp	.-418    	; 0x19c <main+0x3e>

Disassembly of section .text.__vector_default:

0000086e <__vector_default>:
	}
}


/***** Interrupt Service Routines *****/
EMPTY_INTERRUPT(BADISR_vect);
 86e:	18 95       	reti

Disassembly of section .text.__vector_29:

0000064a <__vector_29>:


ISR(ADC_vect){ //ADC conversion done
 64a:	1f 92       	push	r1
 64c:	0f 92       	push	r0
 64e:	0f b6       	in	r0, 0x3f	; 63
 650:	0f 92       	push	r0
 652:	11 24       	eor	r1, r1
 654:	2f 93       	push	r18
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
	ADC_result = (ADCL >> 6) + (ADCH << 2);
 65a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 65e:	22 95       	swap	r18
 660:	26 95       	lsr	r18
 662:	26 95       	lsr	r18
 664:	23 70       	andi	r18, 0x03	; 3
 666:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	82 0f       	add	r24, r18
 676:	91 1d       	adc	r25, r1
 678:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ADC_result+0x1>
 67c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ADC_result>
	ADC_result_flag = 1;
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ADC_result_flag>
	ADC_counter += 1;
 686:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ADC_counter>
 68a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <ADC_counter+0x1>
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <ADC_counter+0x1>
 694:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <ADC_counter>
}
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

Disassembly of section .text.__vector_5:

00000578 <__vector_5>:


ISR(INT4_vect){ // Kill switch
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	0b b6       	in	r0, 0x3b	; 59
 584:	0f 92       	push	r0
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	mTimer(25);
 59e:	89 e1       	ldi	r24, 0x19	; 25
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mTimer>
	kill_flag = 1;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 5ae:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	while((PINE & 0x02) == 0x00);
 5b2:	61 9b       	sbis	0x0c, 1	; 12
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <__vector_5+0x3a>
	mTimer(25);	
 5b6:	89 e1       	ldi	r24, 0x19	; 25
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mTimer>
}
 5be:	ff 91       	pop	r31
 5c0:	ef 91       	pop	r30
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0b be       	out	0x3b, r0	; 59
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

Disassembly of section .text.__vector_6:

000005e4 <__vector_6>:

ISR(INT5_vect){ // Kill switch
 5e4:	1f 92       	push	r1
 5e6:	0f 92       	push	r0
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	0b b6       	in	r0, 0x3b	; 59
 5f0:	0f 92       	push	r0
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	mTimer(25);
 60a:	89 e1       	ldi	r24, 0x19	; 25
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mTimer>
	reset_flag = 1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <reset_flag>
	while((PINE & 0x01) == 0x00);
 618:	60 9b       	sbis	0x0c, 0	; 12
 61a:	fe cf       	rjmp	.-4      	; 0x618 <__vector_6+0x34>
	mTimer(25);
 61c:	89 e1       	ldi	r24, 0x19	; 25
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 7e 03 	call	0x6fc	; 0x6fc <mTimer>
}
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	7f 91       	pop	r23
 632:	6f 91       	pop	r22
 634:	5f 91       	pop	r21
 636:	4f 91       	pop	r20
 638:	3f 91       	pop	r19
 63a:	2f 91       	pop	r18
 63c:	0f 90       	pop	r0
 63e:	0b be       	out	0x3b, r0	; 59
 640:	0f 90       	pop	r0
 642:	0f be       	out	0x3f, r0	; 63
 644:	0f 90       	pop	r0
 646:	1f 90       	pop	r1
 648:	18 95       	reti

Disassembly of section .text.__vector_3:

000006a8 <__vector_3>:

ISR(INT2_vect){ // OR sensor is logic high when object in
 6a8:	1f 92       	push	r1
 6aa:	0f 92       	push	r0
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	0f 92       	push	r0
 6b0:	11 24       	eor	r1, r1
 6b2:	0b b6       	in	r0, 0x3b	; 59
 6b4:	0f 92       	push	r0
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	4f 93       	push	r20
 6bc:	5f 93       	push	r21
 6be:	6f 93       	push	r22
 6c0:	7f 93       	push	r23
 6c2:	8f 93       	push	r24
 6c4:	9f 93       	push	r25
 6c6:	af 93       	push	r26
 6c8:	bf 93       	push	r27
 6ca:	ef 93       	push	r30
 6cc:	ff 93       	push	r31
	enable_adc();
 6ce:	0e 94 22 04 	call	0x844	; 0x844 <enable_adc>
	start_conversion();
 6d2:	0e 94 15 04 	call	0x82a	; 0x82a <start_conversion>
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	bf 91       	pop	r27
 6dc:	af 91       	pop	r26
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	7f 91       	pop	r23
 6e4:	6f 91       	pop	r22
 6e6:	5f 91       	pop	r21
 6e8:	4f 91       	pop	r20
 6ea:	3f 91       	pop	r19
 6ec:	2f 91       	pop	r18
 6ee:	0f 90       	pop	r0
 6f0:	0b be       	out	0x3b, r0	; 59
 6f2:	0f 90       	pop	r0
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	0f 90       	pop	r0
 6f8:	1f 90       	pop	r1
 6fa:	18 95       	reti

Disassembly of section .text.mTimer:

000006fc <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 6fc:	e1 e8       	ldi	r30, 0x81	; 129
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	20 81       	ld	r18, Z
 702:	2a 60       	ori	r18, 0x0A	; 10
 704:	20 83       	st	Z, r18
	OCR1A = 0x03EB; // Set output compare register for 1000 ticks which equals to 1ms
 706:	2b ee       	ldi	r18, 0xEB	; 235
 708:	33 e0       	ldi	r19, 0x03	; 3
 70a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 70e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
 712:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 716:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 71a:	26 b3       	in	r18, 0x16	; 22
 71c:	22 60       	ori	r18, 0x02	; 2
 71e:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 724:	07 c0       	rjmp	.+14     	; 0x734 <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 726:	b1 9b       	sbis	0x16, 1	; 22
 728:	05 c0       	rjmp	.+10     	; 0x734 <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 72a:	46 b3       	in	r20, 0x16	; 22
 72c:	42 60       	ori	r20, 0x02	; 2
 72e:	46 bb       	out	0x16, r20	; 22
			i++;
 730:	2f 5f       	subi	r18, 0xFF	; 255
 732:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 734:	28 17       	cp	r18, r24
 736:	39 07       	cpc	r19, r25
 738:	b4 f3       	brlt	.-20     	; 0x726 <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
 73a:	08 95       	ret

Disassembly of section .text.init_pwm:

00000768 <init_pwm>:

/****** PWM ******/

void init_pwm(){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
 768:	84 b5       	in	r24, 0x24	; 36
 76a:	83 60       	ori	r24, 0x03	; 3
 76c:	84 bd       	out	0x24, r24	; 36
	
	/* Step 2: Enable output compare interrupt for Timer 0 */
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
 76e:	ee e6       	ldi	r30, 0x6E	; 110
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	80 81       	ld	r24, Z
 774:	82 60       	ori	r24, 0x02	; 2
 776:	80 83       	st	Z, r24
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
 778:	84 b5       	in	r24, 0x24	; 36
 77a:	80 68       	ori	r24, 0x80	; 128
 77c:	84 bd       	out	0x24, r24	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
 77e:	85 b5       	in	r24, 0x25	; 37
 780:	82 60       	ori	r24, 0x02	; 2
 782:	85 bd       	out	0x25, r24	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = 127;							// 50% -----> 256 * 50% - 1 = 127
 784:	8f e7       	ldi	r24, 0x7F	; 127
 786:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
 788:	84 b1       	in	r24, 0x04	; 4
 78a:	80 68       	ori	r24, 0x80	; 128
 78c:	84 b9       	out	0x04, r24	; 4
 78e:	08 95       	ret

Disassembly of section .text.change_pwm_speed:

00000866 <change_pwm_speed>:
}

void change_pwm_speed(unsigned int speed){
	OCR0A = speed;
 866:	87 bd       	out	0x27, r24	; 39
 868:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000790 <__divmodhi4>:
 790:	97 fb       	bst	r25, 7
 792:	07 2e       	mov	r0, r23
 794:	16 f4       	brtc	.+4      	; 0x79a <__divmodhi4+0xa>
 796:	00 94       	com	r0
 798:	07 d0       	rcall	.+14     	; 0x7a8 <__divmodhi4_neg1>
 79a:	77 fd       	sbrc	r23, 7
 79c:	09 d0       	rcall	.+18     	; 0x7b0 <__divmodhi4_neg2>
 79e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__udivmodhi4>
 7a2:	07 fc       	sbrc	r0, 7
 7a4:	05 d0       	rcall	.+10     	; 0x7b0 <__divmodhi4_neg2>
 7a6:	3e f4       	brtc	.+14     	; 0x7b6 <__divmodhi4_exit>

000007a8 <__divmodhi4_neg1>:
 7a8:	90 95       	com	r25
 7aa:	81 95       	neg	r24
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	08 95       	ret

000007b0 <__divmodhi4_neg2>:
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255

000007b6 <__divmodhi4_exit>:
 7b6:	08 95       	ret

Disassembly of section .text.libgcc.div:

000007b8 <__udivmodhi4>:
 7b8:	aa 1b       	sub	r26, r26
 7ba:	bb 1b       	sub	r27, r27
 7bc:	51 e1       	ldi	r21, 0x11	; 17
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <__udivmodhi4_ep>

000007c0 <__udivmodhi4_loop>:
 7c0:	aa 1f       	adc	r26, r26
 7c2:	bb 1f       	adc	r27, r27
 7c4:	a6 17       	cp	r26, r22
 7c6:	b7 07       	cpc	r27, r23
 7c8:	10 f0       	brcs	.+4      	; 0x7ce <__udivmodhi4_ep>
 7ca:	a6 1b       	sub	r26, r22
 7cc:	b7 0b       	sbc	r27, r23

000007ce <__udivmodhi4_ep>:
 7ce:	88 1f       	adc	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	5a 95       	dec	r21
 7d4:	a9 f7       	brne	.-22     	; 0x7c0 <__udivmodhi4_loop>
 7d6:	80 95       	com	r24
 7d8:	90 95       	com	r25
 7da:	bc 01       	movw	r22, r24
 7dc:	cd 01       	movw	r24, r26
 7de:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000870 <_fini>:
 870:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000872 <__funcs_on_exit>:
 872:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000874 <__simulator_exit>:
 874:	08 95       	ret

Disassembly of section .text.exit:

00000802 <exit>:
 802:	ec 01       	movw	r28, r24
 804:	0e 94 39 04 	call	0x872	; 0x872 <__funcs_on_exit>
 808:	0e 94 38 04 	call	0x870	; 0x870 <_fini>
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 3a 04 	call	0x874	; 0x874 <__simulator_exit>
 812:	ce 01       	movw	r24, r28
 814:	0e 94 35 04 	call	0x86a	; 0x86a <_Exit>

Disassembly of section .text._Exit:

0000086a <_Exit>:
 86a:	0e 94 ad 00 	call	0x15a	; 0x15a <_exit>
