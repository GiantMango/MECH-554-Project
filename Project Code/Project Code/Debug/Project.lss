
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000004b8  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800200  00800200  000004b8  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000004e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002193  00000000  00000000  000005fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f84  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ad  00000000  00000000  00003714  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000040c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  000042b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000860  00000000  00000000  0000471b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000414  00000414  000004a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005034  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000002c  0000035a  0000035a  000003ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_adc 0000000e  000003f8  000003f8  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.stop_adc 0000000e  00000406  00000406  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.free_running_adc 00000014  000003e4  000003e4  00000478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.init_dc_moter 00000020  000003ae  000003ae  00000442  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCDBusyLoop 0000007e  000001ce  000001ce  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCDByte 00000070  0000024c  0000024c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.InitLCD 00000088  00000146  00000146  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    0000003c  000002bc  000002bc  00000350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_default 00000002  0000041c  0000041c  000004b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_3 00000032  000002f8  000002f8  0000038c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_29 00000030  0000032a  0000032a  000003be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.init_pwm 00000028  00000386  00000386  0000041a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  0000041e  0000041e  000004b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  00000420  00000420  000004b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  00000422  00000422  000004b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  000003ce  000003ce  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000418  00000418  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
   8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
   c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_3>
  10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  34:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  38:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  50:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  64:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  68:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  6c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  70:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  74:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_29>
  78:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  7c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  80:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  84:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  88:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  8c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  90:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  94:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  98:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  9c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  a0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  a4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  a8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  ac:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  b0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  b4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  b8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  bc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  c0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  c4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  c8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  cc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  d0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  d4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  d8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  dc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
  e0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 03       	mulsu	r16, r18
  e8:	80 00       	.word	0x0080	; ????

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d1 e2       	ldi	r29, 0x21	; 33
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	0c bf       	out	0x3c, r16	; 60

000000fa <__do_copy_data>:
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	19 c0       	rjmp	.+50     	; 0x134 <__do_clear_bss+0x8>
 102:	b7 91       	elpm	r27, Z+
 104:	a7 91       	elpm	r26, Z+
 106:	37 91       	elpm	r19, Z+
 108:	27 91       	elpm	r18, Z+
 10a:	07 91       	elpm	r16, Z+
 10c:	07 fd       	sbrc	r16, 7
 10e:	0e c0       	rjmp	.+28     	; 0x12c <__do_clear_bss>
 110:	97 91       	elpm	r25, Z+
 112:	87 91       	elpm	r24, Z+
 114:	ef 01       	movw	r28, r30
 116:	f9 2f       	mov	r31, r25
 118:	e8 2f       	mov	r30, r24
 11a:	0b bf       	out	0x3b, r16	; 59
 11c:	07 90       	elpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x22>
 126:	fe 01       	movw	r30, r28
 128:	1b be       	out	0x3b, r1	; 59
 12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_clear_bss+0x8>

0000012c <__do_clear_bss>:
 12c:	1d 92       	st	X+, r1
 12e:	a2 17       	cp	r26, r18
 130:	b3 07       	cpc	r27, r19
 132:	e1 f7       	brne	.-8      	; 0x12c <__do_clear_bss>
 134:	e9 3e       	cpi	r30, 0xE9	; 233
 136:	f4 07       	cpc	r31, r20
 138:	21 f7       	brne	.-56     	; 0x102 <__do_copy_data+0x8>
 13a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
 13e:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <exit>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>

Disassembly of section .text:

00000414 <__bad_interrupt>:
 414:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__vector_default>

Disassembly of section .text.init_adc:

0000035a <init_adc>:
 35a:	8d b3       	in	r24, 0x1d	; 29
 35c:	84 60       	ori	r24, 0x04	; 4
 35e:	8d bb       	out	0x1d, r24	; 29
 360:	e9 e6       	ldi	r30, 0x69	; 105
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	80 63       	ori	r24, 0x30	; 48
 368:	80 83       	st	Z, r24
 36a:	ea e7       	ldi	r30, 0x7A	; 122
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 68       	ori	r24, 0x80	; 128
 372:	80 83       	st	Z, r24
 374:	80 81       	ld	r24, Z
 376:	88 60       	ori	r24, 0x08	; 8
 378:	80 83       	st	Z, r24
 37a:	ec e7       	ldi	r30, 0x7C	; 124
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	80 66       	ori	r24, 0x60	; 96
 382:	80 83       	st	Z, r24
 384:	08 95       	ret

Disassembly of section .text.start_adc:

000003f8 <start_adc>:
 3f8:	78 94       	sei
 3fa:	ea e7       	ldi	r30, 0x7A	; 122
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	80 64       	ori	r24, 0x40	; 64
 402:	80 83       	st	Z, r24
 404:	08 95       	ret

Disassembly of section .text.stop_adc:

00000406 <stop_adc>:
 406:	ea e7       	ldi	r30, 0x7A	; 122
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	8f 7b       	andi	r24, 0xBF	; 191
 40e:	80 83       	st	Z, r24
 410:	f8 94       	cli
 412:	08 95       	ret

Disassembly of section .text.free_running_adc:

000003e4 <free_running_adc>:
 3e4:	0e 94 03 02 	call	0x406	; 0x406 <stop_adc>
 3e8:	ea e7       	ldi	r30, 0x7A	; 122
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	80 62       	ori	r24, 0x20	; 32
 3f0:	80 83       	st	Z, r24
 3f2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <start_adc>
 3f6:	08 95       	ret

Disassembly of section .text.init_dc_moter:

000003ae <init_dc_moter>:
#include "dc_motor.h"
#include "lcd.h"

/* Initialize DC motor */
void init_dc_moter(){
	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
 3ae:	84 b1       	in	r24, 0x04	; 4
 3b0:	8f 60       	ori	r24, 0x0F	; 15
 3b2:	84 b9       	out	0x04, r24	; 4
	PORTB = (PORTB & 0x10) | DC_Brake;							// motor driver enable pins	& brake to Vcc
 3b4:	85 b1       	in	r24, 0x05	; 5
 3b6:	80 71       	andi	r24, 0x10	; 16
 3b8:	8f 60       	ori	r24, 0x0F	; 15
 3ba:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	8e 7f       	andi	r24, 0xFE	; 254
 3c0:	85 b9       	out	0x05, r24	; 5
	PORTL = PORTB << 4;
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	82 95       	swap	r24
 3c6:	80 7f       	andi	r24, 0xF0	; 240
 3c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 3cc:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

000001ce <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1ce:	87 b1       	in	r24, 0x07	; 7
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 1d4:	88 b1       	in	r24, 0x08	; 8
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	8f 7b       	andi	r24, 0xBF	; 191
 1de:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDBusyLoop+0x14>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	88 b9       	out	0x08, r24	; 8
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	9a 95       	dec	r25
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCDBusyLoop+0x22>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 1f6:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 1f8:	82 95       	swap	r24
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDBusyLoop+0x30>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 204:	98 b1       	in	r25, 0x08	; 8
 206:	9f 77       	andi	r25, 0x7F	; 127
 208:	98 b9       	out	0x08, r25	; 8
 20a:	95 e0       	ldi	r25, 0x05	; 5
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCDBusyLoop+0x3e>
 210:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 212:	98 b1       	in	r25, 0x08	; 8
 214:	90 68       	ori	r25, 0x80	; 128
 216:	98 b9       	out	0x08, r25	; 8
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	9a 95       	dec	r25
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCDBusyLoop+0x4c>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 220:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 222:	80 78       	andi	r24, 0x80	; 128
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	9a 95       	dec	r25
 228:	f1 f7       	brne	.-4      	; 0x226 <LCDBusyLoop+0x58>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 22c:	98 b1       	in	r25, 0x08	; 8
 22e:	9f 77       	andi	r25, 0x7F	; 127
 230:	98 b9       	out	0x08, r25	; 8
 232:	95 e0       	ldi	r25, 0x05	; 5
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <LCDBusyLoop+0x66>
 238:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 23a:	81 11       	cpse	r24, r1
 23c:	d5 cf       	rjmp	.-86     	; 0x1e8 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 244:	87 b1       	in	r24, 0x07	; 7
 246:	8f 60       	ori	r24, 0x0F	; 15
 248:	87 b9       	out	0x07, r24	; 7
 24a:	08 95       	ret

Disassembly of section .text.LCDByte:

0000024c <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 24c:	28 2f       	mov	r18, r24
 24e:	22 95       	swap	r18
 250:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 252:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 254:	61 11       	cpse	r22, r1
 256:	04 c0       	rjmp	.+8      	; 0x260 <LCDByte+0x14>
	CLEAR_RS();
 258:	98 b1       	in	r25, 0x08	; 8
 25a:	9f 7b       	andi	r25, 0xBF	; 191
 25c:	98 b9       	out	0x08, r25	; 8
 25e:	03 c0       	rjmp	.+6      	; 0x266 <LCDByte+0x1a>
else
	SET_RS();
 260:	98 b1       	in	r25, 0x08	; 8
 262:	90 64       	ori	r25, 0x40	; 64
 264:	98 b9       	out	0x08, r25	; 8
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <LCDByte+0x1c>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 26e:	98 b1       	in	r25, 0x08	; 8
 270:	90 68       	ori	r25, 0x80	; 128
 272:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 274:	98 b1       	in	r25, 0x08	; 8
 276:	90 7f       	andi	r25, 0xF0	; 240
 278:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 27a:	98 b9       	out	0x08, r25	; 8
 27c:	95 e0       	ldi	r25, 0x05	; 5
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <LCDByte+0x32>
 282:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 284:	98 b1       	in	r25, 0x08	; 8
 286:	9f 77       	andi	r25, 0x7F	; 127
 288:	98 b9       	out	0x08, r25	; 8
 28a:	95 e0       	ldi	r25, 0x05	; 5
 28c:	9a 95       	dec	r25
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCDByte+0x40>
 290:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 292:	98 b1       	in	r25, 0x08	; 8
 294:	90 68       	ori	r25, 0x80	; 128
 296:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 298:	98 b1       	in	r25, 0x08	; 8
 29a:	90 7f       	andi	r25, 0xF0	; 240
 29c:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 29e:	88 b9       	out	0x08, r24	; 8
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDByte+0x56>
 2a6:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	8f 77       	andi	r24, 0x7F	; 127
 2ac:	88 b9       	out	0x08, r24	; 8
 2ae:	95 e0       	ldi	r25, 0x05	; 5
 2b0:	9a 95       	dec	r25
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCDByte+0x64>
 2b4:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 2b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCDBusyLoop>
 2ba:	08 95       	ret

Disassembly of section .text.InitLCD:

00000146 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	86 e7       	ldi	r24, 0x76	; 118
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <InitLCD+0xa>
 158:	00 c0       	rjmp	.+0      	; 0x15a <InitLCD+0x14>
 15a:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 15c:	87 b1       	in	r24, 0x07	; 7
 15e:	8f 60       	ori	r24, 0x0F	; 15
 160:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 162:	87 b1       	in	r24, 0x07	; 7
 164:	80 68       	ori	r24, 0x80	; 128
 166:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	80 62       	ori	r24, 0x20	; 32
 172:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 174:	88 b1       	in	r24, 0x08	; 8
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8f 77       	andi	r24, 0x7F	; 127
 17e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 180:	88 b1       	in	r24, 0x08	; 8
 182:	8f 7d       	andi	r24, 0xDF	; 223
 184:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 186:	88 b1       	in	r24, 0x08	; 8
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	00 c0       	rjmp	.+0      	; 0x18e <InitLCD+0x48>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <InitLCD+0x4a>
 190:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 192:	88 b1       	in	r24, 0x08	; 8
 194:	80 68       	ori	r24, 0x80	; 128
 196:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	88 b9       	out	0x08, r24	; 8
 19e:	25 e0       	ldi	r18, 0x05	; 5
 1a0:	2a 95       	dec	r18
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <InitLCD+0x5a>
 1a4:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	8f 77       	andi	r24, 0x7F	; 127
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <InitLCD+0x68>
 1b2:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1b4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	8c 2f       	mov	r24, r28
 1bc:	8c 60       	ori	r24, 0x0C	; 12
 1be:	0e 94 26 01 	call	0x24c	; 0x24c <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 26 01 	call	0x24c	; 0x24c <LCDByte>
}
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

Disassembly of section .text.main:

000002bc <main>:


int main(void)
{
	/* Disable global interrupt */
	cli();
 2bc:	f8 94       	cli
		
	/* Initialize main clock: 8 MHz */
	CLKPR = 0x80;
 2be:	e1 e6       	ldi	r30, 0x61	; 97
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 e8       	ldi	r24, 0x80	; 128
 2c4:	80 83       	st	Z, r24
	CLKPR = 0x01;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 83       	st	Z, r24
	
	/* Set PORTC as output to display ADC result */
	DDRL = 0xFF;
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0x00;
 2d0:	11 b8       	out	0x01, r1	; 1
	
	/* Init Interrupt */
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	0e 94 a3 00 	call	0x146	; 0x146 <__data_load_end>
	LCDClear();
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 26 01 	call	0x24c	; 0x24c <LCDByte>
	
	init_pwm();
 2e0:	0e 94 c3 01 	call	0x386	; 0x386 <init_pwm>
	
	init_dc_moter();
 2e4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <init_dc_moter>
	init_adc();
 2e8:	0e 94 ad 01 	call	0x35a	; 0x35a <init_adc>
	free_running_adc();
 2ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <free_running_adc>
	start_adc();
 2f0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <start_adc>
	
	sei();
 2f4:	78 94       	sei
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <main+0x3a>

Disassembly of section .text.__vector_default:

0000041c <__vector_default>:
	}
}


/***** Interrupt Service Routines *****/
EMPTY_INTERRUPT(BADISR_vect);
 41c:	18 95       	reti

Disassembly of section .text.__vector_3:

000002f8 <__vector_3>:

ISR(INT2_vect){ // Active HIGH starts AD conversion
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	0b b6       	in	r0, 0x3b	; 59
 304:	0f 92       	push	r0
 306:	8f 93       	push	r24
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
	ADCSRA |= _BV(ADSC); // Execute ADC when rising edge 
 30c:	ea e7       	ldi	r30, 0x7A	; 122
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	80 64       	ori	r24, 0x40	; 64
 314:	80 83       	st	Z, r24
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0b be       	out	0x3b, r0	; 59
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

Disassembly of section .text.__vector_29:

0000032a <__vector_29>:

ISR(ADC_vect){ // Triggered when ADC is done
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
	ADC_result = ADCH; // MSB 8 bit
 338:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 33c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	ADC_result_flag = 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ADC_result_flag+0x1>
 348:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ADC_result_flag>
}
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

Disassembly of section .text.init_pwm:

00000386 <init_pwm>:

/****** PWM ******/

void init_pwm(){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
 386:	84 b5       	in	r24, 0x24	; 36
 388:	83 60       	ori	r24, 0x03	; 3
 38a:	84 bd       	out	0x24, r24	; 36
	
	/* Step 2: Enable output compare interrupt for Timer 0 */
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
 38c:	ee e6       	ldi	r30, 0x6E	; 110
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	82 60       	ori	r24, 0x02	; 2
 394:	80 83       	st	Z, r24
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
 396:	84 b5       	in	r24, 0x24	; 36
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	84 bd       	out	0x24, r24	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
 39c:	85 b5       	in	r24, 0x25	; 37
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	85 bd       	out	0x25, r24	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = 127;							// 50% -----> 256 * 50% - 1 = 127
 3a2:	8f e7       	ldi	r24, 0x7F	; 127
 3a4:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
 3a6:	84 b1       	in	r24, 0x04	; 4
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	84 b9       	out	0x04, r24	; 4
 3ac:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000041e <_fini>:
 41e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000420 <__funcs_on_exit>:
 420:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000422 <__simulator_exit>:
 422:	08 95       	ret

Disassembly of section .text.exit:

000003ce <exit>:
 3ce:	ec 01       	movw	r28, r24
 3d0:	0e 94 10 02 	call	0x420	; 0x420 <__funcs_on_exit>
 3d4:	0e 94 0f 02 	call	0x41e	; 0x41e <_fini>
 3d8:	ce 01       	movw	r24, r28
 3da:	0e 94 11 02 	call	0x422	; 0x422 <__simulator_exit>
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 0c 02 	call	0x418	; 0x418 <_Exit>

Disassembly of section .text._Exit:

00000418 <_Exit>:
 418:	0e 94 a1 00 	call	0x142	; 0x142 <_exit>
