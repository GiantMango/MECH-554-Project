
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008b6  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  000008b6  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000284e  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001077  00000000  00000000  000032b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc8  00000000  00000000  0000432a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00004ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ae  00000000  00000000  000051d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  00005686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000007f2  000007f2  000008a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006188  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000002c  000006e4  000006e4  00000798  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_adc 0000000e  000007c8  000007c8  0000087c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.stop_adc 0000000e  000007d6  000007d6  0000088a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.free_running_adc 00000014  000007a2  000007a2  00000856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data 00000027  00000146  00000146  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.init_dc_moter 00000032  00000620  00000620  000006d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCDBusyLoop 0000007e  000003b8  000003b8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCDByte 00000070  00000436  00000436  000004ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.InitLCD 00000088  00000330  00000330  000003e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCDWriteString 00000030  00000684  00000684  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCDWriteInt 000000c4  0000026c  0000026c  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDGotoXY 00000012  000007b6  000007b6  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    000000f6  00000176  00000176  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_default 00000002  000007fa  000007fa  000008ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_1 0000006c  000004a6  000004a6  0000055a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_2 0000006c  00000512  00000512  000005c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_3 00000032  00000652  00000652  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.__vector_29 00000030  000006b4  000006b4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss.ramp_counter 00000002  0080020b  0080020b  000008b6  2**0
                  ALLOC
 34 .text.mTimer  0000004a  000005d6  000005d6  0000068a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 00000008  0000016d  0000016d  00000221  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.display_pwm 00000058  0000057e  0000057e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.init_pwm 0000002c  00000710  00000710  000007c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.libgcc.div 00000028  0000073c  0000073c  000007f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.libgcc  0000000e  000007e4  000007e4  00000898  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.libgcc.div 00000028  00000764  00000764  00000818  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_fini 00000002  000007fc  000007fc  000008b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__dummy_funcs_on_exit 00000002  000007fe  000007fe  000008b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__dummy_simulator_exit 00000002  00000800  00000800  000008b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.exit    00000016  0000078c  0000078c  00000840  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text._Exit   00000004  000007f6  000007f6  000008aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_1>
   8:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_2>
   c:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_3>
  10:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  14:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  18:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  1c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  20:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  24:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  28:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  2c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  30:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  34:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  38:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  3c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  40:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  44:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  48:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  4c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  50:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  54:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  58:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  5c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  60:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  64:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  68:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  6c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  70:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  74:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_29>
  78:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  7c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  80:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  84:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  88:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  8c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  90:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  94:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  98:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  9c:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  a0:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  a4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  a8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  ac:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  b0:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  b4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  b8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  bc:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  c0:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  c4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  c8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  cc:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  d0:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  d4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  d8:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  dc:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>
  e0:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 0d       	add	r16, r2
  e8:	80 00       	.word	0x0080	; ????

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d1 e2       	ldi	r29, 0x21	; 33
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	00 e0       	ldi	r16, 0x00	; 0
  f8:	0c bf       	out	0x3c, r16	; 60

000000fa <__do_copy_data>:
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	19 c0       	rjmp	.+50     	; 0x134 <__do_clear_bss+0x8>
 102:	b7 91       	elpm	r27, Z+
 104:	a7 91       	elpm	r26, Z+
 106:	37 91       	elpm	r19, Z+
 108:	27 91       	elpm	r18, Z+
 10a:	07 91       	elpm	r16, Z+
 10c:	07 fd       	sbrc	r16, 7
 10e:	0e c0       	rjmp	.+28     	; 0x12c <__do_clear_bss>
 110:	97 91       	elpm	r25, Z+
 112:	87 91       	elpm	r24, Z+
 114:	ef 01       	movw	r28, r30
 116:	f9 2f       	mov	r31, r25
 118:	e8 2f       	mov	r30, r24
 11a:	0b bf       	out	0x3b, r16	; 59
 11c:	07 90       	elpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	a2 17       	cp	r26, r18
 122:	b3 07       	cpc	r27, r19
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x22>
 126:	fe 01       	movw	r30, r28
 128:	1b be       	out	0x3b, r1	; 59
 12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_clear_bss+0x8>

0000012c <__do_clear_bss>:
 12c:	1d 92       	st	X+, r1
 12e:	a2 17       	cp	r26, r18
 130:	b3 07       	cpc	r27, r19
 132:	e1 f7       	brne	.-8      	; 0x12c <__do_clear_bss>
 134:	e9 3e       	cpi	r30, 0xE9	; 233
 136:	f4 07       	cpc	r31, r20
 138:	21 f7       	brne	.-56     	; 0x102 <__do_copy_data+0x8>
 13a:	0e 94 bb 00 	call	0x176	; 0x176 <main>
 13e:	0c 94 c6 03 	jmp	0x78c	; 0x78c <exit>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>

Disassembly of section .text:

000007f2 <__bad_interrupt>:
 7f2:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__vector_default>

Disassembly of section .text.init_adc:

000006e4 <init_adc>:
#include <avr/interrupt.h>

/* Initialize ADC in one conversion mode */
void init_adc(){
	
	EIMSK |= (_BV(INT2));					// enable INT2
 6e4:	8d b3       	in	r24, 0x1d	; 29
 6e6:	84 60       	ori	r24, 0x04	; 4
 6e8:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC21) | _BV(ISC20));		// rising edge trigger
 6ea:	e9 e6       	ldi	r30, 0x69	; 105
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	80 63       	ori	r24, 0x30	; 48
 6f2:	80 83       	st	Z, r24
	
	/* Config ADC: default ADC input is ADC0 in PORTF 0 (Single Conversion) */
	ADCSRA |= _BV(ADEN);					// enable ADC | ADEN: ADC Enable
 6f4:	ea e7       	ldi	r30, 0x7A	; 122
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	80 68       	ori	r24, 0x80	; 128
 6fc:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);					// enable interrupt of ADC | ADIE: ADC Interrupt enable (raised when conversion done)
 6fe:	80 81       	ld	r24, Z
 700:	88 60       	ori	r24, 0x08	; 8
 702:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0);		// ADLAR: ADC Left adjust result | REFS0: AVCC with external capacitor at AREF pin
 704:	ec e7       	ldi	r30, 0x7C	; 124
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	80 66       	ori	r24, 0x60	; 96
 70c:	80 83       	st	Z, r24
 70e:	08 95       	ret

Disassembly of section .text.start_adc:

000007c8 <start_adc>:
	// Default ADC Clock Pre-scaler = 2 | ADC Clk = 8MHz / 2 = 4 MHz
} // end init_adc

/* Start ADC Conversion */
void start_adc(){
	sei();		// enable global interrupt
 7c8:	78 94       	sei
	
	/* Initialize ADC and start one conversion at the beginning */
	ADCSRA |= _BV(ADSC);					// ADSC: ADC Start Conversion Bit
 7ca:	ea e7       	ldi	r30, 0x7A	; 122
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	80 64       	ori	r24, 0x40	; 64
 7d2:	80 83       	st	Z, r24
 7d4:	08 95       	ret

Disassembly of section .text.stop_adc:

000007d6 <stop_adc>:
} // end start_adc

/* Stop ADC Conversion */
void stop_adc(){
	ADCSRA &= ~(_BV(ADSC));		// clear ADSC
 7d6:	ea e7       	ldi	r30, 0x7A	; 122
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	8f 7b       	andi	r24, 0xBF	; 191
 7de:	80 83       	st	Z, r24
	cli();
 7e0:	f8 94       	cli
 7e2:	08 95       	ret

Disassembly of section .text.free_running_adc:

000007a2 <free_running_adc>:
}// end stop_adc

void free_running_adc(){
	stop_adc();
 7a2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <stop_adc>
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
 7a6:	ea e7       	ldi	r30, 0x7A	; 122
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	80 62       	ori	r24, 0x20	; 32
 7ae:	80 83       	st	Z, r24
	start_adc();
 7b0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <start_adc>
 7b4:	08 95       	ret

Disassembly of section .text.init_dc_moter:

00000620 <init_dc_moter>:
#include "dc_motor.h"
#include "lcd.h"

/* Initialize DC motor */
void init_dc_moter(){
	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
 620:	84 b1       	in	r24, 0x04	; 4
 622:	8f 60       	ori	r24, 0x0F	; 15
 624:	84 b9       	out	0x04, r24	; 4
	PORTB = (PORTB & 0x10) | DC_Brake;							// motor driver enable pins	& brake to Vcc
 626:	85 b1       	in	r24, 0x05	; 5
 628:	80 71       	andi	r24, 0x10	; 16
 62a:	8f 60       	ori	r24, 0x0F	; 15
 62c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
 62e:	85 b1       	in	r24, 0x05	; 5
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	85 b9       	out	0x05, r24	; 5
	LCDWriteStringXY(0, 0, "INIT - Forward");
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCDGotoXY>
 63c:	66 e4       	ldi	r22, 0x46	; 70
 63e:	71 e0       	ldi	r23, 0x01	; 1
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0e 94 42 03 	call	0x684	; 0x684 <LCDWriteString>
	PORTL = PORTB << 4;
 646:	85 b1       	in	r24, 0x05	; 5
 648:	82 95       	swap	r24
 64a:	80 7f       	andi	r24, 0xF0	; 240
 64c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 650:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

000003b8 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 3b8:	87 b1       	in	r24, 0x07	; 7
 3ba:	80 7f       	andi	r24, 0xF0	; 240
 3bc:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 3be:	88 b1       	in	r24, 0x08	; 8
 3c0:	80 62       	ori	r24, 0x20	; 32
 3c2:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 3c4:	88 b1       	in	r24, 0x08	; 8
 3c6:	8f 7b       	andi	r24, 0xBF	; 191
 3c8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCDBusyLoop+0x14>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 3d2:	88 b1       	in	r24, 0x08	; 8
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	88 b9       	out	0x08, r24	; 8
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	9a 95       	dec	r25
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCDBusyLoop+0x22>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 3e0:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 3e2:	82 95       	swap	r24
 3e4:	80 7f       	andi	r24, 0xF0	; 240
 3e6:	92 e0       	ldi	r25, 0x02	; 2
 3e8:	9a 95       	dec	r25
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCDBusyLoop+0x30>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 3ee:	98 b1       	in	r25, 0x08	; 8
 3f0:	9f 77       	andi	r25, 0x7F	; 127
 3f2:	98 b9       	out	0x08, r25	; 8
 3f4:	95 e0       	ldi	r25, 0x05	; 5
 3f6:	9a 95       	dec	r25
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCDBusyLoop+0x3e>
 3fa:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 3fc:	98 b1       	in	r25, 0x08	; 8
 3fe:	90 68       	ori	r25, 0x80	; 128
 400:	98 b9       	out	0x08, r25	; 8
 402:	92 e0       	ldi	r25, 0x02	; 2
 404:	9a 95       	dec	r25
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 40a:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 40c:	80 78       	andi	r24, 0x80	; 128
 40e:	92 e0       	ldi	r25, 0x02	; 2
 410:	9a 95       	dec	r25
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

		_delay_us(0.5);
		
		CLEAR_E();
 416:	98 b1       	in	r25, 0x08	; 8
 418:	9f 77       	andi	r25, 0x7F	; 127
 41a:	98 b9       	out	0x08, r25	; 8
 41c:	95 e0       	ldi	r25, 0x05	; 5
 41e:	9a 95       	dec	r25
 420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 422:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 424:	81 11       	cpse	r24, r1
 426:	d5 cf       	rjmp	.-86     	; 0x3d2 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 428:	88 b1       	in	r24, 0x08	; 8
 42a:	8f 7d       	andi	r24, 0xDF	; 223
 42c:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 42e:	87 b1       	in	r24, 0x07	; 7
 430:	8f 60       	ori	r24, 0x0F	; 15
 432:	87 b9       	out	0x07, r24	; 7
 434:	08 95       	ret

Disassembly of section .text.LCDByte:

00000436 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 436:	28 2f       	mov	r18, r24
 438:	22 95       	swap	r18
 43a:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 43c:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 43e:	61 11       	cpse	r22, r1
 440:	04 c0       	rjmp	.+8      	; 0x44a <LCDByte+0x14>
	CLEAR_RS();
 442:	98 b1       	in	r25, 0x08	; 8
 444:	9f 7b       	andi	r25, 0xBF	; 191
 446:	98 b9       	out	0x08, r25	; 8
 448:	03 c0       	rjmp	.+6      	; 0x450 <LCDByte+0x1a>
else
	SET_RS();
 44a:	98 b1       	in	r25, 0x08	; 8
 44c:	90 64       	ori	r25, 0x40	; 64
 44e:	98 b9       	out	0x08, r25	; 8
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	9a 95       	dec	r25
 454:	f1 f7       	brne	.-4      	; 0x452 <LCDByte+0x1c>
 456:	00 c0       	rjmp	.+0      	; 0x458 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 458:	98 b1       	in	r25, 0x08	; 8
 45a:	90 68       	ori	r25, 0x80	; 128
 45c:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 45e:	98 b1       	in	r25, 0x08	; 8
 460:	90 7f       	andi	r25, 0xF0	; 240
 462:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 464:	98 b9       	out	0x08, r25	; 8
 466:	95 e0       	ldi	r25, 0x05	; 5
 468:	9a 95       	dec	r25
 46a:	f1 f7       	brne	.-4      	; 0x468 <LCDByte+0x32>
 46c:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 46e:	98 b1       	in	r25, 0x08	; 8
 470:	9f 77       	andi	r25, 0x7F	; 127
 472:	98 b9       	out	0x08, r25	; 8
 474:	95 e0       	ldi	r25, 0x05	; 5
 476:	9a 95       	dec	r25
 478:	f1 f7       	brne	.-4      	; 0x476 <LCDByte+0x40>
 47a:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 47c:	98 b1       	in	r25, 0x08	; 8
 47e:	90 68       	ori	r25, 0x80	; 128
 480:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 482:	98 b1       	in	r25, 0x08	; 8
 484:	90 7f       	andi	r25, 0xF0	; 240
 486:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 488:	88 b9       	out	0x08, r24	; 8
 48a:	85 e0       	ldi	r24, 0x05	; 5
 48c:	8a 95       	dec	r24
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCDByte+0x56>
 490:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 492:	88 b1       	in	r24, 0x08	; 8
 494:	8f 77       	andi	r24, 0x7F	; 127
 496:	88 b9       	out	0x08, r24	; 8
 498:	95 e0       	ldi	r25, 0x05	; 5
 49a:	9a 95       	dec	r25
 49c:	f1 f7       	brne	.-4      	; 0x49a <LCDByte+0x64>
 49e:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 4a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDBusyLoop>
 4a4:	08 95       	ret

Disassembly of section .text.InitLCD:

00000330 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	86 e7       	ldi	r24, 0x76	; 118
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <InitLCD+0xa>
 342:	00 c0       	rjmp	.+0      	; 0x344 <InitLCD+0x14>
 344:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 346:	87 b1       	in	r24, 0x07	; 7
 348:	8f 60       	ori	r24, 0x0F	; 15
 34a:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 34c:	87 b1       	in	r24, 0x07	; 7
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 352:	87 b1       	in	r24, 0x07	; 7
 354:	80 64       	ori	r24, 0x40	; 64
 356:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 358:	87 b1       	in	r24, 0x07	; 7
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 35e:	88 b1       	in	r24, 0x08	; 8
 360:	80 7f       	andi	r24, 0xF0	; 240
 362:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 364:	88 b1       	in	r24, 0x08	; 8
 366:	8f 77       	andi	r24, 0x7F	; 127
 368:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 36a:	88 b1       	in	r24, 0x08	; 8
 36c:	8f 7d       	andi	r24, 0xDF	; 223
 36e:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 370:	88 b1       	in	r24, 0x08	; 8
 372:	8f 7b       	andi	r24, 0xBF	; 191
 374:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 376:	00 c0       	rjmp	.+0      	; 0x378 <InitLCD+0x48>
 378:	00 c0       	rjmp	.+0      	; 0x37a <InitLCD+0x4a>
 37a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 37c:	88 b1       	in	r24, 0x08	; 8
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 382:	88 b1       	in	r24, 0x08	; 8
 384:	82 60       	ori	r24, 0x02	; 2
 386:	88 b9       	out	0x08, r24	; 8
 388:	25 e0       	ldi	r18, 0x05	; 5
 38a:	2a 95       	dec	r18
 38c:	f1 f7       	brne	.-4      	; 0x38a <InitLCD+0x5a>
 38e:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 390:	88 b1       	in	r24, 0x08	; 8
 392:	8f 77       	andi	r24, 0x7F	; 127
 394:	88 b9       	out	0x08, r24	; 8
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <InitLCD+0x68>
 39c:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 39e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	8c 2f       	mov	r24, r28
 3a6:	8c 60       	ori	r24, 0x0C	; 12
 3a8:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	88 e2       	ldi	r24, 0x28	; 40
 3b0:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
}
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

Disassembly of section .text.LCDWriteString:

00000684 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	6b 01       	movw	r12, r22
 68c:	e8 2e       	mov	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 68e:	07 c0       	rjmp	.+14     	; 0x69e <LCDWriteString+0x1a>
 {
	LCDData(*msg);
 690:	61 e0       	ldi	r22, 0x01	; 1
 692:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
	msg++;
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	c8 1a       	sub	r12, r24
 69a:	d8 0a       	sbc	r13, r24
 69c:	e8 0a       	sbc	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 69e:	f6 01       	movw	r30, r12
 6a0:	5e 2d       	mov	r21, r14
 6a2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__xload_1>
 6a6:	86 2f       	mov	r24, r22
 6a8:	61 11       	cpse	r22, r1
 6aa:	f2 cf       	rjmp	.-28     	; 0x690 <LCDWriteString+0xc>
 {
	LCDData(*msg);
	msg++;
 }
}
 6ac:	ef 90       	pop	r14
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

0000026c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	00 d0       	rcall	.+0      	; 0x27a <LCDWriteInt+0xe>
 27a:	0f 92       	push	r0
 27c:	0f 92       	push	r0
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 284:	fe 01       	movw	r30, r28
 286:	31 96       	adiw	r30, 0x01	; 1
 288:	25 e0       	ldi	r18, 0x05	; 5
 28a:	df 01       	movw	r26, r30
 28c:	1d 92       	st	X+, r1
 28e:	2a 95       	dec	r18
 290:	e9 f7       	brne	.-6      	; 0x28c <LCDWriteInt+0x20>
	int i=4,j=0;
 292:	24 e0       	ldi	r18, 0x04	; 4
 294:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 298:	6a e0       	ldi	r22, 0x0A	; 10
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	0e 94 9e 03 	call	0x73c	; 0x73c <__divmodhi4>
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e2 0f       	add	r30, r18
 2aa:	f3 1f       	adc	r31, r19
 2ac:	80 83       	st	Z, r24
	val=val/10;
 2ae:	86 2f       	mov	r24, r22
 2b0:	97 2f       	mov	r25, r23
	i--;
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	79 f7       	brne	.-34     	; 0x298 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2ba:	bf ef       	ldi	r27, 0xFF	; 255
 2bc:	eb 16       	cp	r14, r27
 2be:	fb 06       	cpc	r15, r27
 2c0:	81 f4       	brne	.+32     	; 0x2e2 <LCDWriteInt+0x76>
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 2c4:	0f 5f       	subi	r16, 0xFF	; 255
 2c6:	1f 4f       	sbci	r17, 0xFF	; 255
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <LCDWriteInt+0x62>
 2ca:	00 e0       	ldi	r16, 0x00	; 0
 2cc:	10 e0       	ldi	r17, 0x00	; 0
 2ce:	e1 e0       	ldi	r30, 0x01	; 1
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ec 0f       	add	r30, r28
 2d4:	fd 1f       	adc	r31, r29
 2d6:	e0 0f       	add	r30, r16
 2d8:	f1 1f       	adc	r31, r17
 2da:	20 81       	ld	r18, Z
 2dc:	22 23       	and	r18, r18
 2de:	91 f3       	breq	.-28     	; 0x2c4 <LCDWriteInt+0x58>
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 2e2:	05 e0       	ldi	r16, 0x05	; 5
 2e4:	10 e0       	ldi	r17, 0x00	; 0
 2e6:	0e 19       	sub	r16, r14
 2e8:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 2ea:	99 23       	and	r25, r25
 2ec:	94 f4       	brge	.+36     	; 0x312 <LCDWriteInt+0xa6>
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	8d e2       	ldi	r24, 0x2D	; 45
 2f2:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
 2f6:	0d c0       	rjmp	.+26     	; 0x312 <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	e0 0f       	add	r30, r16
 302:	f1 1f       	adc	r31, r17
 304:	80 81       	ld	r24, Z
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 30e:	0f 5f       	subi	r16, 0xFF	; 255
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	05 30       	cpi	r16, 0x05	; 5
 314:	11 05       	cpc	r17, r1
 316:	84 f3       	brlt	.-32     	; 0x2f8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

000007b6 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 7b6:	88 32       	cpi	r24, 0x28	; 40
 7b8:	30 f4       	brcc	.+12     	; 0x7c6 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 7ba:	61 11       	cpse	r22, r1
 7bc:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
 7c6:	08 95       	ret

Disassembly of section .text.main:

00000176 <main>:
volatile int ramp_counter = 0;

int main(void)
{
	/* Disable global interrupt */
	cli();
 176:	f8 94       	cli
		
	/* Initialize main clock: 8 MHz */
	CLKPR = 0x80;
 178:	e1 e6       	ldi	r30, 0x61	; 97
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	80 83       	st	Z, r24
	CLKPR = 0x01;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
	
	/* Set PORTC as output to display ADC result */
	DDRL = 0xFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA = 0x00;
 18a:	11 b8       	out	0x01, r1	; 1
	
	/* Init Interrupt */
	EIMSK |= _BV(INT1) | _BV(INT0);			// enable INT1
 18c:	8d b3       	in	r24, 0x1d	; 29
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	8d bb       	out	0x1d, r24	; 29
	EICRA |= _BV(ISC11) | _BV(ISC01);		// falling edge trigger
 192:	e9 e6       	ldi	r30, 0x69	; 105
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8a 60       	ori	r24, 0x0A	; 10
 19a:	80 83       	st	Z, r24
	
	//Initialize LCD module
	InitLCD(LS_BLINK|LS_ULINE);
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 98 01 	call	0x330	; 0x330 <InitLCD>

	//Clear the screen
	LCDClear();
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 1b 02 	call	0x436	; 0x436 <LCDByte>
	
	/* Generate 30% duty cycle PWM signal */
	init_pwm();
 1aa:	0e 94 88 03 	call	0x710	; 0x710 <init_pwm>
	
	/* PORTB 0b 0 0 0 0 ENa ENb INa INb */
	init_dc_moter();
 1ae:	0e 94 10 03 	call	0x620	; 0x620 <init_dc_moter>
	
	init_adc();
 1b2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <init_adc>
	free_running_adc();
 1b6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <free_running_adc>
	start_adc();
 1ba:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <start_adc>
	
	sei();
 1be:	78 94       	sei
	LCDWriteIntXY(8,0,counter,3);
	*/
	
    while(1)
    {		
		if(ramp_up_flag){
 1c0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <ramp_up_flag>
 1c4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <ramp_up_flag+0x1>
 1c8:	89 2b       	or	r24, r25
 1ca:	29 f1       	breq	.+74     	; 0x216 <main+0xa0>
			if (ramp_counter == 255){
 1cc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_end>
 1d0:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_end+0x1>
 1d4:	8f 3f       	cpi	r24, 0xFF	; 255
 1d6:	91 05       	cpc	r25, r1
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <main+0x6e>
				ramp_counter = 0;
 1da:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <_end+0x1>
 1de:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <_end>
 1e2:	09 c0       	rjmp	.+18     	; 0x1f6 <main+0x80>
			} else {
				ramp_counter += 1;
 1e4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_end>
 1e8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_end+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_end+0x1>
 1f2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_end>
			}
			ramp_up_flag = 0;
 1f6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <ramp_up_flag+0x1>
 1fa:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <ramp_up_flag>
			LCDWriteIntXY(8, 0, ramp_counter, 3);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	88 e0       	ldi	r24, 0x08	; 8
 202:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCDGotoXY>
 206:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_end>
 20a:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_end+0x1>
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	0e 94 36 01 	call	0x26c	; 0x26c <LCDWriteInt>
		}
		
		if(ramp_down_flag){
 216:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <ramp_down_flag>
 21a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <ramp_down_flag+0x1>
 21e:	89 2b       	or	r24, r25
 220:	79 f2       	breq	.-98     	; 0x1c0 <main+0x4a>
			if (ramp_counter == 0){
 222:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_end>
 226:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_end+0x1>
 22a:	89 2b       	or	r24, r25
 22c:	29 f4       	brne	.+10     	; 0x238 <main+0xc2>
				ramp_counter = 0;
 22e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <_end+0x1>
 232:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <_end>
 236:	09 c0       	rjmp	.+18     	; 0x24a <main+0xd4>
			} else {
				ramp_counter -= 1;
 238:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_end>
 23c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_end+0x1>
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <_end+0x1>
 246:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <_end>
			}
			ramp_down_flag = 0;
 24a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <ramp_down_flag+0x1>
 24e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <ramp_down_flag>
			LCDWriteIntXY(8, 0, ramp_counter, 3);
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCDGotoXY>
 25a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <_end>
 25e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <_end+0x1>
 262:	63 e0       	ldi	r22, 0x03	; 3
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 36 01 	call	0x26c	; 0x26c <LCDWriteInt>
 26a:	aa cf       	rjmp	.-172    	; 0x1c0 <main+0x4a>

Disassembly of section .text.__vector_default:

000007fa <__vector_default>:
    }
}


/***** Interrupt Service Routines *****/
EMPTY_INTERRUPT(BADISR_vect);
 7fa:	18 95       	reti

Disassembly of section .text.__vector_1:

000004a6 <__vector_1>:
	while((PINA & 0x01) == 0x00);
	mTimer(25);
}
*/

ISR(INT0_vect){ // Ramp Up
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	0b b6       	in	r0, 0x3b	; 59
 4b2:	0f 92       	push	r0
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	mTimer(25);
 4cc:	89 e1       	ldi	r24, 0x19	; 25
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <mTimer>
	ramp_up_flag = 1;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <ramp_up_flag+0x1>
 4dc:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <ramp_up_flag>
	while((PINA & 0x02) == 0x00);
 4e0:	01 9b       	sbis	0x00, 1	; 0
 4e2:	fe cf       	rjmp	.-4      	; 0x4e0 <__vector_1+0x3a>
	mTimer(25);
 4e4:	89 e1       	ldi	r24, 0x19	; 25
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <mTimer>
}
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0b be       	out	0x3b, r0	; 59
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

Disassembly of section .text.__vector_2:

00000512 <__vector_2>:

ISR(INT1_vect){ // Ramp Down
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	0b b6       	in	r0, 0x3b	; 59
 51e:	0f 92       	push	r0
 520:	2f 93       	push	r18
 522:	3f 93       	push	r19
 524:	4f 93       	push	r20
 526:	5f 93       	push	r21
 528:	6f 93       	push	r22
 52a:	7f 93       	push	r23
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	mTimer(25);
 538:	89 e1       	ldi	r24, 0x19	; 25
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <mTimer>
	ramp_down_flag = 1;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <ramp_down_flag+0x1>
 548:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <ramp_down_flag>
	while((PINA & 0x01) == 0x00);
 54c:	00 9b       	sbis	0x00, 0	; 0
 54e:	fe cf       	rjmp	.-4      	; 0x54c <__vector_2+0x3a>
	mTimer(25);
 550:	89 e1       	ldi	r24, 0x19	; 25
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <mTimer>
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0b be       	out	0x3b, r0	; 59
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

Disassembly of section .text.__vector_3:

00000652 <__vector_3>:


ISR(INT2_vect){ // Active HIGH starts AD conversion
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	0b b6       	in	r0, 0x3b	; 59
 65e:	0f 92       	push	r0
 660:	8f 93       	push	r24
 662:	ef 93       	push	r30
 664:	ff 93       	push	r31
	ADCSRA |= _BV(ADSC); // Execute ADC when rising edge 
 666:	ea e7       	ldi	r30, 0x7A	; 122
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	80 64       	ori	r24, 0x40	; 64
 66e:	80 83       	st	Z, r24
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	8f 91       	pop	r24
 676:	0f 90       	pop	r0
 678:	0b be       	out	0x3b, r0	; 59
 67a:	0f 90       	pop	r0
 67c:	0f be       	out	0x3f, r0	; 63
 67e:	0f 90       	pop	r0
 680:	1f 90       	pop	r1
 682:	18 95       	reti

Disassembly of section .text.__vector_29:

000006b4 <__vector_29>:

ISR(ADC_vect){ // Triggered when ADC is done
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	8f 93       	push	r24
 6c0:	9f 93       	push	r25
	ADC_result = ADCH; // MSB 8 bit
 6c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 6c6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	ADC_result_flag = 1;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ADC_result_flag+0x1>
 6d2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_result_flag>
}
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

Disassembly of section .text.mTimer:

000005d6 <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 5d6:	e1 e8       	ldi	r30, 0x81	; 129
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	20 81       	ld	r18, Z
 5dc:	2a 60       	ori	r18, 0x0A	; 10
 5de:	20 83       	st	Z, r18
	OCR1A = 0x03EB; // Set output compare register for 1000 ticks which equals to 1ms
 5e0:	2b ee       	ldi	r18, 0xEB	; 235
 5e2:	33 e0       	ldi	r19, 0x03	; 3
 5e4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 5e8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
 5ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 5f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
 5f4:	ef e6       	ldi	r30, 0x6F	; 111
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	20 81       	ld	r18, Z
 5fa:	22 60       	ori	r18, 0x02	; 2
 5fc:	20 83       	st	Z, r18
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 5fe:	26 b3       	in	r18, 0x16	; 22
 600:	22 60       	ori	r18, 0x02	; 2
 602:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 604:	20 e0       	ldi	r18, 0x00	; 0
 606:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 608:	07 c0       	rjmp	.+14     	; 0x618 <mTimer+0x42>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 60a:	b1 9b       	sbis	0x16, 1	; 22
 60c:	05 c0       	rjmp	.+10     	; 0x618 <mTimer+0x42>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 60e:	46 b3       	in	r20, 0x16	; 22
 610:	42 60       	ori	r20, 0x02	; 2
 612:	46 bb       	out	0x16, r20	; 22
			i++;
 614:	2f 5f       	subi	r18, 0xFF	; 255
 616:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 618:	28 17       	cp	r18, r24
 61a:	39 07       	cpc	r19, r25
 61c:	b4 f3       	brlt	.-20     	; 0x60a <mTimer+0x34>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
 61e:	08 95       	ret

Disassembly of section .text.display_pwm:

0000057e <display_pwm>:
void change_pwm_speed(unsigned int speed){
	OCR0A = speed;
}

void display_pwm(){
	LCDWriteStringXY(0, 1, "PWM: ");
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCDGotoXY>
 586:	6d e6       	ldi	r22, 0x6D	; 109
 588:	71 e0       	ldi	r23, 0x01	; 1
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	0e 94 42 03 	call	0x684	; 0x684 <LCDWriteString>
	LCDWriteIntXY(5, 1, (OCR0A + 1)*100/256, 3);
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	85 e0       	ldi	r24, 0x05	; 5
 594:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCDGotoXY>
 598:	87 b5       	in	r24, 0x27	; 39
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	44 e6       	ldi	r20, 0x64	; 100
 5a0:	48 9f       	mul	r20, r24
 5a2:	90 01       	movw	r18, r0
 5a4:	49 9f       	mul	r20, r25
 5a6:	30 0d       	add	r19, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	33 23       	and	r19, r19
 5ac:	14 f4       	brge	.+4      	; 0x5b2 <display_pwm+0x34>
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	3f 4f       	sbci	r19, 0xFF	; 255
 5b2:	63 e0       	ldi	r22, 0x03	; 3
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	83 2f       	mov	r24, r19
 5b8:	93 2f       	mov	r25, r19
 5ba:	99 0f       	add	r25, r25
 5bc:	99 0b       	sbc	r25, r25
 5be:	0e 94 36 01 	call	0x26c	; 0x26c <LCDWriteInt>
	LCDWriteStringXY(9, 1, "%");
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	89 e0       	ldi	r24, 0x09	; 9
 5c6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LCDGotoXY>
 5ca:	63 e7       	ldi	r22, 0x73	; 115
 5cc:	71 e0       	ldi	r23, 0x01	; 1
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 42 03 	call	0x684	; 0x684 <LCDWriteString>
 5d4:	08 95       	ret

Disassembly of section .text.init_pwm:

00000710 <init_pwm>:
#include "lcd.h"

/****** PWM ******/
void init_pwm(){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
 710:	84 b5       	in	r24, 0x24	; 36
 712:	83 60       	ori	r24, 0x03	; 3
 714:	84 bd       	out	0x24, r24	; 36
	
	/* Step 2: Enable output compare interrupt for Timer 0 */
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
 716:	ee e6       	ldi	r30, 0x6E	; 110
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	82 60       	ori	r24, 0x02	; 2
 71e:	80 83       	st	Z, r24
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
 720:	84 b5       	in	r24, 0x24	; 36
 722:	80 68       	ori	r24, 0x80	; 128
 724:	84 bd       	out	0x24, r24	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
 726:	85 b5       	in	r24, 0x25	; 37
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	85 bd       	out	0x25, r24	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = 127;							// 50% -----> 256 * 50% - 1 = 127
 72c:	8f e7       	ldi	r24, 0x7F	; 127
 72e:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
 730:	84 b1       	in	r24, 0x04	; 4
 732:	80 68       	ori	r24, 0x80	; 128
 734:	84 b9       	out	0x04, r24	; 4
	
	display_pwm();
 736:	0e 94 bf 02 	call	0x57e	; 0x57e <display_pwm>
 73a:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000073c <__divmodhi4>:
 73c:	97 fb       	bst	r25, 7
 73e:	07 2e       	mov	r0, r23
 740:	16 f4       	brtc	.+4      	; 0x746 <__divmodhi4+0xa>
 742:	00 94       	com	r0
 744:	07 d0       	rcall	.+14     	; 0x754 <__divmodhi4_neg1>
 746:	77 fd       	sbrc	r23, 7
 748:	09 d0       	rcall	.+18     	; 0x75c <__divmodhi4_neg2>
 74a:	0e 94 b2 03 	call	0x764	; 0x764 <__udivmodhi4>
 74e:	07 fc       	sbrc	r0, 7
 750:	05 d0       	rcall	.+10     	; 0x75c <__divmodhi4_neg2>
 752:	3e f4       	brtc	.+14     	; 0x762 <__divmodhi4_exit>

00000754 <__divmodhi4_neg1>:
 754:	90 95       	com	r25
 756:	81 95       	neg	r24
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__divmodhi4_neg2>:
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255

00000762 <__divmodhi4_exit>:
 762:	08 95       	ret

Disassembly of section .text.libgcc:

000007e4 <__xload_1>:
 7e4:	57 fd       	sbrc	r21, 7
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <__xload_1+0xa>
 7e8:	5b bf       	out	0x3b, r21	; 59
 7ea:	67 91       	elpm	r22, Z+
 7ec:	08 95       	ret
 7ee:	60 81       	ld	r22, Z
 7f0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000764 <__udivmodhi4>:
 764:	aa 1b       	sub	r26, r26
 766:	bb 1b       	sub	r27, r27
 768:	51 e1       	ldi	r21, 0x11	; 17
 76a:	07 c0       	rjmp	.+14     	; 0x77a <__udivmodhi4_ep>

0000076c <__udivmodhi4_loop>:
 76c:	aa 1f       	adc	r26, r26
 76e:	bb 1f       	adc	r27, r27
 770:	a6 17       	cp	r26, r22
 772:	b7 07       	cpc	r27, r23
 774:	10 f0       	brcs	.+4      	; 0x77a <__udivmodhi4_ep>
 776:	a6 1b       	sub	r26, r22
 778:	b7 0b       	sbc	r27, r23

0000077a <__udivmodhi4_ep>:
 77a:	88 1f       	adc	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	5a 95       	dec	r21
 780:	a9 f7       	brne	.-22     	; 0x76c <__udivmodhi4_loop>
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	bc 01       	movw	r22, r24
 788:	cd 01       	movw	r24, r26
 78a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000007fc <_fini>:
 7fc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007fe <__funcs_on_exit>:
 7fe:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000800 <__simulator_exit>:
 800:	08 95       	ret

Disassembly of section .text.exit:

0000078c <exit>:
 78c:	ec 01       	movw	r28, r24
 78e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__funcs_on_exit>
 792:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_fini>
 796:	ce 01       	movw	r24, r28
 798:	0e 94 00 04 	call	0x800	; 0x800 <__simulator_exit>
 79c:	ce 01       	movw	r24, r28
 79e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Exit>

Disassembly of section .text._Exit:

000007f6 <_Exit>:
 7f6:	0e 94 a1 00 	call	0x142	; 0x142 <_exit>
