
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000013c1  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  000013c1  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e16  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b6  00000000  00000000  0000546e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013ec  00000000  00000000  00006724  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  00007b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109d  00000000  00000000  0000852a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000095c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000121c  0000121c  00001370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000097a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000001c  00001124  00001124  00001278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000c  000011e6  000011e6  0000133a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.disable_adc 0000000c  000011f2  000011f2  00001346  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.enable_adc 0000000c  000011fe  000011fe  00001352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.disable_dc_motor 00000010  000011ba  000011ba  0000130e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.run_dc_motor 0000000a  0000120a  0000120a  0000135e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.brake_dc_motor 00000008  00001214  00001214  00001368  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_dc_motor 0000001c  00001140  00001140  00001294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCDBusyLoop 0000007e  00000bb2  00000bb2  00000d06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCDByte 00000070  00000d1a  00000d1a  00000e6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.InitLCD 00000088  00000a1e  00000a1e  00000b72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDWriteString 00000030  00000f9c  00000f9c  000010f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCDWriteInt 000000c4  00000736  00000736  0000088a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCDGotoXY 00000012  000011a8  000011a8  000012fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.setup   0000000e  000011ca  000011ca  0000131e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.initLink 0000001e  000010e8  000010e8  0000123c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.enqueue 0000003c  00000ef2  00000ef2  00001046  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.dequeue 00000030  00000fcc  00000fcc  00001120  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.size    0000001a  00001178  00001178  000012cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.categorize 000000b8  000008bc  000008bc  00000a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 0000000e  00000172  00000172  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.main    000003fc  00000180  00000180  000002d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_default 00000002  00001224  00001224  00001378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_29 00000088  00000aa6  00000aa6  00000bfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_1 0000005e  00000df8  00000df8  00000f4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_2 00000028  00001026  00001026  0000117a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_5 00000084  00000b2e  00000b2e  00000c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_6 00000072  00000ca8  00000ca8  00000dfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_32 0000001e  00001106  00001106  0000125a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .data.rotations 00000010  00800214  0000122c  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 45 .bss.queue_black_counter 00000001  0080025f  0080025f  000013c1  2**0
                  ALLOC
 46 .bss.queue_white_counter 00000001  00800260  00800260  000013c1  2**0
                  ALLOC
 47 .bss.queue_steel_counter 00000001  00800261  00800261  000013c1  2**0
                  ALLOC
 48 .bss.queue_aluminum_counter 00000001  00800262  00800262  000013c1  2**0
                  ALLOC
 49 .bss.black_counter 00000001  00800263  00800263  000013c1  2**0
                  ALLOC
 50 .bss.white_counter 00000001  00800264  00800264  000013c1  2**0
                  ALLOC
 51 .bss.steel_counter 00000001  00800265  00800265  000013c1  2**0
                  ALLOC
 52 .bss.aluminum_counter 00000001  00800266  00800266  000013c1  2**0
                  ALLOC
 53 .bss.BUCKET_counter 00000001  00800267  00800267  000013c1  2**0
                  ALLOC
 54 .bss.item_counter 00000001  00800268  00800268  000013c1  2**0
                  ALLOC
 55 .bss.ADC_counter 00000002  0080024f  0080024f  000013c1  2**0
                  ALLOC
 56 .bss.INT5_counter 00000001  00800269  00800269  000013c1  2**0
                  ALLOC
 57 .bss.INT4_counter 00000001  0080026a  0080026a  000013c1  2**0
                  ALLOC
 58 .bss.INT1_counter 00000001  0080026b  0080026b  000013c1  2**0
                  ALLOC
 59 .bss.INT0_counter 00000001  0080026c  0080026c  000013c1  2**0
                  ALLOC
 60 .bss.pause_flag 00000001  0080026d  0080026d  000013c1  2**0
                  ALLOC
 61 .bss.ramp_down_flag 00000001  0080026e  0080026e  000013c1  2**0
                  ALLOC
 62 .bss.in_OR_flag 00000001  0080026f  0080026f  000013c1  2**0
                  ALLOC
 63 .bss.STATE    00000001  00800270  00800270  000013c1  2**0
                  ALLOC
 64 .data.ADC_curr_min 00000002  00800251  00001267  000013bb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 65 .text.init_pwm 00000026  0000109e  0000109e  000011f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.init_sensors 00000024  000010c4  000010c4  00001218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.init_stepper_motor 0000005c  00000e56  00000e56  00000faa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.StepperMotor_CW 000000aa  00000974  00000974  00000ac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.StepperMotor_CCW 000000c2  000007fa  000007fa  0000094e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.StepperMotor_Rotate 0000001c  0000115c  0000115c  000012b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .data.ind     00000010  00800224  0000123c  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 72 .data.decel_speed 00000009  00800242  0000125a  000013ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 73 .data.accel_speed 0000000e  00800234  0000124c  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 74 .data.steps   00000004  0080024b  00001263  000013b7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 75 .text.mTimer  00000040  00000eb2  00000eb2  00001006  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.intTimer 0000002a  00000ffc  00000ffc  00001150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.libgcc.div 00000028  0000104e  0000104e  000011a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.libgcc  0000000e  000011d8  000011d8  0000132c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.libgcc.div 00000028  00001076  00001076  000011ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__dummy_fini 00000002  00001226  00001226  0000137a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__dummy_funcs_on_exit 00000002  00001228  00001228  0000137c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.__dummy_simulator_exit 00000002  0000122a  0000122a  0000137e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.exit    00000016  00001192  00001192  000012e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__simple_search_fl 000000e0  0000057c  0000057c  000006d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__simple_free 00000078  00000c30  00000c30  00000d84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .bss.__freelist 00000002  00800253  00800253  000013c1  2**0
                  ALLOC
 87 .text.__simple_malloc 000000da  0000065c  0000065c  000007b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .bss.end.1483 00000002  00800255  00800255  000013c1  2**0
                  ALLOC
 89 .bss.cur.1482 00000002  00800257  00800257  000013c1  2**0
                  ALLOC
 90 .text._Exit   00000004  00001220  00001220  00001374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__expand_heap 0000006e  00000d8a  00000d8a  00000ede  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .bss.__brkval 00000002  00800259  00800259  000013c1  2**0
                  ALLOC
 93 .data.__malloc_heap_end 00000002  0080025b  00001269  000013bd  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 94 .data.__malloc_heap_start 00000002  0080025d  0000126b  000013bf  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 95 .text.libgcc.prologue 00000038  00000f2e  00000f2e  00001082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.libgcc.prologue 00000036  00000f66  00000f66  000010ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
   4:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_1>
   8:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_2>
   c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  10:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  14:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_5>
  18:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_6>
  1c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  20:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  24:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  28:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  2c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  30:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  34:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  38:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  3c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  40:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  44:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  48:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  4c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  50:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  54:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  58:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  5c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  60:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  64:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  68:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  6c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  70:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  74:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_29>
  78:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  7c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  80:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_32>
  84:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  88:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  8c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  90:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  94:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  98:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  9c:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  a0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  a4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  a8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  ac:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  b0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  b4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  b8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  bc:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  c0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  c4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  c8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  cc:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  d0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  d4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  d8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  dc:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>
  e0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 14       	cp	r0, r2
  e8:	80 02       	muls	r24, r16
  ea:	14 02       	muls	r17, r20
  ec:	4f 00       	.word	0x004f	; ????
  ee:	12 2c       	mov	r1, r2
  f0:	02 4f       	sbci	r16, 0xF2	; 242
  f2:	02 51       	subi	r16, 0x12	; 18
  f4:	80 02       	muls	r24, r16
  f6:	51 02       	muls	r21, r17
  f8:	53 00       	.word	0x0053	; ????
  fa:	12 67       	ori	r17, 0x72	; 114
  fc:	02 53       	subi	r16, 0x32	; 50
  fe:	02 5b       	subi	r16, 0xB2	; 178
 100:	80 02       	muls	r24, r16
 102:	5b 02       	muls	r21, r27
 104:	5f 00       	.word	0x005f	; ????
 106:	12 69       	ori	r17, 0x92	; 146
 108:	02 5f       	subi	r16, 0xF2	; 242
 10a:	02 71       	andi	r16, 0x12	; 18
 10c:	80 00       	.word	0x0080	; ????

0000010e <__trampolines_start>:
 10e:	0c 94 34 03 	jmp	0x668	; 0x668 <__simple_malloc+0xc>
 112:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__simple_free>

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d1 e2       	ldi	r29, 0x21	; 33
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
 126:	e4 ee       	ldi	r30, 0xE4	; 228
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	19 c0       	rjmp	.+50     	; 0x160 <__do_clear_bss+0x8>
 12e:	b7 91       	elpm	r27, Z+
 130:	a7 91       	elpm	r26, Z+
 132:	37 91       	elpm	r19, Z+
 134:	27 91       	elpm	r18, Z+
 136:	07 91       	elpm	r16, Z+
 138:	07 fd       	sbrc	r16, 7
 13a:	0e c0       	rjmp	.+28     	; 0x158 <__do_clear_bss>
 13c:	97 91       	elpm	r25, Z+
 13e:	87 91       	elpm	r24, Z+
 140:	ef 01       	movw	r28, r30
 142:	f9 2f       	mov	r31, r25
 144:	e8 2f       	mov	r30, r24
 146:	0b bf       	out	0x3b, r16	; 59
 148:	07 90       	elpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x22>
 152:	fe 01       	movw	r30, r28
 154:	1b be       	out	0x3b, r1	; 59
 156:	04 c0       	rjmp	.+8      	; 0x160 <__do_clear_bss+0x8>

00000158 <__do_clear_bss>:
 158:	1d 92       	st	X+, r1
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e1 f7       	brne	.-8      	; 0x158 <__do_clear_bss>
 160:	ed 30       	cpi	r30, 0x0D	; 13
 162:	f4 07       	cpc	r31, r20
 164:	21 f7       	brne	.-56     	; 0x12e <__do_copy_data+0x8>
 166:	0e 94 c0 00 	call	0x180	; 0x180 <main>
 16a:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <exit>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

Disassembly of section .text:

0000121c <__bad_interrupt>:
    121c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__vector_default>

Disassembly of section .text.init_adc:

00001124 <init_adc>:
void stop_conversion(){
	ADCSRA &= ~(_BV(ADSC));				// clear ADSC
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
    1124:	ea e7       	ldi	r30, 0x7A	; 122
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 68       	ori	r24, 0x80	; 128
    112c:	80 83       	st	Z, r24
    112e:	80 81       	ld	r24, Z
    1130:	88 60       	ori	r24, 0x08	; 8
    1132:	80 83       	st	Z, r24
    1134:	ec e7       	ldi	r30, 0x7C	; 124
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 66       	ori	r24, 0x60	; 96
    113c:	80 83       	st	Z, r24
    113e:	08 95       	ret

Disassembly of section .text.start_conversion:

000011e6 <start_conversion>:
    11e6:	ea e7       	ldi	r30, 0x7A	; 122
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 64       	ori	r24, 0x40	; 64
    11ee:	80 83       	st	Z, r24
    11f0:	08 95       	ret

Disassembly of section .text.disable_adc:

000011f2 <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
    11f2:	ea e7       	ldi	r30, 0x7A	; 122
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 77       	andi	r24, 0x7F	; 127
    11fa:	80 83       	st	Z, r24
    11fc:	08 95       	ret

Disassembly of section .text.enable_adc:

000011fe <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
    11fe:	ea e7       	ldi	r30, 0x7A	; 122
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 68       	ori	r24, 0x80	; 128
    1206:	80 83       	st	Z, r24
    1208:	08 95       	ret

Disassembly of section .text.disable_dc_motor:

000011ba <disable_dc_motor>:
	brake_dc_motor();
}

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
    11ba:	85 b1       	in	r24, 0x05	; 5
    11bc:	80 7f       	andi	r24, 0xF0	; 240
    11be:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
    11c8:	08 95       	ret

Disassembly of section .text.run_dc_motor:

0000120a <run_dc_motor>:
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
    120a:	85 b1       	in	r24, 0x05	; 5
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	8b 60       	ori	r24, 0x0B	; 11
    1210:	85 b9       	out	0x05, r24	; 5
    1212:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

00001214 <brake_dc_motor>:
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
    1214:	85 b1       	in	r24, 0x05	; 5
    1216:	8f 60       	ori	r24, 0x0F	; 15
    1218:	85 b9       	out	0x05, r24	; 5
    121a:	08 95       	ret

Disassembly of section .text.init_dc_motor:

00001140 <init_dc_motor>:


/* Initialize DC motor */
void init_dc_motor(){
	// Enable switch button interrupt
	EIMSK |= (_BV(INT4) | _BV(INT5));
    1140:	8d b3       	in	r24, 0x1d	; 29
    1142:	80 63       	ori	r24, 0x30	; 48
    1144:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC41)| _BV(ISC51));		// falling edge trigger
    1146:	ea e6       	ldi	r30, 0x6A	; 106
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8a 60       	ori	r24, 0x0A	; 10
    114e:	80 83       	st	Z, r24

	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
    1150:	84 b1       	in	r24, 0x04	; 4
    1152:	8f 60       	ori	r24, 0x0F	; 15
    1154:	84 b9       	out	0x04, r24	; 4
	brake_dc_motor();
    1156:	0e 94 0a 09 	call	0x1214	; 0x1214 <brake_dc_motor>
    115a:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

00000bb2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 bb2:	87 b1       	in	r24, 0x07	; 7
 bb4:	80 7f       	andi	r24, 0xF0	; 240
 bb6:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 bb8:	88 b1       	in	r24, 0x08	; 8
 bba:	80 62       	ori	r24, 0x20	; 32
 bbc:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 bbe:	88 b1       	in	r24, 0x08	; 8
 bc0:	8f 7b       	andi	r24, 0xBF	; 191
 bc2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bc4:	82 e0       	ldi	r24, 0x02	; 2
 bc6:	8a 95       	dec	r24
 bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCDBusyLoop+0x14>
 bca:	00 c0       	rjmp	.+0      	; 0xbcc <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 bcc:	88 b1       	in	r24, 0x08	; 8
 bce:	80 68       	ori	r24, 0x80	; 128
 bd0:	88 b9       	out	0x08, r24	; 8
 bd2:	92 e0       	ldi	r25, 0x02	; 2
 bd4:	9a 95       	dec	r25
 bd6:	f1 f7       	brne	.-4      	; 0xbd4 <LCDBusyLoop+0x22>
 bd8:	00 c0       	rjmp	.+0      	; 0xbda <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 bda:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 bdc:	82 95       	swap	r24
 bde:	80 7f       	andi	r24, 0xF0	; 240
 be0:	92 e0       	ldi	r25, 0x02	; 2
 be2:	9a 95       	dec	r25
 be4:	f1 f7       	brne	.-4      	; 0xbe2 <LCDBusyLoop+0x30>
 be6:	00 c0       	rjmp	.+0      	; 0xbe8 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 be8:	98 b1       	in	r25, 0x08	; 8
 bea:	9f 77       	andi	r25, 0x7F	; 127
 bec:	98 b9       	out	0x08, r25	; 8
 bee:	95 e0       	ldi	r25, 0x05	; 5
 bf0:	9a 95       	dec	r25
 bf2:	f1 f7       	brne	.-4      	; 0xbf0 <LCDBusyLoop+0x3e>
 bf4:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 bf6:	98 b1       	in	r25, 0x08	; 8
 bf8:	90 68       	ori	r25, 0x80	; 128
 bfa:	98 b9       	out	0x08, r25	; 8
 bfc:	92 e0       	ldi	r25, 0x02	; 2
 bfe:	9a 95       	dec	r25
 c00:	f1 f7       	brne	.-4      	; 0xbfe <LCDBusyLoop+0x4c>
 c02:	00 c0       	rjmp	.+0      	; 0xc04 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 c04:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 c06:	80 78       	andi	r24, 0x80	; 128
 c08:	92 e0       	ldi	r25, 0x02	; 2
 c0a:	9a 95       	dec	r25
 c0c:	f1 f7       	brne	.-4      	; 0xc0a <LCDBusyLoop+0x58>
 c0e:	00 c0       	rjmp	.+0      	; 0xc10 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 c10:	98 b1       	in	r25, 0x08	; 8
 c12:	9f 77       	andi	r25, 0x7F	; 127
 c14:	98 b9       	out	0x08, r25	; 8
 c16:	95 e0       	ldi	r25, 0x05	; 5
 c18:	9a 95       	dec	r25
 c1a:	f1 f7       	brne	.-4      	; 0xc18 <LCDBusyLoop+0x66>
 c1c:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 c1e:	81 11       	cpse	r24, r1
 c20:	d5 cf       	rjmp	.-86     	; 0xbcc <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 c22:	88 b1       	in	r24, 0x08	; 8
 c24:	8f 7d       	andi	r24, 0xDF	; 223
 c26:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 c28:	87 b1       	in	r24, 0x07	; 7
 c2a:	8f 60       	ori	r24, 0x0F	; 15
 c2c:	87 b9       	out	0x07, r24	; 7
 c2e:	08 95       	ret

Disassembly of section .text.LCDByte:

00000d1a <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 d1a:	28 2f       	mov	r18, r24
 d1c:	22 95       	swap	r18
 d1e:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 d20:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 d22:	61 11       	cpse	r22, r1
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <LCDByte+0x14>
	CLEAR_RS();
 d26:	98 b1       	in	r25, 0x08	; 8
 d28:	9f 7b       	andi	r25, 0xBF	; 191
 d2a:	98 b9       	out	0x08, r25	; 8
 d2c:	03 c0       	rjmp	.+6      	; 0xd34 <LCDByte+0x1a>
else
	SET_RS();
 d2e:	98 b1       	in	r25, 0x08	; 8
 d30:	90 64       	ori	r25, 0x40	; 64
 d32:	98 b9       	out	0x08, r25	; 8
 d34:	92 e0       	ldi	r25, 0x02	; 2
 d36:	9a 95       	dec	r25
 d38:	f1 f7       	brne	.-4      	; 0xd36 <LCDByte+0x1c>
 d3a:	00 c0       	rjmp	.+0      	; 0xd3c <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 d3c:	98 b1       	in	r25, 0x08	; 8
 d3e:	90 68       	ori	r25, 0x80	; 128
 d40:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 d42:	98 b1       	in	r25, 0x08	; 8
 d44:	90 7f       	andi	r25, 0xF0	; 240
 d46:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 d48:	98 b9       	out	0x08, r25	; 8
 d4a:	95 e0       	ldi	r25, 0x05	; 5
 d4c:	9a 95       	dec	r25
 d4e:	f1 f7       	brne	.-4      	; 0xd4c <LCDByte+0x32>
 d50:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 d52:	98 b1       	in	r25, 0x08	; 8
 d54:	9f 77       	andi	r25, 0x7F	; 127
 d56:	98 b9       	out	0x08, r25	; 8
 d58:	95 e0       	ldi	r25, 0x05	; 5
 d5a:	9a 95       	dec	r25
 d5c:	f1 f7       	brne	.-4      	; 0xd5a <LCDByte+0x40>
 d5e:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 d60:	98 b1       	in	r25, 0x08	; 8
 d62:	90 68       	ori	r25, 0x80	; 128
 d64:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 d66:	98 b1       	in	r25, 0x08	; 8
 d68:	90 7f       	andi	r25, 0xF0	; 240
 d6a:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 d6c:	88 b9       	out	0x08, r24	; 8
 d6e:	85 e0       	ldi	r24, 0x05	; 5
 d70:	8a 95       	dec	r24
 d72:	f1 f7       	brne	.-4      	; 0xd70 <LCDByte+0x56>
 d74:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 d76:	88 b1       	in	r24, 0x08	; 8
 d78:	8f 77       	andi	r24, 0x7F	; 127
 d7a:	88 b9       	out	0x08, r24	; 8
 d7c:	95 e0       	ldi	r25, 0x05	; 5
 d7e:	9a 95       	dec	r25
 d80:	f1 f7       	brne	.-4      	; 0xd7e <LCDByte+0x64>
 d82:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 d84:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <LCDBusyLoop>
 d88:	08 95       	ret

Disassembly of section .text.InitLCD:

00000a1e <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 a1e:	cf 93       	push	r28
 a20:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a22:	2f ef       	ldi	r18, 0xFF	; 255
 a24:	86 e7       	ldi	r24, 0x76	; 118
 a26:	91 e0       	ldi	r25, 0x01	; 1
 a28:	21 50       	subi	r18, 0x01	; 1
 a2a:	80 40       	sbci	r24, 0x00	; 0
 a2c:	90 40       	sbci	r25, 0x00	; 0
 a2e:	e1 f7       	brne	.-8      	; 0xa28 <InitLCD+0xa>
 a30:	00 c0       	rjmp	.+0      	; 0xa32 <InitLCD+0x14>
 a32:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 a34:	87 b1       	in	r24, 0x07	; 7
 a36:	8f 60       	ori	r24, 0x0F	; 15
 a38:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 a3a:	87 b1       	in	r24, 0x07	; 7
 a3c:	80 68       	ori	r24, 0x80	; 128
 a3e:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 a40:	87 b1       	in	r24, 0x07	; 7
 a42:	80 64       	ori	r24, 0x40	; 64
 a44:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 a46:	87 b1       	in	r24, 0x07	; 7
 a48:	80 62       	ori	r24, 0x20	; 32
 a4a:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 a4c:	88 b1       	in	r24, 0x08	; 8
 a4e:	80 7f       	andi	r24, 0xF0	; 240
 a50:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 a52:	88 b1       	in	r24, 0x08	; 8
 a54:	8f 77       	andi	r24, 0x7F	; 127
 a56:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 a58:	88 b1       	in	r24, 0x08	; 8
 a5a:	8f 7d       	andi	r24, 0xDF	; 223
 a5c:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 a5e:	88 b1       	in	r24, 0x08	; 8
 a60:	8f 7b       	andi	r24, 0xBF	; 191
 a62:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <InitLCD+0x48>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <InitLCD+0x4a>
 a68:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 a6a:	88 b1       	in	r24, 0x08	; 8
 a6c:	80 68       	ori	r24, 0x80	; 128
 a6e:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 a70:	88 b1       	in	r24, 0x08	; 8
 a72:	82 60       	ori	r24, 0x02	; 2
 a74:	88 b9       	out	0x08, r24	; 8
 a76:	25 e0       	ldi	r18, 0x05	; 5
 a78:	2a 95       	dec	r18
 a7a:	f1 f7       	brne	.-4      	; 0xa78 <InitLCD+0x5a>
 a7c:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 a7e:	88 b1       	in	r24, 0x08	; 8
 a80:	8f 77       	andi	r24, 0x7F	; 127
 a82:	88 b9       	out	0x08, r24	; 8
 a84:	85 e0       	ldi	r24, 0x05	; 5
 a86:	8a 95       	dec	r24
 a88:	f1 f7       	brne	.-4      	; 0xa86 <InitLCD+0x68>
 a8a:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 a8c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	8c 2f       	mov	r24, r28
 a94:	8c 60       	ori	r24, 0x0C	; 12
 a96:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	88 e2       	ldi	r24, 0x28	; 40
 a9e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
}
 aa2:	cf 91       	pop	r28
 aa4:	08 95       	ret

Disassembly of section .text.LCDWriteString:

00000f9c <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 f9c:	cf 92       	push	r12
 f9e:	df 92       	push	r13
 fa0:	ef 92       	push	r14
 fa2:	6b 01       	movw	r12, r22
 fa4:	e8 2e       	mov	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <LCDWriteString+0x1a>
 {
	LCDData(*msg);
 fa8:	61 e0       	ldi	r22, 0x01	; 1
 faa:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
	msg++;
 fae:	8f ef       	ldi	r24, 0xFF	; 255
 fb0:	c8 1a       	sub	r12, r24
 fb2:	d8 0a       	sbc	r13, r24
 fb4:	e8 0a       	sbc	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 fb6:	f6 01       	movw	r30, r12
 fb8:	5e 2d       	mov	r21, r14
 fba:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__xload_1>
 fbe:	86 2f       	mov	r24, r22
 fc0:	61 11       	cpse	r22, r1
 fc2:	f2 cf       	rjmp	.-28     	; 0xfa8 <LCDWriteString+0xc>
 {
	LCDData(*msg);
	msg++;
 }
}
 fc4:	ef 90       	pop	r14
 fc6:	df 90       	pop	r13
 fc8:	cf 90       	pop	r12
 fca:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

00000736 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 736:	ef 92       	push	r14
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	00 d0       	rcall	.+0      	; 0x744 <LCDWriteInt+0xe>
 744:	0f 92       	push	r0
 746:	0f 92       	push	r0
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 74e:	fe 01       	movw	r30, r28
 750:	31 96       	adiw	r30, 0x01	; 1
 752:	25 e0       	ldi	r18, 0x05	; 5
 754:	df 01       	movw	r26, r30
 756:	1d 92       	st	X+, r1
 758:	2a 95       	dec	r18
 75a:	e9 f7       	brne	.-6      	; 0x756 <LCDWriteInt+0x20>
	int i=4,j=0;
 75c:	24 e0       	ldi	r18, 0x04	; 4
 75e:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 760:	0f c0       	rjmp	.+30     	; 0x780 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 762:	6a e0       	ldi	r22, 0x0A	; 10
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	0e 94 27 08 	call	0x104e	; 0x104e <__divmodhi4>
 76a:	e1 e0       	ldi	r30, 0x01	; 1
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	ec 0f       	add	r30, r28
 770:	fd 1f       	adc	r31, r29
 772:	e2 0f       	add	r30, r18
 774:	f3 1f       	adc	r31, r19
 776:	80 83       	st	Z, r24
	val=val/10;
 778:	86 2f       	mov	r24, r22
 77a:	97 2f       	mov	r25, r23
	i--;
 77c:	21 50       	subi	r18, 0x01	; 1
 77e:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	79 f7       	brne	.-34     	; 0x762 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 784:	bf ef       	ldi	r27, 0xFF	; 255
 786:	eb 16       	cp	r14, r27
 788:	fb 06       	cpc	r15, r27
 78a:	81 f4       	brne	.+32     	; 0x7ac <LCDWriteInt+0x76>
 78c:	03 c0       	rjmp	.+6      	; 0x794 <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 78e:	0f 5f       	subi	r16, 0xFF	; 255
 790:	1f 4f       	sbci	r17, 0xFF	; 255
 792:	02 c0       	rjmp	.+4      	; 0x798 <LCDWriteInt+0x62>
 794:	00 e0       	ldi	r16, 0x00	; 0
 796:	10 e0       	ldi	r17, 0x00	; 0
 798:	e1 e0       	ldi	r30, 0x01	; 1
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	ec 0f       	add	r30, r28
 79e:	fd 1f       	adc	r31, r29
 7a0:	e0 0f       	add	r30, r16
 7a2:	f1 1f       	adc	r31, r17
 7a4:	20 81       	ld	r18, Z
 7a6:	22 23       	and	r18, r18
 7a8:	91 f3       	breq	.-28     	; 0x78e <LCDWriteInt+0x58>
 7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 7ac:	05 e0       	ldi	r16, 0x05	; 5
 7ae:	10 e0       	ldi	r17, 0x00	; 0
 7b0:	0e 19       	sub	r16, r14
 7b2:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 7b4:	99 23       	and	r25, r25
 7b6:	94 f4       	brge	.+36     	; 0x7dc <LCDWriteInt+0xa6>
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	8d e2       	ldi	r24, 0x2D	; 45
 7bc:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
 7c0:	0d c0       	rjmp	.+26     	; 0x7dc <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 7c2:	e1 e0       	ldi	r30, 0x01	; 1
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	ec 0f       	add	r30, r28
 7c8:	fd 1f       	adc	r31, r29
 7ca:	e0 0f       	add	r30, r16
 7cc:	f1 1f       	adc	r31, r17
 7ce:	80 81       	ld	r24, Z
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	80 5d       	subi	r24, 0xD0	; 208
 7d4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 7d8:	0f 5f       	subi	r16, 0xFF	; 255
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	05 30       	cpi	r16, 0x05	; 5
 7de:	11 05       	cpc	r17, r1
 7e0:	84 f3       	brlt	.-32     	; 0x7c2 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

000011a8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
    11a8:	88 32       	cpi	r24, 0x28	; 40
    11aa:	30 f4       	brcc	.+12     	; 0x11b8 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
    11ac:	61 11       	cpse	r22, r1
    11ae:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
    11b8:	08 95       	ret

Disassembly of section .text.setup:

000011ca <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
    11ca:	fc 01       	movw	r30, r24
    11cc:	11 82       	std	Z+1, r1	; 0x01
    11ce:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
    11d0:	fb 01       	movw	r30, r22
    11d2:	11 82       	std	Z+1, r1	; 0x01
    11d4:	10 82       	st	Z, r1
    11d6:	08 95       	ret

Disassembly of section .text.initLink:

000010e8 <initLink>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 2e 03 	call	0x65c	; 0x65c <__simple_malloc>
    10f6:	99 83       	std	Y+1, r25	; 0x01
    10f8:	88 83       	st	Y, r24
    10fa:	fc 01       	movw	r30, r24
    10fc:	12 82       	std	Z+2, r1	; 0x02
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

Disassembly of section .text.enqueue:

00000ef2 <enqueue>:
 ef2:	db 01       	movw	r26, r22
 ef4:	ed 91       	ld	r30, X+
 ef6:	fc 91       	ld	r31, X
 ef8:	30 97       	sbiw	r30, 0x00	; 0
 efa:	61 f0       	breq	.+24     	; 0xf14 <enqueue+0x22>
 efc:	da 01       	movw	r26, r20
 efe:	8d 91       	ld	r24, X+
 f00:	9c 91       	ld	r25, X
 f02:	11 97       	sbiw	r26, 0x01	; 1
 f04:	92 83       	std	Z+2, r25	; 0x02
 f06:	81 83       	std	Z+1, r24	; 0x01
 f08:	8d 91       	ld	r24, X+
 f0a:	9c 91       	ld	r25, X
 f0c:	fb 01       	movw	r30, r22
 f0e:	91 83       	std	Z+1, r25	; 0x01
 f10:	80 83       	st	Z, r24
 f12:	08 95       	ret
 f14:	da 01       	movw	r26, r20
 f16:	2d 91       	ld	r18, X+
 f18:	3c 91       	ld	r19, X
 f1a:	11 97       	sbiw	r26, 0x01	; 1
 f1c:	fc 01       	movw	r30, r24
 f1e:	31 83       	std	Z+1, r19	; 0x01
 f20:	20 83       	st	Z, r18
 f22:	8d 91       	ld	r24, X+
 f24:	9c 91       	ld	r25, X
 f26:	db 01       	movw	r26, r22
 f28:	8d 93       	st	X+, r24
 f2a:	9c 93       	st	X, r25
 f2c:	08 95       	ret

Disassembly of section .text.dequeue:

00000fcc <dequeue>:
 fcc:	fc 01       	movw	r30, r24
 fce:	80 81       	ld	r24, Z
 fd0:	91 81       	ldd	r25, Z+1	; 0x01
 fd2:	da 01       	movw	r26, r20
 fd4:	8d 93       	st	X+, r24
 fd6:	9c 93       	st	X, r25
 fd8:	a0 81       	ld	r26, Z
 fda:	b1 81       	ldd	r27, Z+1	; 0x01
 fdc:	10 97       	sbiw	r26, 0x00	; 0
 fde:	31 f0       	breq	.+12     	; 0xfec <dequeue+0x20>
 fe0:	11 96       	adiw	r26, 0x01	; 1
 fe2:	8d 91       	ld	r24, X+
 fe4:	9c 91       	ld	r25, X
 fe6:	12 97       	sbiw	r26, 0x02	; 2
 fe8:	91 83       	std	Z+1, r25	; 0x01
 fea:	80 83       	st	Z, r24
 fec:	80 81       	ld	r24, Z
 fee:	91 81       	ldd	r25, Z+1	; 0x01
 ff0:	89 2b       	or	r24, r25
 ff2:	19 f4       	brne	.+6      	; 0xffa <dequeue+0x2e>
 ff4:	fb 01       	movw	r30, r22
 ff6:	11 82       	std	Z+1, r1	; 0x01
 ff8:	10 82       	st	Z, r1
 ffa:	08 95       	ret

Disassembly of section .text.size:

00001178 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
    1178:	dc 01       	movw	r26, r24
    117a:	ed 91       	ld	r30, X+
    117c:	fc 91       	ld	r31, X
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
    1182:	04 c0       	rjmp	.+8      	; 0x118c <size+0x14>
		numElements++;
    1184:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
    1186:	01 80       	ldd	r0, Z+1	; 0x01
    1188:	f2 81       	ldd	r31, Z+2	; 0x02
    118a:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	d1 f7       	brne	.-12     	; 0x1184 <size+0xc>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
    1190:	08 95       	ret

Disassembly of section .text.categorize:

000008bc <categorize>:
	in_OR_flag = 0;
	LCDWriteIntXY(0,0,ADC_min_min,4);
	LCDWriteIntXY(5,0,ADC_max_min,4);
	LCDWriteIntXY(10,0,ADC_curr_min,4);
	LCDWriteIntXY(10,1,INT0_counter,2);
	ADC_curr_min = 1023;
 8bc:	8c e0       	ldi	r24, 0x0C	; 12
 8be:	92 e0       	ldi	r25, 0x02	; 2
 8c0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <initLink>
 8c4:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 8c8:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 8cc:	82 38       	cpi	r24, 0x82	; 130
 8ce:	93 40       	sbci	r25, 0x03	; 3
 8d0:	58 f0       	brcs	.+22     	; 0x8e8 <categorize+0x2c>
 8d2:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 8d6:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 8da:	10 82       	st	Z, r1
 8dc:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <queue_black_counter>
 8e0:	8f 5f       	subi	r24, 0xFF	; 255
 8e2:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <queue_black_counter>
 8e6:	31 c0       	rjmp	.+98     	; 0x94a <categorize+0x8e>
 8e8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 8ec:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 8f0:	8c 3b       	cpi	r24, 0xBC	; 188
 8f2:	92 40       	sbci	r25, 0x02	; 2
 8f4:	60 f0       	brcs	.+24     	; 0x90e <categorize+0x52>
 8f6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 8fa:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 8fe:	82 e0       	ldi	r24, 0x02	; 2
 900:	80 83       	st	Z, r24
 902:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <queue_white_counter>
 906:	8f 5f       	subi	r24, 0xFF	; 255
 908:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <queue_white_counter>
 90c:	1e c0       	rjmp	.+60     	; 0x94a <categorize+0x8e>
 90e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 912:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 916:	84 36       	cpi	r24, 0x64	; 100
 918:	91 05       	cpc	r25, r1
 91a:	60 f0       	brcs	.+24     	; 0x934 <categorize+0x78>
 91c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 920:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	80 83       	st	Z, r24
 928:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <queue_steel_counter>
 92c:	8f 5f       	subi	r24, 0xFF	; 255
 92e:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <queue_steel_counter>
 932:	0b c0       	rjmp	.+22     	; 0x94a <categorize+0x8e>
 934:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 938:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 93c:	83 e0       	ldi	r24, 0x03	; 3
 93e:	80 83       	st	Z, r24
 940:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <queue_aluminum_counter>
 944:	8f 5f       	subi	r24, 0xFF	; 255
 946:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <queue_aluminum_counter>
 94a:	4c e0       	ldi	r20, 0x0C	; 12
 94c:	52 e0       	ldi	r21, 0x02	; 2
 94e:	66 e0       	ldi	r22, 0x06	; 6
 950:	72 e0       	ldi	r23, 0x02	; 2
 952:	88 e0       	ldi	r24, 0x08	; 8
 954:	92 e0       	ldi	r25, 0x02	; 2
 956:	0e 94 79 07 	call	0xef2	; 0xef2 <enqueue>
 95a:	8f ef       	ldi	r24, 0xFF	; 255
 95c:	93 e0       	ldi	r25, 0x03	; 3
 95e:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <ADC_curr_min+0x1>
 962:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ADC_curr_min>
 966:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <ADC_counter+0x1>
 96a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <ADC_counter>
 96e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <in_OR_flag>
 972:	08 95       	ret

Disassembly of section .text.main:

00000180 <main>:
 180:	e1 e6       	ldi	r30, 0x61	; 97
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	80 83       	st	Z, r24
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
 18c:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <STATE>
 190:	f8 94       	cli
 192:	80 ef       	ldi	r24, 0xF0	; 240
 194:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <InitLCD>
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 8d 06 	call	0xd1a	; 0xd1a <LCDByte>
 1a6:	0e 94 62 08 	call	0x10c4	; 0x10c4 <init_sensors>
 1aa:	0e 94 92 08 	call	0x1124	; 0x1124 <init_adc>
 1ae:	8d e7       	ldi	r24, 0x7D	; 125
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 4f 08 	call	0x109e	; 0x109e <init_pwm>
 1b6:	0e 94 a0 08 	call	0x1140	; 0x1140 <init_dc_motor>
 1ba:	0e 94 2b 07 	call	0xe56	; 0xe56 <init_stepper_motor>
 1be:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <current_plate>
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	72 e0       	ldi	r23, 0x02	; 2
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	0e 94 e5 08 	call	0x11ca	; 0x11ca <setup>
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 1d6:	62 e7       	ldi	r22, 0x72	; 114
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCDWriteString>
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 1e8:	64 e7       	ldi	r22, 0x74	; 116
 1ea:	71 e0       	ldi	r23, 0x01	; 1
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCDWriteString>
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 1fa:	66 e7       	ldi	r22, 0x76	; 118
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCDWriteString>
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	89 e0       	ldi	r24, 0x09	; 9
 208:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 20c:	68 e7       	ldi	r22, 0x78	; 120
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCDWriteString>
 216:	78 94       	sei
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 21e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <pause_flag>
 222:	81 11       	cpse	r24, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <main+0xaa>
 226:	0e 94 05 09 	call	0x120a	; 0x120a <run_dc_motor>
 22a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <in_OR_flag>
 22e:	88 23       	and	r24, r24
 230:	29 f0       	breq	.+10     	; 0x23c <main+0xbc>
 232:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <start_conversion>
 236:	1c 9b       	sbis	0x03, 4	; 3
 238:	0e 94 5e 04 	call	0x8bc	; 0x8bc <categorize>
 23c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <item_counter>
 240:	80 33       	cpi	r24, 0x30	; 48
 242:	39 f4       	brne	.+14     	; 0x252 <main+0xd2>
 244:	88 ec       	ldi	r24, 0xC8	; 200
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 24c:	85 e0       	ldi	r24, 0x05	; 5
 24e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <STATE>
 252:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <ramp_down_flag>
 256:	88 23       	and	r24, r24
 258:	59 f0       	breq	.+22     	; 0x270 <main+0xf0>
 25a:	66 e0       	ldi	r22, 0x06	; 6
 25c:	72 e0       	ldi	r23, 0x02	; 2
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	0e 94 bc 08 	call	0x1178	; 0x1178 <size>
 266:	89 2b       	or	r24, r25
 268:	19 f4       	brne	.+6      	; 0x270 <main+0xf0>
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <STATE>
 270:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <STATE>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	09 f4       	brne	.+2      	; 0x27a <main+0xfa>
 278:	d3 c0       	rjmp	.+422    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 27a:	18 f4       	brcc	.+6      	; 0x282 <main+0x102>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	41 f0       	breq	.+16     	; 0x290 <main+0x110>
 280:	cb cf       	rjmp	.-106    	; 0x218 <main+0x98>
 282:	84 30       	cpi	r24, 0x04	; 4
 284:	09 f4       	brne	.+2      	; 0x288 <main+0x108>
 286:	27 c1       	rjmp	.+590    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 288:	85 30       	cpi	r24, 0x05	; 5
 28a:	09 f4       	brne	.+2      	; 0x28e <main+0x10e>
 28c:	6f c1       	rjmp	.+734    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 28e:	c4 cf       	rjmp	.-120    	; 0x218 <main+0x98>
 290:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <STATE>
 294:	80 e4       	ldi	r24, 0x40	; 64
 296:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 29a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <BUCKET_counter>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <BUCKET_counter>
 2a4:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <in_OR_flag>
 2a8:	88 23       	and	r24, r24
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <main+0x136>
 2ac:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <start_conversion>
 2b0:	1c 9b       	sbis	0x03, 4	; 3
 2b2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <categorize>
 2b6:	0e 94 0a 09 	call	0x1214	; 0x1214 <brake_dc_motor>
 2ba:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <head>
 2be:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <head+0x1>
 2c2:	80 81       	ld	r24, Z
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	f1 f0       	breq	.+60     	; 0x304 <main+0x184>
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <main+0x14c>
 2ca:	4a c0       	rjmp	.+148    	; 0x360 <main+0x1e0>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	89 f1       	breq	.+98     	; 0x332 <main+0x1b2>
 2d0:	83 30       	cpi	r24, 0x03	; 3
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x156>
 2d4:	5a c0       	rjmp	.+180    	; 0x38a <main+0x20a>
 2d6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	e8 9f       	mul	r30, r24
 2de:	f0 01       	movw	r30, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	ec 5e       	subi	r30, 0xEC	; 236
 2e4:	fd 4f       	sbci	r31, 0xFD	; 253
 2e6:	83 81       	ldd	r24, Z+3	; 0x03
 2e8:	08 2e       	mov	r0, r24
 2ea:	00 0c       	add	r0, r0
 2ec:	99 0b       	sbc	r25, r25
 2ee:	0e 94 ae 08 	call	0x115c	; 0x115c <StepperMotor_Rotate>
 2f2:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <aluminum_counter>
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <aluminum_counter>
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
 302:	43 c0       	rjmp	.+134    	; 0x38a <main+0x20a>
 304:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 308:	84 e0       	ldi	r24, 0x04	; 4
 30a:	e8 9f       	mul	r30, r24
 30c:	f0 01       	movw	r30, r0
 30e:	11 24       	eor	r1, r1
 310:	ec 5e       	subi	r30, 0xEC	; 236
 312:	fd 4f       	sbci	r31, 0xFD	; 253
 314:	81 81       	ldd	r24, Z+1	; 0x01
 316:	08 2e       	mov	r0, r24
 318:	00 0c       	add	r0, r0
 31a:	99 0b       	sbc	r25, r25
 31c:	0e 94 ae 08 	call	0x115c	; 0x115c <StepperMotor_Rotate>
 320:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <steel_counter>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <steel_counter>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
 330:	2c c0       	rjmp	.+88     	; 0x38a <main+0x20a>
 332:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	e8 9f       	mul	r30, r24
 33a:	f0 01       	movw	r30, r0
 33c:	11 24       	eor	r1, r1
 33e:	ec 5e       	subi	r30, 0xEC	; 236
 340:	fd 4f       	sbci	r31, 0xFD	; 253
 342:	82 81       	ldd	r24, Z+2	; 0x02
 344:	08 2e       	mov	r0, r24
 346:	00 0c       	add	r0, r0
 348:	99 0b       	sbc	r25, r25
 34a:	0e 94 ae 08 	call	0x115c	; 0x115c <StepperMotor_Rotate>
 34e:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <white_counter>
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <white_counter>
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
 35e:	15 c0       	rjmp	.+42     	; 0x38a <main+0x20a>
 360:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	e8 9f       	mul	r30, r24
 368:	f0 01       	movw	r30, r0
 36a:	11 24       	eor	r1, r1
 36c:	ec 5e       	subi	r30, 0xEC	; 236
 36e:	fd 4f       	sbci	r31, 0xFD	; 253
 370:	80 81       	ld	r24, Z
 372:	08 2e       	mov	r0, r24
 374:	00 0c       	add	r0, r0
 376:	99 0b       	sbc	r25, r25
 378:	0e 94 ae 08 	call	0x115c	; 0x115c <StepperMotor_Rotate>
 37c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <black_counter>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <black_counter>
 386:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <current_plate>
 38a:	0e 94 05 09 	call	0x120a	; 0x120a <run_dc_motor>
 38e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <in_OR_flag>
 392:	88 23       	and	r24, r24
 394:	29 f0       	breq	.+10     	; 0x3a0 <main+0x220>
 396:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <start_conversion>
 39a:	1c 9b       	sbis	0x03, 4	; 3
 39c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <categorize>
 3a0:	43 e0       	ldi	r20, 0x03	; 3
 3a2:	52 e0       	ldi	r21, 0x02	; 2
 3a4:	66 e0       	ldi	r22, 0x06	; 6
 3a6:	72 e0       	ldi	r23, 0x02	; 2
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	0e 94 e6 07 	call	0xfcc	; 0xfcc <dequeue>
 3b0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rtnLink>
 3b4:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rtnLink+0x1>
 3b8:	0e 94 18 06 	call	0xc30	; 0xc30 <__simple_free>
 3bc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <item_counter>
 3c0:	8f 5f       	subi	r24, 0xFF	; 255
 3c2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <item_counter>
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 3ce:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <aluminum_counter>
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 3e4:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <steel_counter>
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	86 e0       	ldi	r24, 0x06	; 6
 3f6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 3fa:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <white_counter>
 3fe:	62 e0       	ldi	r22, 0x02	; 2
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	89 e0       	ldi	r24, 0x09	; 9
 40c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 410:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <black_counter>
 414:	62 e0       	ldi	r22, 0x02	; 2
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 41e:	fc ce       	rjmp	.-520    	; 0x218 <main+0x98>
 420:	80 eb       	ldi	r24, 0xB0	; 176
 422:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 426:	88 ec       	ldi	r24, 0xC8	; 200
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 42e:	0e 94 0a 09 	call	0x1214	; 0x1214 <brake_dc_motor>
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 43a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <aluminum_counter>
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 450:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <steel_counter>
 454:	62 e0       	ldi	r22, 0x02	; 2
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	86 e0       	ldi	r24, 0x06	; 6
 462:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 466:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <white_counter>
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	89 e0       	ldi	r24, 0x09	; 9
 478:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 47c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <black_counter>
 480:	62 e0       	ldi	r22, 0x02	; 2
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	8a e0       	ldi	r24, 0x0A	; 10
 48e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 492:	6a e7       	ldi	r22, 0x7A	; 122
 494:	71 e0       	ldi	r23, 0x01	; 1
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCDWriteString>
 49c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <aluminum_counter>
 4a0:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <steel_counter>
 4a4:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <white_counter>
 4a8:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <black_counter>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	93 e0       	ldi	r25, 0x03	; 3
 4b0:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <ADC_curr_min+0x1>
 4b4:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ADC_curr_min>
 4b8:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <ADC_counter+0x1>
 4bc:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <ADC_counter>
 4c0:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <INT0_counter>
 4c4:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <INT1_counter>
 4c8:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <INT4_counter>
 4cc:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <INT5_counter>
 4d0:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ramp_down_flag>
 4d4:	4b c0       	rjmp	.+150    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 4d6:	80 ec       	ldi	r24, 0xC0	; 192
 4d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 4dc:	0e 94 0a 09 	call	0x1214	; 0x1214 <brake_dc_motor>
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 4e8:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <aluminum_counter>
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 4fe:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <steel_counter>
 502:	62 e0       	ldi	r22, 0x02	; 2
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 514:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <white_counter>
 518:	62 e0       	ldi	r22, 0x02	; 2
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	89 e0       	ldi	r24, 0x09	; 9
 526:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 52a:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <black_counter>
 52e:	62 e0       	ldi	r22, 0x02	; 2
 530:	70 e0       	ldi	r23, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	8e e0       	ldi	r24, 0x0E	; 14
 53c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 540:	6d e7       	ldi	r22, 0x7D	; 125
 542:	71 e0       	ldi	r23, 0x01	; 1
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCDWriteString>
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	8e e0       	ldi	r24, 0x0E	; 14
 54e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LCDGotoXY>
 552:	66 e0       	ldi	r22, 0x06	; 6
 554:	72 e0       	ldi	r23, 0x02	; 2
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	92 e0       	ldi	r25, 0x02	; 2
 55a:	0e 94 bc 08 	call	0x1178	; 0x1178 <size>
 55e:	62 e0       	ldi	r22, 0x02	; 2
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	0e 94 9b 03 	call	0x736	; 0x736 <LCDWriteInt>
 566:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <STATE>
 56a:	56 ce       	rjmp	.-852    	; 0x218 <main+0x98>
 56c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <disable_adc>
 570:	0e 94 dd 08 	call	0x11ba	; 0x11ba <disable_dc_motor>
 574:	f8 94       	cli
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret

Disassembly of section .text.__vector_default:

00001224 <__vector_default>:
}

/* Interrupt Service Routine*/
EMPTY_INTERRUPT(BADISR_vect);
    1224:	18 95       	reti

Disassembly of section .text.__vector_29:

00000aa6 <__vector_29>:
	in_OR_flag = 0;
	LCDWriteIntXY(0,0,ADC_min_min,4);
	LCDWriteIntXY(5,0,ADC_max_min,4);
	LCDWriteIntXY(10,0,ADC_curr_min,4);
	LCDWriteIntXY(10,1,INT0_counter,2);
	ADC_curr_min = 1023;
 aa6:	1f 92       	push	r1
 aa8:	0f 92       	push	r0
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	0f 92       	push	r0
 aae:	11 24       	eor	r1, r1
 ab0:	2f 93       	push	r18
 ab2:	3f 93       	push	r19
 ab4:	8f 93       	push	r24
 ab6:	9f 93       	push	r25
 ab8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 abc:	22 95       	swap	r18
 abe:	26 95       	lsr	r18
 ac0:	26 95       	lsr	r18
 ac2:	23 70       	andi	r18, 0x03	; 3
 ac4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	88 0f       	add	r24, r24
 acc:	99 1f       	adc	r25, r25
 ace:	88 0f       	add	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	82 0f       	add	r24, r18
 ad4:	91 1d       	adc	r25, r1
 ad6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ADC_result+0x1>
 ada:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ADC_result>
 ade:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <ADC_result>
 ae2:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <ADC_result+0x1>
 ae6:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 aea:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 aee:	28 17       	cp	r18, r24
 af0:	39 07       	cpc	r19, r25
 af2:	40 f4       	brcc	.+16     	; 0xb04 <__vector_29+0x5e>
 af4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <ADC_result>
 af8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <ADC_result+0x1>
 afc:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <ADC_curr_min+0x1>
 b00:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ADC_curr_min>
 b04:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <ADC_counter>
 b08:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <ADC_counter+0x1>
 b0c:	01 96       	adiw	r24, 0x01	; 1
 b0e:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <ADC_counter+0x1>
 b12:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <ADC_counter>
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <in_OR_flag>
 b1c:	9f 91       	pop	r25
 b1e:	8f 91       	pop	r24
 b20:	3f 91       	pop	r19
 b22:	2f 91       	pop	r18
 b24:	0f 90       	pop	r0
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	0f 90       	pop	r0
 b2a:	1f 90       	pop	r1
 b2c:	18 95       	reti

Disassembly of section .text.__vector_1:

00000df8 <__vector_1>:
 df8:	1f 92       	push	r1
 dfa:	0f 92       	push	r0
 dfc:	0f b6       	in	r0, 0x3f	; 63
 dfe:	0f 92       	push	r0
 e00:	11 24       	eor	r1, r1
 e02:	0b b6       	in	r0, 0x3b	; 59
 e04:	0f 92       	push	r0
 e06:	2f 93       	push	r18
 e08:	3f 93       	push	r19
 e0a:	4f 93       	push	r20
 e0c:	5f 93       	push	r21
 e0e:	6f 93       	push	r22
 e10:	7f 93       	push	r23
 e12:	8f 93       	push	r24
 e14:	9f 93       	push	r25
 e16:	af 93       	push	r26
 e18:	bf 93       	push	r27
 e1a:	ef 93       	push	r30
 e1c:	ff 93       	push	r31
 e1e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <enable_adc>
 e22:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <start_conversion>
 e26:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <INT0_counter>
 e2a:	8f 5f       	subi	r24, 0xFF	; 255
 e2c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <INT0_counter>
 e30:	ff 91       	pop	r31
 e32:	ef 91       	pop	r30
 e34:	bf 91       	pop	r27
 e36:	af 91       	pop	r26
 e38:	9f 91       	pop	r25
 e3a:	8f 91       	pop	r24
 e3c:	7f 91       	pop	r23
 e3e:	6f 91       	pop	r22
 e40:	5f 91       	pop	r21
 e42:	4f 91       	pop	r20
 e44:	3f 91       	pop	r19
 e46:	2f 91       	pop	r18
 e48:	0f 90       	pop	r0
 e4a:	0b be       	out	0x3b, r0	; 59
 e4c:	0f 90       	pop	r0
 e4e:	0f be       	out	0x3f, r0	; 63
 e50:	0f 90       	pop	r0
 e52:	1f 90       	pop	r1
 e54:	18 95       	reti

Disassembly of section .text.__vector_2:

00001026 <__vector_2>:
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
    1030:	8f 93       	push	r24
    1032:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <INT1_counter>
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <INT1_counter>
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <STATE>
    1042:	8f 91       	pop	r24
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

Disassembly of section .text.__vector_5:

00000b2e <__vector_5>:
 b2e:	1f 92       	push	r1
 b30:	0f 92       	push	r0
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	0f 92       	push	r0
 b36:	11 24       	eor	r1, r1
 b38:	0b b6       	in	r0, 0x3b	; 59
 b3a:	0f 92       	push	r0
 b3c:	2f 93       	push	r18
 b3e:	3f 93       	push	r19
 b40:	4f 93       	push	r20
 b42:	5f 93       	push	r21
 b44:	6f 93       	push	r22
 b46:	7f 93       	push	r23
 b48:	8f 93       	push	r24
 b4a:	9f 93       	push	r25
 b4c:	af 93       	push	r26
 b4e:	bf 93       	push	r27
 b50:	ef 93       	push	r30
 b52:	ff 93       	push	r31
 b54:	84 e1       	ldi	r24, 0x14	; 20
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 b5c:	64 99       	sbic	0x0c, 4	; 12
 b5e:	16 c0       	rjmp	.+44     	; 0xb8c <__vector_5+0x5e>
 b60:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <INT4_counter>
 b64:	8f 5f       	subi	r24, 0xFF	; 255
 b66:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <INT4_counter>
 b6a:	80 ff       	sbrs	r24, 0
 b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__vector_5+0x48>
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <pause_flag>
 b74:	02 c0       	rjmp	.+4      	; 0xb7a <__vector_5+0x4c>
 b76:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <pause_flag>
 b7a:	84 e0       	ldi	r24, 0x04	; 4
 b7c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <STATE>
 b80:	64 9b       	sbis	0x0c, 4	; 12
 b82:	fe cf       	rjmp	.-4      	; 0xb80 <__vector_5+0x52>
 b84:	84 e1       	ldi	r24, 0x14	; 20
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 b8c:	ff 91       	pop	r31
 b8e:	ef 91       	pop	r30
 b90:	bf 91       	pop	r27
 b92:	af 91       	pop	r26
 b94:	9f 91       	pop	r25
 b96:	8f 91       	pop	r24
 b98:	7f 91       	pop	r23
 b9a:	6f 91       	pop	r22
 b9c:	5f 91       	pop	r21
 b9e:	4f 91       	pop	r20
 ba0:	3f 91       	pop	r19
 ba2:	2f 91       	pop	r18
 ba4:	0f 90       	pop	r0
 ba6:	0b be       	out	0x3b, r0	; 59
 ba8:	0f 90       	pop	r0
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	0f 90       	pop	r0
 bae:	1f 90       	pop	r1
 bb0:	18 95       	reti

Disassembly of section .text.__vector_6:

00000ca8 <__vector_6>:
 ca8:	1f 92       	push	r1
 caa:	0f 92       	push	r0
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	0f 92       	push	r0
 cb0:	11 24       	eor	r1, r1
 cb2:	0b b6       	in	r0, 0x3b	; 59
 cb4:	0f 92       	push	r0
 cb6:	2f 93       	push	r18
 cb8:	3f 93       	push	r19
 cba:	4f 93       	push	r20
 cbc:	5f 93       	push	r21
 cbe:	6f 93       	push	r22
 cc0:	7f 93       	push	r23
 cc2:	8f 93       	push	r24
 cc4:	9f 93       	push	r25
 cc6:	af 93       	push	r26
 cc8:	bf 93       	push	r27
 cca:	ef 93       	push	r30
 ccc:	ff 93       	push	r31
 cce:	84 e1       	ldi	r24, 0x14	; 20
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 cd6:	65 99       	sbic	0x0c, 5	; 12
 cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <__vector_6+0x4c>
 cda:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <INT5_counter>
 cde:	8f 5f       	subi	r24, 0xFF	; 255
 ce0:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <INT5_counter>
 ce4:	65 9b       	sbis	0x0c, 5	; 12
 ce6:	fe cf       	rjmp	.-4      	; 0xce4 <__vector_6+0x3c>
 ce8:	84 e1       	ldi	r24, 0x14	; 20
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 cf0:	0e 94 fe 07 	call	0xffc	; 0xffc <intTimer>
 cf4:	ff 91       	pop	r31
 cf6:	ef 91       	pop	r30
 cf8:	bf 91       	pop	r27
 cfa:	af 91       	pop	r26
 cfc:	9f 91       	pop	r25
 cfe:	8f 91       	pop	r24
 d00:	7f 91       	pop	r23
 d02:	6f 91       	pop	r22
 d04:	5f 91       	pop	r21
 d06:	4f 91       	pop	r20
 d08:	3f 91       	pop	r19
 d0a:	2f 91       	pop	r18
 d0c:	0f 90       	pop	r0
 d0e:	0b be       	out	0x3b, r0	; 59
 d10:	0f 90       	pop	r0
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	0f 90       	pop	r0
 d16:	1f 90       	pop	r1
 d18:	18 95       	reti

Disassembly of section .text.__vector_32:

00001106 <__vector_32>:
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	8f 93       	push	r24
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <ramp_down_flag>
    1118:	8f 91       	pop	r24
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

Disassembly of section .text.init_pwm:

0000109e <init_pwm>:

/****** PWM ******/

void init_pwm(int num){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
    109e:	94 b5       	in	r25, 0x24	; 36
    10a0:	93 60       	ori	r25, 0x03	; 3
    10a2:	94 bd       	out	0x24, r25	; 36
	
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
    10a4:	ee e6       	ldi	r30, 0x6E	; 110
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	90 81       	ld	r25, Z
    10aa:	92 60       	ori	r25, 0x02	; 2
    10ac:	90 83       	st	Z, r25
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
    10ae:	94 b5       	in	r25, 0x24	; 36
    10b0:	90 68       	ori	r25, 0x80	; 128
    10b2:	94 bd       	out	0x24, r25	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
    10b4:	95 b5       	in	r25, 0x25	; 37
    10b6:	92 60       	ori	r25, 0x02	; 2
    10b8:	95 bd       	out	0x25, r25	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = num;
    10ba:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
    10bc:	84 b1       	in	r24, 0x04	; 4
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	84 b9       	out	0x04, r24	; 4
    10c2:	08 95       	ret

Disassembly of section .text.init_sensors:

000010c4 <init_sensors>:
#include "sensor.h"
#include "timer.h"

void init_sensors(){
  // OR
  EIMSK |= (_BV(INT0));
    10c4:	8d b3       	in	r24, 0x1d	; 29
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	8d bb       	out	0x1d, r24	; 29
  EICRA |= (_BV(ISC01) | _BV(ISC00)); // rising edge
    10ca:	e9 e6       	ldi	r30, 0x69	; 105
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	83 60       	ori	r24, 0x03	; 3
    10d2:	80 83       	st	Z, r24

  // EX
  EIMSK |= (_BV(INT1));		
    10d4:	8d b3       	in	r24, 0x1d	; 29
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC11));  // falling edge
    10da:	80 81       	ld	r24, Z
    10dc:	88 60       	ori	r24, 0x08	; 8
    10de:	80 83       	st	Z, r24

  // GPIO
  DDRB &= ~(_BV(DDB6) | _BV(DDB5) | _BV(DDB4));
    10e0:	84 b1       	in	r24, 0x04	; 4
    10e2:	8f 78       	andi	r24, 0x8F	; 143
    10e4:	84 b9       	out	0x04, r24	; 4
    10e6:	08 95       	ret

Disassembly of section .text.init_stepper_motor:

00000e56 <init_stepper_motor>:
																	  {2, 1, 0, 3},
																	  {3, 2, 1, 0}};


/* Initialize Stepper Motor to Black */
void init_stepper_motor(){
 e56:	cf 93       	push	r28
 e58:	df 93       	push	r29
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
 e5a:	81 b1       	in	r24, 0x01	; 1
 e5c:	8f 63       	ori	r24, 0x3F	; 63
 e5e:	81 b9       	out	0x01, r24	; 1
	PORTL = 0xF0;
 e60:	80 ef       	ldi	r24, 0xF0	; 240
 e62:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	int i = 0;
 e66:	c0 e0       	ldi	r28, 0x00	; 0
 e68:	d0 e0       	ldi	r29, 0x00	; 0

	while(HE){ // HE: active low
 e6a:	1a c0       	rjmp	.+52     	; 0xea0 <init_stepper_motor+0x4a>
		temp_step = i % 4;
 e6c:	ce 01       	movw	r24, r28
 e6e:	83 70       	andi	r24, 0x03	; 3
 e70:	90 78       	andi	r25, 0x80	; 128
 e72:	99 23       	and	r25, r25
 e74:	24 f4       	brge	.+8      	; 0xe7e <init_stepper_motor+0x28>
 e76:	01 97       	sbiw	r24, 0x01	; 1
 e78:	8c 6f       	ori	r24, 0xFC	; 252
 e7a:	9f 6f       	ori	r25, 0xFF	; 255
 e7c:	01 96       	adiw	r24, 0x01	; 1
 e7e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 e82:	82 b1       	in	r24, 0x02	; 2
 e84:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 e88:	f0 e0       	ldi	r31, 0x00	; 0
 e8a:	e5 5b       	subi	r30, 0xB5	; 181
 e8c:	fd 4f       	sbci	r31, 0xFD	; 253
 e8e:	90 81       	ld	r25, Z
 e90:	80 7c       	andi	r24, 0xC0	; 192
 e92:	89 2b       	or	r24, r25
 e94:	82 b9       	out	0x02, r24	; 2
		mTimer(18);
 e96:	82 e1       	ldi	r24, 0x12	; 18
 e98:	90 e0       	ldi	r25, 0x00	; 0
 e9a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
		i += 1;
 e9e:	21 96       	adiw	r28, 0x01	; 1
void init_stepper_motor(){
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
	PORTL = 0xF0;
	int i = 0;

	while(HE){ // HE: active low
 ea0:	1e 99       	sbic	0x03, 6	; 3
 ea2:	e4 cf       	rjmp	.-56     	; 0xe6c <init_stepper_motor+0x16>
		temp_step = i % 4;
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
		mTimer(18);
		i += 1;
	}
	current_step = temp_step;
 ea4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 ea8:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>
}
 eac:	df 91       	pop	r29
 eae:	cf 91       	pop	r28
 eb0:	08 95       	ret

Disassembly of section .text.StepperMotor_CW:

00000974 <StepperMotor_CW>:
		StepperMotor_CW(-num_steps);
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
 974:	ef 92       	push	r14
 976:	ff 92       	push	r15
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 982:	c0 e0       	ldi	r28, 0x00	; 0
 984:	d0 e0       	ldi	r29, 0x00	; 0
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
 986:	00 e0       	ldi	r16, 0x00	; 0
 988:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < num_steps; i++){
 98a:	3b c0       	rjmp	.+118    	; 0xa02 <StepperMotor_CW+0x8e>
		temp_step = (current_step + i + 1) % 4;
 98c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <current_step>
 990:	9e 01       	movw	r18, r28
 992:	28 0f       	add	r18, r24
 994:	31 1d       	adc	r19, r1
 996:	c9 01       	movw	r24, r18
 998:	01 96       	adiw	r24, 0x01	; 1
 99a:	83 70       	andi	r24, 0x03	; 3
 99c:	90 78       	andi	r25, 0x80	; 128
 99e:	99 23       	and	r25, r25
 9a0:	24 f4       	brge	.+8      	; 0x9aa <StepperMotor_CW+0x36>
 9a2:	01 97       	sbiw	r24, 0x01	; 1
 9a4:	8c 6f       	ori	r24, 0xFC	; 252
 9a6:	9f 6f       	ori	r25, 0xFF	; 255
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 9ae:	82 b1       	in	r24, 0x02	; 2
 9b0:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	e5 5b       	subi	r30, 0xB5	; 181
 9b8:	fd 4f       	sbci	r31, 0xFD	; 253
 9ba:	90 81       	ld	r25, Z
 9bc:	80 7c       	andi	r24, 0xC0	; 192
 9be:	89 2b       	or	r24, r25
 9c0:	82 b9       	out	0x02, r24	; 2

		// mTimer(18);

		/* Acceleration and Deceleration Profile */
		if((i) < ACCEL_TOTAL_STEPS){ 
 9c2:	ce 30       	cpi	r28, 0x0E	; 14
 9c4:	d1 05       	cpc	r29, r1
 9c6:	44 f4       	brge	.+16     	; 0x9d8 <StepperMotor_CW+0x64>
			mTimer(accel_speed[i]);
 9c8:	fe 01       	movw	r30, r28
 9ca:	ec 5c       	subi	r30, 0xCC	; 204
 9cc:	fd 4f       	sbci	r31, 0xFD	; 253
 9ce:	80 81       	ld	r24, Z
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 9d6:	14 c0       	rjmp	.+40     	; 0xa00 <StepperMotor_CW+0x8c>
		} else if ((i) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 9d8:	c7 01       	movw	r24, r14
 9da:	0a 97       	sbiw	r24, 0x0a	; 10
 9dc:	8c 17       	cp	r24, r28
 9de:	9d 07       	cpc	r25, r29
 9e0:	54 f4       	brge	.+20     	; 0x9f6 <StepperMotor_CW+0x82>
			mTimer(decel_speed[j]);
 9e2:	f8 01       	movw	r30, r16
 9e4:	ee 5b       	subi	r30, 0xBE	; 190
 9e6:	fd 4f       	sbci	r31, 0xFD	; 253
 9e8:	80 81       	ld	r24, Z
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
			j += 1;
 9f0:	0f 5f       	subi	r16, 0xFF	; 255
 9f2:	1f 4f       	sbci	r17, 0xFF	; 255
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <StepperMotor_CW+0x8c>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 9f6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <accel_speed+0xd>
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 a00:	21 96       	adiw	r28, 0x01	; 1
 a02:	ce 15       	cp	r28, r14
 a04:	df 05       	cpc	r29, r15
 a06:	14 f2       	brlt	.-124    	; 0x98c <StepperMotor_CW+0x18>
		}
		/* End of Accel/Deccel Profile */

	}
	
	current_step = temp_step;
 a08:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 a0c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>

}
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	1f 91       	pop	r17
 a16:	0f 91       	pop	r16
 a18:	ff 90       	pop	r15
 a1a:	ef 90       	pop	r14
 a1c:	08 95       	ret

Disassembly of section .text.StepperMotor_CCW:

000007fa <StepperMotor_CCW>:

void StepperMotor_CCW(int num_steps){
 7fa:	ef 92       	push	r14
 7fc:	ff 92       	push	r15
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 808:	40 e0       	ldi	r20, 0x00	; 0
 80a:	50 e0       	ldi	r21, 0x00	; 0
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
 80c:	00 e0       	ldi	r16, 0x00	; 0
 80e:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < num_steps; i++){
 810:	46 c0       	rjmp	.+140    	; 0x89e <StepperMotor_CCW+0xa4>
		temp_step = ind[current_step][(i+1)%4];
 812:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <current_step>
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	ea 01       	movw	r28, r20
 81a:	21 96       	adiw	r28, 0x01	; 1
 81c:	9e 01       	movw	r18, r28
 81e:	23 70       	andi	r18, 0x03	; 3
 820:	30 78       	andi	r19, 0x80	; 128
 822:	33 23       	and	r19, r19
 824:	34 f4       	brge	.+12     	; 0x832 <StepperMotor_CCW+0x38>
 826:	21 50       	subi	r18, 0x01	; 1
 828:	31 09       	sbc	r19, r1
 82a:	2c 6f       	ori	r18, 0xFC	; 252
 82c:	3f 6f       	ori	r19, 0xFF	; 255
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	8c 5d       	subi	r24, 0xDC	; 220
 83c:	9d 4f       	sbci	r25, 0xFD	; 253
 83e:	fc 01       	movw	r30, r24
 840:	e2 0f       	add	r30, r18
 842:	f3 1f       	adc	r31, r19
 844:	80 81       	ld	r24, Z
 846:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 84a:	82 b1       	in	r24, 0x02	; 2
 84c:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	e5 5b       	subi	r30, 0xB5	; 181
 854:	fd 4f       	sbci	r31, 0xFD	; 253
 856:	90 81       	ld	r25, Z
 858:	80 7c       	andi	r24, 0xC0	; 192
 85a:	89 2b       	or	r24, r25
 85c:	82 b9       	out	0x02, r24	; 2
		
		// mTimer(18);

		// /* Acceleration and Deceleration Profile */
		if((i) < ACCEL_TOTAL_STEPS){ 
 85e:	4e 30       	cpi	r20, 0x0E	; 14
 860:	51 05       	cpc	r21, r1
 862:	44 f4       	brge	.+16     	; 0x874 <StepperMotor_CCW+0x7a>
			mTimer(accel_speed[i]);
 864:	fa 01       	movw	r30, r20
 866:	ec 5c       	subi	r30, 0xCC	; 204
 868:	fd 4f       	sbci	r31, 0xFD	; 253
 86a:	80 81       	ld	r24, Z
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
 872:	14 c0       	rjmp	.+40     	; 0x89c <StepperMotor_CCW+0xa2>
		} else if ((i) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 874:	c7 01       	movw	r24, r14
 876:	0a 97       	sbiw	r24, 0x0a	; 10
 878:	84 17       	cp	r24, r20
 87a:	95 07       	cpc	r25, r21
 87c:	54 f4       	brge	.+20     	; 0x892 <StepperMotor_CCW+0x98>
			mTimer(decel_speed[j]);
 87e:	f8 01       	movw	r30, r16
 880:	ee 5b       	subi	r30, 0xBE	; 190
 882:	fd 4f       	sbci	r31, 0xFD	; 253
 884:	80 81       	ld	r24, Z
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
			j += 1;
 88c:	0f 5f       	subi	r16, 0xFF	; 255
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	05 c0       	rjmp	.+10     	; 0x89c <StepperMotor_CCW+0xa2>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 892:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <accel_speed+0xd>
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mTimer>
	
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
 89c:	ae 01       	movw	r20, r28
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 89e:	4e 15       	cp	r20, r14
 8a0:	5f 05       	cpc	r21, r15
 8a2:	0c f4       	brge	.+2      	; 0x8a6 <StepperMotor_CCW+0xac>
 8a4:	b6 cf       	rjmp	.-148    	; 0x812 <StepperMotor_CCW+0x18>
		}
		/* End of Accel/Deccel Profile */			

	}

	current_step = temp_step;
 8a6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 8aa:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>

 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	1f 91       	pop	r17
 8b4:	0f 91       	pop	r16
 8b6:	ff 90       	pop	r15
 8b8:	ef 90       	pop	r14
 8ba:	08 95       	ret

Disassembly of section .text.StepperMotor_Rotate:

0000115c <StepperMotor_Rotate>:
	current_step = temp_step;
}


void StepperMotor_Rotate(int num_steps){
	if(num_steps > 0){
    115c:	18 16       	cp	r1, r24
    115e:	19 06       	cpc	r1, r25
    1160:	1c f4       	brge	.+6      	; 0x1168 <StepperMotor_Rotate+0xc>
		StepperMotor_CCW(num_steps);
    1162:	0e 94 fd 03 	call	0x7fa	; 0x7fa <StepperMotor_CCW>
    1166:	08 95       	ret
	} else if (num_steps < 0) {
    1168:	99 23       	and	r25, r25
    116a:	2c f4       	brge	.+10     	; 0x1176 <StepperMotor_Rotate+0x1a>
		StepperMotor_CW(-num_steps);
    116c:	91 95       	neg	r25
    116e:	81 95       	neg	r24
    1170:	91 09       	sbc	r25, r1
    1172:	0e 94 ba 04 	call	0x974	; 0x974 <StepperMotor_CW>
    1176:	08 95       	ret

Disassembly of section .text.mTimer:

00000eb2 <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 eb2:	e1 e8       	ldi	r30, 0x81	; 129
 eb4:	f0 e0       	ldi	r31, 0x00	; 0
 eb6:	20 81       	ld	r18, Z
 eb8:	2a 60       	ori	r18, 0x0A	; 10
 eba:	20 83       	st	Z, r18
	OCR1A = 0x03E8; // Set output compare register for 1000 ticks which equals to 1ms
 ebc:	28 ee       	ldi	r18, 0xE8	; 232
 ebe:	33 e0       	ldi	r19, 0x03	; 3
 ec0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 ec4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000;
 ec8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 ecc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 ed0:	26 b3       	in	r18, 0x16	; 22
 ed2:	22 60       	ori	r18, 0x02	; 2
 ed4:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 ed6:	20 e0       	ldi	r18, 0x00	; 0
 ed8:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000;
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 eda:	07 c0       	rjmp	.+14     	; 0xeea <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 edc:	b1 9b       	sbis	0x16, 1	; 22
 ede:	05 c0       	rjmp	.+10     	; 0xeea <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 ee0:	46 b3       	in	r20, 0x16	; 22
 ee2:	42 60       	ori	r20, 0x02	; 2
 ee4:	46 bb       	out	0x16, r20	; 22
			i++;
 ee6:	2f 5f       	subi	r18, 0xFF	; 255
 ee8:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000;
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 eea:	28 17       	cp	r18, r24
 eec:	39 07       	cpc	r19, r25
 eee:	b4 f3       	brlt	.-20     	; 0xedc <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
}
 ef0:	08 95       	ret

Disassembly of section .text.intTimer:

00000ffc <intTimer>:

void intTimer(){
	TCCR3B |= (_BV(CS32) | _BV(CS30) | _BV(WGM32));
     ffc:	e1 e9       	ldi	r30, 0x91	; 145
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8d 60       	ori	r24, 0x0D	; 13
    1004:	80 83       	st	Z, r24
	OCR3A = 0x4000;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e4       	ldi	r25, 0x40	; 64
    100a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    100e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000;
    1012:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    1016:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	TIMSK3 |= _BV(OCIE3A); // Setting bit 1 in the timer/counter 3 interrupt mask register
    101a:	e1 e7       	ldi	r30, 0x71	; 113
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	80 83       	st	Z, r24
    1024:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000104e <__divmodhi4>:
    104e:	97 fb       	bst	r25, 7
    1050:	07 2e       	mov	r0, r23
    1052:	16 f4       	brtc	.+4      	; 0x1058 <__divmodhi4+0xa>
    1054:	00 94       	com	r0
    1056:	07 d0       	rcall	.+14     	; 0x1066 <__divmodhi4_neg1>
    1058:	77 fd       	sbrc	r23, 7
    105a:	09 d0       	rcall	.+18     	; 0x106e <__divmodhi4_neg2>
    105c:	0e 94 3b 08 	call	0x1076	; 0x1076 <__udivmodhi4>
    1060:	07 fc       	sbrc	r0, 7
    1062:	05 d0       	rcall	.+10     	; 0x106e <__divmodhi4_neg2>
    1064:	3e f4       	brtc	.+14     	; 0x1074 <__divmodhi4_exit>

00001066 <__divmodhi4_neg1>:
    1066:	90 95       	com	r25
    1068:	81 95       	neg	r24
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	08 95       	ret

0000106e <__divmodhi4_neg2>:
    106e:	70 95       	com	r23
    1070:	61 95       	neg	r22
    1072:	7f 4f       	sbci	r23, 0xFF	; 255

00001074 <__divmodhi4_exit>:
    1074:	08 95       	ret

Disassembly of section .text.libgcc:

000011d8 <__xload_1>:
    11d8:	57 fd       	sbrc	r21, 7
    11da:	03 c0       	rjmp	.+6      	; 0x11e2 <__xload_1+0xa>
    11dc:	5b bf       	out	0x3b, r21	; 59
    11de:	67 91       	elpm	r22, Z+
    11e0:	08 95       	ret
    11e2:	60 81       	ld	r22, Z
    11e4:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001076 <__udivmodhi4>:
    1076:	aa 1b       	sub	r26, r26
    1078:	bb 1b       	sub	r27, r27
    107a:	51 e1       	ldi	r21, 0x11	; 17
    107c:	07 c0       	rjmp	.+14     	; 0x108c <__udivmodhi4_ep>

0000107e <__udivmodhi4_loop>:
    107e:	aa 1f       	adc	r26, r26
    1080:	bb 1f       	adc	r27, r27
    1082:	a6 17       	cp	r26, r22
    1084:	b7 07       	cpc	r27, r23
    1086:	10 f0       	brcs	.+4      	; 0x108c <__udivmodhi4_ep>
    1088:	a6 1b       	sub	r26, r22
    108a:	b7 0b       	sbc	r27, r23

0000108c <__udivmodhi4_ep>:
    108c:	88 1f       	adc	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	5a 95       	dec	r21
    1092:	a9 f7       	brne	.-22     	; 0x107e <__udivmodhi4_loop>
    1094:	80 95       	com	r24
    1096:	90 95       	com	r25
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001226 <_fini>:
    1226:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001228 <__funcs_on_exit>:
    1228:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000122a <__simulator_exit>:
    122a:	08 95       	ret

Disassembly of section .text.exit:

00001192 <exit>:
    1192:	ec 01       	movw	r28, r24
    1194:	0e 94 14 09 	call	0x1228	; 0x1228 <__funcs_on_exit>
    1198:	0e 94 13 09 	call	0x1226	; 0x1226 <_fini>
    119c:	ce 01       	movw	r24, r28
    119e:	0e 94 15 09 	call	0x122a	; 0x122a <__simulator_exit>
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 10 09 	call	0x1220	; 0x1220 <_Exit>

Disassembly of section .text.__simple_search_fl:

0000057c <__simple_search_fl>:
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <__freelist>
 58c:	70 91 54 02 	lds	r23, 0x0254	; 0x800254 <__freelist+0x1>
 590:	61 15       	cp	r22, r1
 592:	71 05       	cpc	r23, r1
 594:	09 f4       	brne	.+2      	; 0x598 <__simple_search_fl+0x1c>
 596:	5b c0       	rjmp	.+182    	; 0x64e <__simple_search_fl+0xd2>
 598:	fb 01       	movw	r30, r22
 59a:	a0 e0       	ldi	r26, 0x00	; 0
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	40 e0       	ldi	r20, 0x00	; 0
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	c0 e0       	ldi	r28, 0x00	; 0
 5a4:	d0 e0       	ldi	r29, 0x00	; 0
 5a6:	00 81       	ld	r16, Z
 5a8:	11 81       	ldd	r17, Z+1	; 0x01
 5aa:	22 81       	ldd	r18, Z+2	; 0x02
 5ac:	33 81       	ldd	r19, Z+3	; 0x03
 5ae:	08 17       	cp	r16, r24
 5b0:	19 07       	cpc	r17, r25
 5b2:	71 f4       	brne	.+28     	; 0x5d0 <__simple_search_fl+0x54>
 5b4:	10 97       	sbiw	r26, 0x00	; 0
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <__simple_search_fl+0x46>
 5b8:	13 96       	adiw	r26, 0x03	; 3
 5ba:	3c 93       	st	X, r19
 5bc:	2e 93       	st	-X, r18
 5be:	12 97       	sbiw	r26, 0x02	; 2
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <__simple_search_fl+0x4e>
 5c2:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <__freelist+0x1>
 5c6:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <__freelist>
 5ca:	cf 01       	movw	r24, r30
 5cc:	02 96       	adiw	r24, 0x02	; 2
 5ce:	41 c0       	rjmp	.+130    	; 0x652 <__simple_search_fl+0xd6>
 5d0:	80 17       	cp	r24, r16
 5d2:	91 07       	cpc	r25, r17
 5d4:	48 f4       	brcc	.+18     	; 0x5e8 <__simple_search_fl+0x6c>
 5d6:	20 97       	sbiw	r28, 0x00	; 0
 5d8:	29 f0       	breq	.+10     	; 0x5e4 <__simple_search_fl+0x68>
 5da:	e8 80       	ld	r14, Y
 5dc:	f9 80       	ldd	r15, Y+1	; 0x01
 5de:	0e 15       	cp	r16, r14
 5e0:	1f 05       	cpc	r17, r15
 5e2:	10 f4       	brcc	.+4      	; 0x5e8 <__simple_search_fl+0x6c>
 5e4:	ad 01       	movw	r20, r26
 5e6:	ef 01       	movw	r28, r30
 5e8:	df 01       	movw	r26, r30
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	11 f0       	breq	.+4      	; 0x5f4 <__simple_search_fl+0x78>
 5f0:	f9 01       	movw	r30, r18
 5f2:	d9 cf       	rjmp	.-78     	; 0x5a6 <__simple_search_fl+0x2a>
 5f4:	20 97       	sbiw	r28, 0x00	; 0
 5f6:	59 f1       	breq	.+86     	; 0x64e <__simple_search_fl+0xd2>
 5f8:	0a 81       	ldd	r16, Y+2	; 0x02
 5fa:	1b 81       	ldd	r17, Y+3	; 0x03
 5fc:	fe 01       	movw	r30, r28
 5fe:	21 91       	ld	r18, Z+
 600:	31 91       	ld	r19, Z+
 602:	28 1b       	sub	r18, r24
 604:	39 0b       	sbc	r19, r25
 606:	25 30       	cpi	r18, 0x05	; 5
 608:	31 05       	cpc	r19, r1
 60a:	88 f0       	brcs	.+34     	; 0x62e <__simple_search_fl+0xb2>
 60c:	99 83       	std	Y+1, r25	; 0x01
 60e:	88 83       	st	Y, r24
 610:	df 01       	movw	r26, r30
 612:	a8 0f       	add	r26, r24
 614:	b9 1f       	adc	r27, r25
 616:	22 50       	subi	r18, 0x02	; 2
 618:	31 09       	sbc	r19, r1
 61a:	11 96       	adiw	r26, 0x01	; 1
 61c:	3c 93       	st	X, r19
 61e:	2e 93       	st	-X, r18
 620:	12 96       	adiw	r26, 0x02	; 2
 622:	0c 93       	st	X, r16
 624:	12 97       	sbiw	r26, 0x02	; 2
 626:	13 96       	adiw	r26, 0x03	; 3
 628:	1c 93       	st	X, r17
 62a:	13 97       	sbiw	r26, 0x03	; 3
 62c:	8d 01       	movw	r16, r26
 62e:	c6 17       	cp	r28, r22
 630:	d7 07       	cpc	r29, r23
 632:	29 f4       	brne	.+10     	; 0x63e <__simple_search_fl+0xc2>
 634:	00 93 53 02 	sts	0x0253, r16	; 0x800253 <__freelist>
 638:	10 93 54 02 	sts	0x0254, r17	; 0x800254 <__freelist+0x1>
 63c:	06 c0       	rjmp	.+12     	; 0x64a <__simple_search_fl+0xce>
 63e:	da 01       	movw	r26, r20
 640:	12 96       	adiw	r26, 0x02	; 2
 642:	0c 93       	st	X, r16
 644:	12 97       	sbiw	r26, 0x02	; 2
 646:	13 96       	adiw	r26, 0x03	; 3
 648:	1c 93       	st	X, r17
 64a:	cf 01       	movw	r24, r30
 64c:	02 c0       	rjmp	.+4      	; 0x652 <__simple_search_fl+0xd6>
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	e6 e0       	ldi	r30, 0x06	; 6
 658:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00000c30 <__simple_free>:
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	c9 f1       	breq	.+114    	; 0xca6 <__simple_free+0x76>
 c34:	fc 01       	movw	r30, r24
 c36:	32 97       	sbiw	r30, 0x02	; 2
 c38:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <__freelist>
 c3c:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <__freelist+0x1>
 c40:	10 97       	sbiw	r26, 0x00	; 0
 c42:	59 f1       	breq	.+86     	; 0xc9a <__simple_free+0x6a>
 c44:	40 81       	ld	r20, Z
 c46:	51 81       	ldd	r21, Z+1	; 0x01
 c48:	9c 01       	movw	r18, r24
 c4a:	24 0f       	add	r18, r20
 c4c:	35 1f       	adc	r19, r21
 c4e:	a2 17       	cp	r26, r18
 c50:	b3 07       	cpc	r27, r19
 c52:	79 f4       	brne	.+30     	; 0xc72 <__simple_free+0x42>
 c54:	12 96       	adiw	r26, 0x02	; 2
 c56:	8d 91       	ld	r24, X+
 c58:	9c 91       	ld	r25, X
 c5a:	13 97       	sbiw	r26, 0x03	; 3
 c5c:	93 83       	std	Z+3, r25	; 0x03
 c5e:	82 83       	std	Z+2, r24	; 0x02
 c60:	2d 91       	ld	r18, X+
 c62:	3c 91       	ld	r19, X
 c64:	ca 01       	movw	r24, r20
 c66:	82 0f       	add	r24, r18
 c68:	93 1f       	adc	r25, r19
 c6a:	02 96       	adiw	r24, 0x02	; 2
 c6c:	91 83       	std	Z+1, r25	; 0x01
 c6e:	80 83       	st	Z, r24
 c70:	16 c0       	rjmp	.+44     	; 0xc9e <__simple_free+0x6e>
 c72:	8d 91       	ld	r24, X+
 c74:	9c 91       	ld	r25, X
 c76:	11 97       	sbiw	r26, 0x01	; 1
 c78:	9c 01       	movw	r18, r24
 c7a:	2e 5f       	subi	r18, 0xFE	; 254
 c7c:	3f 4f       	sbci	r19, 0xFF	; 255
 c7e:	2a 0f       	add	r18, r26
 c80:	3b 1f       	adc	r19, r27
 c82:	e2 17       	cp	r30, r18
 c84:	f3 07       	cpc	r31, r19
 c86:	31 f4       	brne	.+12     	; 0xc94 <__simple_free+0x64>
 c88:	84 0f       	add	r24, r20
 c8a:	95 1f       	adc	r25, r21
 c8c:	02 96       	adiw	r24, 0x02	; 2
 c8e:	8d 93       	st	X+, r24
 c90:	9c 93       	st	X, r25
 c92:	08 95       	ret
 c94:	b3 83       	std	Z+3, r27	; 0x03
 c96:	a2 83       	std	Z+2, r26	; 0x02
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <__simple_free+0x6e>
 c9a:	13 82       	std	Z+3, r1	; 0x03
 c9c:	12 82       	std	Z+2, r1	; 0x02
 c9e:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <__freelist+0x1>
 ca2:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <__freelist>
 ca6:	08 95       	ret

Disassembly of section .text.__simple_malloc:

0000065c <__simple_malloc>:
 65c:	a2 e0       	ldi	r26, 0x02	; 2
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	e4 e3       	ldi	r30, 0x34	; 52
 662:	f3 e0       	ldi	r31, 0x03	; 3
 664:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <__prologue_saves__+0x14>
 668:	8c 01       	movw	r16, r24
 66a:	88 e1       	ldi	r24, 0x18	; 24
 66c:	96 e0       	ldi	r25, 0x06	; 6
 66e:	01 15       	cp	r16, r1
 670:	11 05       	cpc	r17, r1
 672:	09 f4       	brne	.+2      	; 0x676 <__simple_malloc+0x1a>
 674:	55 c0       	rjmp	.+170    	; 0x720 <__simple_malloc+0xc4>
 676:	89 2b       	or	r24, r25
 678:	79 f0       	breq	.+30     	; 0x698 <__simple_malloc+0x3c>
 67a:	02 30       	cpi	r16, 0x02	; 2
 67c:	11 05       	cpc	r17, r1
 67e:	10 f4       	brcc	.+4      	; 0x684 <__simple_malloc+0x28>
 680:	02 e0       	ldi	r16, 0x02	; 2
 682:	10 e0       	ldi	r17, 0x00	; 0
 684:	c8 01       	movw	r24, r16
 686:	0e 94 be 02 	call	0x57c	; 0x57c <__simple_search_fl>
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	09 f0       	breq	.+2      	; 0x690 <__simple_malloc+0x34>
 68e:	4f c0       	rjmp	.+158    	; 0x72e <__simple_malloc+0xd2>
 690:	92 e0       	ldi	r25, 0x02	; 2
 692:	e9 2e       	mov	r14, r25
 694:	f1 2c       	mov	r15, r1
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <__simple_malloc+0x44>
 698:	88 e1       	ldi	r24, 0x18	; 24
 69a:	e8 2e       	mov	r14, r24
 69c:	86 e0       	ldi	r24, 0x06	; 6
 69e:	f8 2e       	mov	r15, r24
 6a0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <end.1483>
 6a4:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <end.1483+0x1>
 6a8:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <cur.1482>
 6ac:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <cur.1482+0x1>
 6b0:	82 1b       	sub	r24, r18
 6b2:	93 0b       	sbc	r25, r19
 6b4:	67 01       	movw	r12, r14
 6b6:	c0 0e       	add	r12, r16
 6b8:	d1 1e       	adc	r13, r17
 6ba:	80 17       	cp	r24, r16
 6bc:	91 07       	cpc	r25, r17
 6be:	f0 f4       	brcc	.+60     	; 0x6fc <__simple_malloc+0xa0>
 6c0:	da 82       	std	Y+2, r13	; 0x02
 6c2:	c9 82       	std	Y+1, r12	; 0x01
 6c4:	ce 01       	movw	r24, r28
 6c6:	01 96       	adiw	r24, 0x01	; 1
 6c8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__expand_heap>
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	19 f4       	brne	.+6      	; 0x6d6 <__simple_malloc+0x7a>
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	2c c0       	rjmp	.+88     	; 0x72e <__simple_malloc+0xd2>
 6d6:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <end.1483>
 6da:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <end.1483+0x1>
 6de:	82 17       	cp	r24, r18
 6e0:	93 07       	cpc	r25, r19
 6e2:	21 f0       	breq	.+8      	; 0x6ec <__simple_malloc+0x90>
 6e4:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <cur.1482+0x1>
 6e8:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <cur.1482>
 6ec:	29 81       	ldd	r18, Y+1	; 0x01
 6ee:	3a 81       	ldd	r19, Y+2	; 0x02
 6f0:	82 0f       	add	r24, r18
 6f2:	93 1f       	adc	r25, r19
 6f4:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <end.1483+0x1>
 6f8:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <end.1483>
 6fc:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <cur.1482>
 700:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <cur.1482+0x1>
 704:	cf 01       	movw	r24, r30
 706:	e1 14       	cp	r14, r1
 708:	f1 04       	cpc	r15, r1
 70a:	19 f0       	breq	.+6      	; 0x712 <__simple_malloc+0xb6>
 70c:	02 96       	adiw	r24, 0x02	; 2
 70e:	11 83       	std	Z+1, r17	; 0x01
 710:	00 83       	st	Z, r16
 712:	ce 0e       	add	r12, r30
 714:	df 1e       	adc	r13, r31
 716:	d0 92 58 02 	sts	0x0258, r13	; 0x800258 <cur.1482+0x1>
 71a:	c0 92 57 02 	sts	0x0257, r12	; 0x800257 <cur.1482>
 71e:	07 c0       	rjmp	.+14     	; 0x72e <__simple_malloc+0xd2>
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	09 f0       	breq	.+2      	; 0x726 <__simple_malloc+0xca>
 724:	ad cf       	rjmp	.-166    	; 0x680 <__simple_malloc+0x24>
 726:	7c 01       	movw	r14, r24
 728:	01 e0       	ldi	r16, 0x01	; 1
 72a:	10 e0       	ldi	r17, 0x00	; 0
 72c:	b9 cf       	rjmp	.-142    	; 0x6a0 <__simple_malloc+0x44>
 72e:	22 96       	adiw	r28, 0x02	; 2
 730:	e8 e0       	ldi	r30, 0x08	; 8
 732:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

00001220 <_Exit>:
    1220:	0e 94 b7 00 	call	0x16e	; 0x16e <_exit>

Disassembly of section .text.__expand_heap:

00000d8a <__expand_heap>:
 d8a:	fc 01       	movw	r30, r24
 d8c:	40 81       	ld	r20, Z
 d8e:	51 81       	ldd	r21, Z+1	; 0x01
 d90:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <__brkval>
 d94:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <__brkval+0x1>
 d98:	89 2b       	or	r24, r25
 d9a:	41 f4       	brne	.+16     	; 0xdac <__expand_heap+0x22>
 d9c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <__malloc_heap_start>
 da0:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <__malloc_heap_start+0x1>
 da4:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <__brkval+0x1>
 da8:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__brkval>
 dac:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <__malloc_heap_end>
 db0:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <__malloc_heap_end+0x1>
 db4:	00 97       	sbiw	r24, 0x00	; 0
 db6:	19 f4       	brne	.+6      	; 0xdbe <__expand_heap+0x34>
 db8:	8d b7       	in	r24, 0x3d	; 61
 dba:	9e b7       	in	r25, 0x3e	; 62
 dbc:	80 97       	sbiw	r24, 0x20	; 32
 dbe:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <__brkval>
 dc2:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <__brkval+0x1>
 dc6:	28 17       	cp	r18, r24
 dc8:	39 07       	cpc	r19, r25
 dca:	48 f0       	brcs	.+18     	; 0xdde <__expand_heap+0x54>
 dcc:	8c e0       	ldi	r24, 0x0C	; 12
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__errno_val+0x1>
 dd4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__errno_val>
 dd8:	80 e0       	ldi	r24, 0x00	; 0
 dda:	90 e0       	ldi	r25, 0x00	; 0
 ddc:	08 95       	ret
 dde:	82 1b       	sub	r24, r18
 de0:	93 0b       	sbc	r25, r19
 de2:	84 17       	cp	r24, r20
 de4:	95 07       	cpc	r25, r21
 de6:	90 f3       	brcs	.-28     	; 0xdcc <__expand_heap+0x42>
 de8:	42 0f       	add	r20, r18
 dea:	53 1f       	adc	r21, r19
 dec:	50 93 5a 02 	sts	0x025A, r21	; 0x80025a <__brkval+0x1>
 df0:	40 93 59 02 	sts	0x0259, r20	; 0x800259 <__brkval>
 df4:	c9 01       	movw	r24, r18
 df6:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000f2e <__prologue_saves__>:
 f2e:	2f 92       	push	r2
 f30:	3f 92       	push	r3
 f32:	4f 92       	push	r4
 f34:	5f 92       	push	r5
 f36:	6f 92       	push	r6
 f38:	7f 92       	push	r7
 f3a:	8f 92       	push	r8
 f3c:	9f 92       	push	r9
 f3e:	af 92       	push	r10
 f40:	bf 92       	push	r11
 f42:	cf 92       	push	r12
 f44:	df 92       	push	r13
 f46:	ef 92       	push	r14
 f48:	ff 92       	push	r15
 f4a:	0f 93       	push	r16
 f4c:	1f 93       	push	r17
 f4e:	cf 93       	push	r28
 f50:	df 93       	push	r29
 f52:	cd b7       	in	r28, 0x3d	; 61
 f54:	de b7       	in	r29, 0x3e	; 62
 f56:	ca 1b       	sub	r28, r26
 f58:	db 0b       	sbc	r29, r27
 f5a:	0f b6       	in	r0, 0x3f	; 63
 f5c:	f8 94       	cli
 f5e:	de bf       	out	0x3e, r29	; 62
 f60:	0f be       	out	0x3f, r0	; 63
 f62:	cd bf       	out	0x3d, r28	; 61
 f64:	19 94       	eijmp

Disassembly of section .text.libgcc.prologue:

00000f66 <__epilogue_restores__>:
 f66:	2a 88       	ldd	r2, Y+18	; 0x12
 f68:	39 88       	ldd	r3, Y+17	; 0x11
 f6a:	48 88       	ldd	r4, Y+16	; 0x10
 f6c:	5f 84       	ldd	r5, Y+15	; 0x0f
 f6e:	6e 84       	ldd	r6, Y+14	; 0x0e
 f70:	7d 84       	ldd	r7, Y+13	; 0x0d
 f72:	8c 84       	ldd	r8, Y+12	; 0x0c
 f74:	9b 84       	ldd	r9, Y+11	; 0x0b
 f76:	aa 84       	ldd	r10, Y+10	; 0x0a
 f78:	b9 84       	ldd	r11, Y+9	; 0x09
 f7a:	c8 84       	ldd	r12, Y+8	; 0x08
 f7c:	df 80       	ldd	r13, Y+7	; 0x07
 f7e:	ee 80       	ldd	r14, Y+6	; 0x06
 f80:	fd 80       	ldd	r15, Y+5	; 0x05
 f82:	0c 81       	ldd	r16, Y+4	; 0x04
 f84:	1b 81       	ldd	r17, Y+3	; 0x03
 f86:	aa 81       	ldd	r26, Y+2	; 0x02
 f88:	b9 81       	ldd	r27, Y+1	; 0x01
 f8a:	ce 0f       	add	r28, r30
 f8c:	d1 1d       	adc	r29, r1
 f8e:	0f b6       	in	r0, 0x3f	; 63
 f90:	f8 94       	cli
 f92:	de bf       	out	0x3e, r29	; 62
 f94:	0f be       	out	0x3f, r0	; 63
 f96:	cd bf       	out	0x3d, r28	; 61
 f98:	ed 01       	movw	r28, r26
 f9a:	08 95       	ret
