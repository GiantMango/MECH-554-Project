
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001120  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  00001120  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  0000114f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000384c  00000000  00000000  00001389  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ba  00000000  00000000  00004bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c4  00000000  00000000  00005e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00007154  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050a  00000000  00000000  000075bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f41  00000000  00000000  00007ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00008a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000f7c  00000f7c  000010d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000001c  00000eb0  00000eb0  00001004  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000c  00000f2e  00000f2e  00001082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.stop_conversion 0000000c  00000f3a  00000f3a  0000108e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.free_running_adc 0000000c  00000f46  00000f46  0000109a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.disable_adc 0000000c  00000f52  00000f52  000010a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.enable_adc 0000000c  00000f5e  00000f5e  000010b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.disable_dc_motor 00000010  00000f10  00000f10  00001064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.run_dc_motor 0000000a  00000f6a  00000f6a  000010be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.brake_dc_motor 00000008  00000f74  00000f74  000010c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.init_dc_motor 00000022  00000e70  00000e70  00000fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCDBusyLoop 0000007e  000009a2  000009a2  00000af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDByte 00000070  00000a98  00000a98  00000bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.InitLCD 00000088  00000892  00000892  000009e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCDWriteInt 000000c4  0000064e  0000064e  000007a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LCDGotoXY 00000012  00000efe  00000efe  00001052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.setup   0000000e  00000f20  00000f20  00001074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.initLink 0000001e  00000e92  00000e92  00000fe6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.enqueue 0000003c  00000c78  00000c78  00000dcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.dequeue 00000030  00000d56  00000d56  00000eaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.clearQueue 00000034  00000d22  00000d22  00000e76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.main    00000322  00000172  00000172  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_default 00000002  00000f84  00000f84  000010d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_29 00000088  0000091a  0000091a  00000a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_1 00000028  00000d86  00000d86  00000eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_2 00000028  00000dae  00000dae  00000f02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_5 00000066  00000b76  00000b76  00000cca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .data.rotations 00000010  0080022a  00000fa2  000010f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .bss.black_counter 00000001  0080025e  0080025e  00001120  2**0
                  ALLOC
 43 .bss.white_counter 00000001  0080025f  0080025f  00001120  2**0
                  ALLOC
 44 .bss.steel_counter 00000001  00800260  00800260  00001120  2**0
                  ALLOC
 45 .bss.aluminum_counter 00000001  00800261  00800261  00001120  2**0
                  ALLOC
 46 .bss.item_counter 00000001  00800262  00800262  00001120  2**0
                  ALLOC
 47 .bss.ADC_counter 00000002  0080024e  0080024e  00001120  2**0
                  ALLOC
 48 .bss.INT1_counter 00000001  00800263  00800263  00001120  2**0
                  ALLOC
 49 .bss.INT0_counter 00000001  00800264  00800264  00001120  2**0
                  ALLOC
 50 .bss.in_OR_flag 00000001  00800265  00800265  00001120  2**0
                  ALLOC
 51 .bss.STATE    00000001  00800266  00800266  00001120  2**0
                  ALLOC
 52 .data.ADC_curr_min 00000002  00800250  00000fc6  0000111a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 53 .text.init_pwm 00000026  00000e26  00000e26  00000f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.init_sensors 00000024  00000e4c  00000e4c  00000fa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.init_stepper_motor 0000005c  00000bdc  00000bdc  00000d30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.StepperMotor_CW 000000be  000007d4  000007d4  00000928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.StepperMotor_CCW 000000c2  00000712  00000712  00000866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.StepperMotor_Rotate 0000001c  00000ecc  00000ecc  00001020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .data.decel_speed 00000010  0080023a  00000fb2  00001106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 60 .data.accel_speed 00000016  00800214  00000f8c  000010e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 61 .data.steps   00000004  0080024a  00000fc2  00001116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 62 .text.mTimer  00000040  00000c38  00000c38  00000d8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.div 00000028  00000dd6  00000dd6  00000f2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.div 00000028  00000dfe  00000dfe  00000f52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__dummy_fini 00000002  00000f86  00000f86  000010da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__dummy_funcs_on_exit 00000002  00000f88  00000f88  000010dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__dummy_simulator_exit 00000002  00000f8a  00000f8a  000010de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.exit    00000016  00000ee8  00000ee8  0000103c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__simple_search_fl 000000e0  00000494  00000494  000005e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__simple_free 00000078  00000a20  00000a20  00000b74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .bss.__freelist 00000002  00800252  00800252  00001120  2**0
                  ALLOC
 72 .text.__simple_malloc 000000da  00000574  00000574  000006c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .bss.end.1483 00000002  00800254  00800254  00001120  2**0
                  ALLOC
 74 .bss.cur.1482 00000002  00800256  00800256  00001120  2**0
                  ALLOC
 75 .text._Exit   00000004  00000f80  00000f80  000010d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__expand_heap 0000006e  00000b08  00000b08  00000c5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.__brkval 00000002  00800258  00800258  00001120  2**0
                  ALLOC
 78 .data.__malloc_heap_end 00000002  0080025a  00000fc8  0000111c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 79 .data.__malloc_heap_start 00000002  0080025c  00000fca  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 80 .text.libgcc.prologue 00000038  00000cb4  00000cb4  00000e08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.libgcc.prologue 00000036  00000cec  00000cec  00000e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
   4:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_1>
   8:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__vector_2>
   c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  10:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  14:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_5>
  18:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  1c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  20:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  24:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  28:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  2c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  30:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  34:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  38:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  3c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  40:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  44:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  48:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  4c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  50:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  54:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  58:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  5c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  60:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  64:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  68:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  6c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  70:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  74:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_29>
  78:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  7c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  80:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  84:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  88:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  8c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  90:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  94:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  98:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  9c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  a0:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  a4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  a8:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  ac:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  b0:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  b4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  b8:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  bc:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  c0:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  c4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  c8:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  cc:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  d0:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  d4:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  d8:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  dc:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>
  e0:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 14       	cp	r0, r2
  e8:	80 02       	muls	r24, r16
  ea:	14 02       	muls	r17, r20
  ec:	4e 00       	.word	0x004e	; ????
  ee:	0f 8c       	ldd	r0, Y+31	; 0x1f
  f0:	02 4e       	sbci	r16, 0xE2	; 226
  f2:	02 50       	subi	r16, 0x02	; 2
  f4:	80 02       	muls	r24, r16
  f6:	50 02       	muls	r21, r16
  f8:	52 00       	.word	0x0052	; ????
  fa:	0f c6       	rjmp	.+3102   	; 0xd1a <__epilogue_restores__+0x2e>
  fc:	02 52       	subi	r16, 0x22	; 34
  fe:	02 5a       	subi	r16, 0xA2	; 162
 100:	80 02       	muls	r24, r16
 102:	5a 02       	muls	r21, r26
 104:	5e 00       	.word	0x005e	; ????
 106:	0f c8       	rjmp	.-4066   	; 0xfffff126 <__eeprom_end+0xff7ef126>
 108:	02 5e       	subi	r16, 0xE2	; 226
 10a:	02 67       	ori	r16, 0x72	; 114
 10c:	80 00       	.word	0x0080	; ????

0000010e <__trampolines_start>:
 10e:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__simple_free>
 112:	0c 94 c0 02 	jmp	0x580	; 0x580 <__simple_malloc+0xc>

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d1 e2       	ldi	r29, 0x21	; 33
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
 126:	e4 ee       	ldi	r30, 0xE4	; 228
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	19 c0       	rjmp	.+50     	; 0x160 <__do_clear_bss+0x8>
 12e:	b7 91       	elpm	r27, Z+
 130:	a7 91       	elpm	r26, Z+
 132:	37 91       	elpm	r19, Z+
 134:	27 91       	elpm	r18, Z+
 136:	07 91       	elpm	r16, Z+
 138:	07 fd       	sbrc	r16, 7
 13a:	0e c0       	rjmp	.+28     	; 0x158 <__do_clear_bss>
 13c:	97 91       	elpm	r25, Z+
 13e:	87 91       	elpm	r24, Z+
 140:	ef 01       	movw	r28, r30
 142:	f9 2f       	mov	r31, r25
 144:	e8 2f       	mov	r30, r24
 146:	0b bf       	out	0x3b, r16	; 59
 148:	07 90       	elpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x22>
 152:	fe 01       	movw	r30, r28
 154:	1b be       	out	0x3b, r1	; 59
 156:	04 c0       	rjmp	.+8      	; 0x160 <__do_clear_bss+0x8>

00000158 <__do_clear_bss>:
 158:	1d 92       	st	X+, r1
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e1 f7       	brne	.-8      	; 0x158 <__do_clear_bss>
 160:	ed 30       	cpi	r30, 0x0D	; 13
 162:	f4 07       	cpc	r31, r20
 164:	21 f7       	brne	.-56     	; 0x12e <__do_copy_data+0x8>
 166:	0e 94 b9 00 	call	0x172	; 0x172 <_etext>
 16a:	0c 94 74 07 	jmp	0xee8	; 0xee8 <exit>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

Disassembly of section .text:

00000f7c <__bad_interrupt>:
 f7c:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_default>

Disassembly of section .text.init_adc:

00000eb0 <init_adc>:
#include <avr/interrupt.h>

/* Initialize ADC in one conversion mode */
void init_adc(){	
	/* Config ADC: default ADC input is ADC0 in PORTF 0 (Single Conversion) */
	ADCSRA |= _BV(ADEN);					// enable ADC | ADEN: ADC Enable
 eb0:	ea e7       	ldi	r30, 0x7A	; 122
 eb2:	f0 e0       	ldi	r31, 0x00	; 0
 eb4:	80 81       	ld	r24, Z
 eb6:	80 68       	ori	r24, 0x80	; 128
 eb8:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);					// enable interrupt of ADC | ADIE: ADC Interrupt enable (raised when conversion done)
 eba:	80 81       	ld	r24, Z
 ebc:	88 60       	ori	r24, 0x08	; 8
 ebe:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0);		// ADLAR: ADC Left adjust result | REFS0: AVCC with external capacitor at AREF pin
 ec0:	ec e7       	ldi	r30, 0x7C	; 124
 ec2:	f0 e0       	ldi	r31, 0x00	; 0
 ec4:	80 81       	ld	r24, Z
 ec6:	80 66       	ori	r24, 0x60	; 96
 ec8:	80 83       	st	Z, r24
 eca:	08 95       	ret

Disassembly of section .text.start_conversion:

00000f2e <start_conversion>:
} // end init_adc

/* Start ADC Conversion */
void start_conversion(){
	/* Initialize ADC and start one conversion at the beginning */
	ADCSRA |= _BV(ADSC);					// ADSC: ADC Start Conversion Bit
 f2e:	ea e7       	ldi	r30, 0x7A	; 122
 f30:	f0 e0       	ldi	r31, 0x00	; 0
 f32:	80 81       	ld	r24, Z
 f34:	80 64       	ori	r24, 0x40	; 64
 f36:	80 83       	st	Z, r24
 f38:	08 95       	ret

Disassembly of section .text.stop_conversion:

00000f3a <stop_conversion>:
} // end start_adc

/* Stop ADC Conversion */
void stop_conversion(){
	ADCSRA &= ~(_BV(ADSC));				// clear ADSC
 f3a:	ea e7       	ldi	r30, 0x7A	; 122
 f3c:	f0 e0       	ldi	r31, 0x00	; 0
 f3e:	80 81       	ld	r24, Z
 f40:	8f 7b       	andi	r24, 0xBF	; 191
 f42:	80 83       	st	Z, r24
 f44:	08 95       	ret

Disassembly of section .text.free_running_adc:

00000f46 <free_running_adc>:
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
 f46:	ea e7       	ldi	r30, 0x7A	; 122
 f48:	f0 e0       	ldi	r31, 0x00	; 0
 f4a:	80 81       	ld	r24, Z
 f4c:	80 62       	ori	r24, 0x20	; 32
 f4e:	80 83       	st	Z, r24
 f50:	08 95       	ret

Disassembly of section .text.disable_adc:

00000f52 <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
 f52:	ea e7       	ldi	r30, 0x7A	; 122
 f54:	f0 e0       	ldi	r31, 0x00	; 0
 f56:	80 81       	ld	r24, Z
 f58:	8f 77       	andi	r24, 0x7F	; 127
 f5a:	80 83       	st	Z, r24
 f5c:	08 95       	ret

Disassembly of section .text.enable_adc:

00000f5e <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
 f5e:	ea e7       	ldi	r30, 0x7A	; 122
 f60:	f0 e0       	ldi	r31, 0x00	; 0
 f62:	80 81       	ld	r24, Z
 f64:	80 68       	ori	r24, 0x80	; 128
 f66:	80 83       	st	Z, r24
 f68:	08 95       	ret

Disassembly of section .text.disable_dc_motor:

00000f10 <disable_dc_motor>:
	brake_dc_motor();
}

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
 f10:	85 b1       	in	r24, 0x05	; 5
 f12:	80 7f       	andi	r24, 0xF0	; 240
 f14:	85 b9       	out	0x05, r24	; 5
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
 f16:	85 e0       	ldi	r24, 0x05	; 5
 f18:	90 e0       	ldi	r25, 0x00	; 0
 f1a:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
 f1e:	08 95       	ret

Disassembly of section .text.run_dc_motor:

00000f6a <run_dc_motor>:
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
 f6a:	85 b1       	in	r24, 0x05	; 5
 f6c:	80 7f       	andi	r24, 0xF0	; 240
 f6e:	8b 60       	ori	r24, 0x0B	; 11
 f70:	85 b9       	out	0x05, r24	; 5
 f72:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

00000f74 <brake_dc_motor>:
	//PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
 f74:	85 b1       	in	r24, 0x05	; 5
 f76:	8f 60       	ori	r24, 0x0F	; 15
 f78:	85 b9       	out	0x05, r24	; 5
 f7a:	08 95       	ret

Disassembly of section .text.init_dc_motor:

00000e70 <init_dc_motor>:


/* Initialize DC motor */
void init_dc_motor(){
	// Enable switch button interrupt
	EIMSK |= (_BV(INT4));
 e70:	8d b3       	in	r24, 0x1d	; 29
 e72:	80 61       	ori	r24, 0x10	; 16
 e74:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC41));		// falling edge trigger
 e76:	ea e6       	ldi	r30, 0x6A	; 106
 e78:	f0 e0       	ldi	r31, 0x00	; 0
 e7a:	80 81       	ld	r24, Z
 e7c:	82 60       	ori	r24, 0x02	; 2
 e7e:	80 83       	st	Z, r24

	// GPIO
	DDRE &= ~(_BV(PE1) | _BV(PE0)); // used as input
 e80:	8d b1       	in	r24, 0x0d	; 13
 e82:	8c 7f       	andi	r24, 0xFC	; 252
 e84:	8d b9       	out	0x0d, r24	; 13

	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
 e86:	84 b1       	in	r24, 0x04	; 4
 e88:	8f 60       	ori	r24, 0x0F	; 15
 e8a:	84 b9       	out	0x04, r24	; 4
	//PORTB = (PORTB & 0xF0) | DC_Brake;							// motor driver enable pins	& brake to Vcc
	brake_dc_motor();
 e8c:	0e 94 ba 07 	call	0xf74	; 0xf74 <brake_dc_motor>
 e90:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

000009a2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 9a2:	87 b1       	in	r24, 0x07	; 7
 9a4:	80 7f       	andi	r24, 0xF0	; 240
 9a6:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 9a8:	88 b1       	in	r24, 0x08	; 8
 9aa:	80 62       	ori	r24, 0x20	; 32
 9ac:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 9ae:	88 b1       	in	r24, 0x08	; 8
 9b0:	8f 7b       	andi	r24, 0xBF	; 191
 9b2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	8a 95       	dec	r24
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <LCDBusyLoop+0x14>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 9bc:	88 b1       	in	r24, 0x08	; 8
 9be:	80 68       	ori	r24, 0x80	; 128
 9c0:	88 b9       	out	0x08, r24	; 8
 9c2:	92 e0       	ldi	r25, 0x02	; 2
 9c4:	9a 95       	dec	r25
 9c6:	f1 f7       	brne	.-4      	; 0x9c4 <LCDBusyLoop+0x22>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 9ca:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 9cc:	82 95       	swap	r24
 9ce:	80 7f       	andi	r24, 0xF0	; 240
 9d0:	92 e0       	ldi	r25, 0x02	; 2
 9d2:	9a 95       	dec	r25
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <LCDBusyLoop+0x30>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 9d8:	98 b1       	in	r25, 0x08	; 8
 9da:	9f 77       	andi	r25, 0x7F	; 127
 9dc:	98 b9       	out	0x08, r25	; 8
 9de:	95 e0       	ldi	r25, 0x05	; 5
 9e0:	9a 95       	dec	r25
 9e2:	f1 f7       	brne	.-4      	; 0x9e0 <LCDBusyLoop+0x3e>
 9e4:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 9e6:	98 b1       	in	r25, 0x08	; 8
 9e8:	90 68       	ori	r25, 0x80	; 128
 9ea:	98 b9       	out	0x08, r25	; 8
 9ec:	92 e0       	ldi	r25, 0x02	; 2
 9ee:	9a 95       	dec	r25
 9f0:	f1 f7       	brne	.-4      	; 0x9ee <LCDBusyLoop+0x4c>
 9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 9f4:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 9f6:	80 78       	andi	r24, 0x80	; 128
 9f8:	92 e0       	ldi	r25, 0x02	; 2
 9fa:	9a 95       	dec	r25
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <LCDBusyLoop+0x58>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 a00:	98 b1       	in	r25, 0x08	; 8
 a02:	9f 77       	andi	r25, 0x7F	; 127
 a04:	98 b9       	out	0x08, r25	; 8
 a06:	95 e0       	ldi	r25, 0x05	; 5
 a08:	9a 95       	dec	r25
 a0a:	f1 f7       	brne	.-4      	; 0xa08 <LCDBusyLoop+0x66>
 a0c:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 a0e:	81 11       	cpse	r24, r1
 a10:	d5 cf       	rjmp	.-86     	; 0x9bc <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 a12:	88 b1       	in	r24, 0x08	; 8
 a14:	8f 7d       	andi	r24, 0xDF	; 223
 a16:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 a18:	87 b1       	in	r24, 0x07	; 7
 a1a:	8f 60       	ori	r24, 0x0F	; 15
 a1c:	87 b9       	out	0x07, r24	; 7
 a1e:	08 95       	ret

Disassembly of section .text.LCDByte:

00000a98 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 a98:	28 2f       	mov	r18, r24
 a9a:	22 95       	swap	r18
 a9c:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 a9e:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 aa0:	61 11       	cpse	r22, r1
 aa2:	04 c0       	rjmp	.+8      	; 0xaac <LCDByte+0x14>
	CLEAR_RS();
 aa4:	98 b1       	in	r25, 0x08	; 8
 aa6:	9f 7b       	andi	r25, 0xBF	; 191
 aa8:	98 b9       	out	0x08, r25	; 8
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <LCDByte+0x1a>
else
	SET_RS();
 aac:	98 b1       	in	r25, 0x08	; 8
 aae:	90 64       	ori	r25, 0x40	; 64
 ab0:	98 b9       	out	0x08, r25	; 8
 ab2:	92 e0       	ldi	r25, 0x02	; 2
 ab4:	9a 95       	dec	r25
 ab6:	f1 f7       	brne	.-4      	; 0xab4 <LCDByte+0x1c>
 ab8:	00 c0       	rjmp	.+0      	; 0xaba <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 aba:	98 b1       	in	r25, 0x08	; 8
 abc:	90 68       	ori	r25, 0x80	; 128
 abe:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 ac0:	98 b1       	in	r25, 0x08	; 8
 ac2:	90 7f       	andi	r25, 0xF0	; 240
 ac4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 ac6:	98 b9       	out	0x08, r25	; 8
 ac8:	95 e0       	ldi	r25, 0x05	; 5
 aca:	9a 95       	dec	r25
 acc:	f1 f7       	brne	.-4      	; 0xaca <LCDByte+0x32>
 ace:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 ad0:	98 b1       	in	r25, 0x08	; 8
 ad2:	9f 77       	andi	r25, 0x7F	; 127
 ad4:	98 b9       	out	0x08, r25	; 8
 ad6:	95 e0       	ldi	r25, 0x05	; 5
 ad8:	9a 95       	dec	r25
 ada:	f1 f7       	brne	.-4      	; 0xad8 <LCDByte+0x40>
 adc:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 ade:	98 b1       	in	r25, 0x08	; 8
 ae0:	90 68       	ori	r25, 0x80	; 128
 ae2:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 ae4:	98 b1       	in	r25, 0x08	; 8
 ae6:	90 7f       	andi	r25, 0xF0	; 240
 ae8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 aea:	88 b9       	out	0x08, r24	; 8
 aec:	85 e0       	ldi	r24, 0x05	; 5
 aee:	8a 95       	dec	r24
 af0:	f1 f7       	brne	.-4      	; 0xaee <LCDByte+0x56>
 af2:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 af4:	88 b1       	in	r24, 0x08	; 8
 af6:	8f 77       	andi	r24, 0x7F	; 127
 af8:	88 b9       	out	0x08, r24	; 8
 afa:	95 e0       	ldi	r25, 0x05	; 5
 afc:	9a 95       	dec	r25
 afe:	f1 f7       	brne	.-4      	; 0xafc <LCDByte+0x64>
 b00:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 b02:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCDBusyLoop>
 b06:	08 95       	ret

Disassembly of section .text.InitLCD:

00000892 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 892:	cf 93       	push	r28
 894:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 896:	2f ef       	ldi	r18, 0xFF	; 255
 898:	86 e7       	ldi	r24, 0x76	; 118
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	21 50       	subi	r18, 0x01	; 1
 89e:	80 40       	sbci	r24, 0x00	; 0
 8a0:	90 40       	sbci	r25, 0x00	; 0
 8a2:	e1 f7       	brne	.-8      	; 0x89c <InitLCD+0xa>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <InitLCD+0x14>
 8a6:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 8a8:	87 b1       	in	r24, 0x07	; 7
 8aa:	8f 60       	ori	r24, 0x0F	; 15
 8ac:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 8ae:	87 b1       	in	r24, 0x07	; 7
 8b0:	80 68       	ori	r24, 0x80	; 128
 8b2:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 8b4:	87 b1       	in	r24, 0x07	; 7
 8b6:	80 64       	ori	r24, 0x40	; 64
 8b8:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 8ba:	87 b1       	in	r24, 0x07	; 7
 8bc:	80 62       	ori	r24, 0x20	; 32
 8be:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 8c0:	88 b1       	in	r24, 0x08	; 8
 8c2:	80 7f       	andi	r24, 0xF0	; 240
 8c4:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 8c6:	88 b1       	in	r24, 0x08	; 8
 8c8:	8f 77       	andi	r24, 0x7F	; 127
 8ca:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 8cc:	88 b1       	in	r24, 0x08	; 8
 8ce:	8f 7d       	andi	r24, 0xDF	; 223
 8d0:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 8d2:	88 b1       	in	r24, 0x08	; 8
 8d4:	8f 7b       	andi	r24, 0xBF	; 191
 8d6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8d8:	00 c0       	rjmp	.+0      	; 0x8da <InitLCD+0x48>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <InitLCD+0x4a>
 8dc:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 8de:	88 b1       	in	r24, 0x08	; 8
 8e0:	80 68       	ori	r24, 0x80	; 128
 8e2:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 8e4:	88 b1       	in	r24, 0x08	; 8
 8e6:	82 60       	ori	r24, 0x02	; 2
 8e8:	88 b9       	out	0x08, r24	; 8
 8ea:	25 e0       	ldi	r18, 0x05	; 5
 8ec:	2a 95       	dec	r18
 8ee:	f1 f7       	brne	.-4      	; 0x8ec <InitLCD+0x5a>
 8f0:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 8f2:	88 b1       	in	r24, 0x08	; 8
 8f4:	8f 77       	andi	r24, 0x7F	; 127
 8f6:	88 b9       	out	0x08, r24	; 8
 8f8:	85 e0       	ldi	r24, 0x05	; 5
 8fa:	8a 95       	dec	r24
 8fc:	f1 f7       	brne	.-4      	; 0x8fa <InitLCD+0x68>
 8fe:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 900:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	8c 2f       	mov	r24, r28
 908:	8c 60       	ori	r24, 0x0C	; 12
 90a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	88 e2       	ldi	r24, 0x28	; 40
 912:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCDByte>
}
 916:	cf 91       	pop	r28
 918:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

0000064e <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 64e:	ef 92       	push	r14
 650:	ff 92       	push	r15
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	00 d0       	rcall	.+0      	; 0x65c <LCDWriteInt+0xe>
 65c:	0f 92       	push	r0
 65e:	0f 92       	push	r0
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 666:	fe 01       	movw	r30, r28
 668:	31 96       	adiw	r30, 0x01	; 1
 66a:	25 e0       	ldi	r18, 0x05	; 5
 66c:	df 01       	movw	r26, r30
 66e:	1d 92       	st	X+, r1
 670:	2a 95       	dec	r18
 672:	e9 f7       	brne	.-6      	; 0x66e <LCDWriteInt+0x20>
	int i=4,j=0;
 674:	24 e0       	ldi	r18, 0x04	; 4
 676:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 678:	0f c0       	rjmp	.+30     	; 0x698 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 67a:	6a e0       	ldi	r22, 0x0A	; 10
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__divmodhi4>
 682:	e1 e0       	ldi	r30, 0x01	; 1
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	ec 0f       	add	r30, r28
 688:	fd 1f       	adc	r31, r29
 68a:	e2 0f       	add	r30, r18
 68c:	f3 1f       	adc	r31, r19
 68e:	80 83       	st	Z, r24
	val=val/10;
 690:	86 2f       	mov	r24, r22
 692:	97 2f       	mov	r25, r23
	i--;
 694:	21 50       	subi	r18, 0x01	; 1
 696:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	79 f7       	brne	.-34     	; 0x67a <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 69c:	bf ef       	ldi	r27, 0xFF	; 255
 69e:	eb 16       	cp	r14, r27
 6a0:	fb 06       	cpc	r15, r27
 6a2:	81 f4       	brne	.+32     	; 0x6c4 <LCDWriteInt+0x76>
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 6a6:	0f 5f       	subi	r16, 0xFF	; 255
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <LCDWriteInt+0x62>
 6ac:	00 e0       	ldi	r16, 0x00	; 0
 6ae:	10 e0       	ldi	r17, 0x00	; 0
 6b0:	e1 e0       	ldi	r30, 0x01	; 1
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	ec 0f       	add	r30, r28
 6b6:	fd 1f       	adc	r31, r29
 6b8:	e0 0f       	add	r30, r16
 6ba:	f1 1f       	adc	r31, r17
 6bc:	20 81       	ld	r18, Z
 6be:	22 23       	and	r18, r18
 6c0:	91 f3       	breq	.-28     	; 0x6a6 <LCDWriteInt+0x58>
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 6c4:	05 e0       	ldi	r16, 0x05	; 5
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	0e 19       	sub	r16, r14
 6ca:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 6cc:	99 23       	and	r25, r25
 6ce:	94 f4       	brge	.+36     	; 0x6f4 <LCDWriteInt+0xa6>
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	8d e2       	ldi	r24, 0x2D	; 45
 6d4:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCDByte>
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 6da:	e1 e0       	ldi	r30, 0x01	; 1
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	ec 0f       	add	r30, r28
 6e0:	fd 1f       	adc	r31, r29
 6e2:	e0 0f       	add	r30, r16
 6e4:	f1 1f       	adc	r31, r17
 6e6:	80 81       	ld	r24, Z
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	80 5d       	subi	r24, 0xD0	; 208
 6ec:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 6f0:	0f 5f       	subi	r16, 0xFF	; 255
 6f2:	1f 4f       	sbci	r17, 0xFF	; 255
 6f4:	05 30       	cpi	r16, 0x05	; 5
 6f6:	11 05       	cpc	r17, r1
 6f8:	84 f3       	brlt	.-32     	; 0x6da <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	ff 90       	pop	r15
 70e:	ef 90       	pop	r14
 710:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

00000efe <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 efe:	88 32       	cpi	r24, 0x28	; 40
 f00:	30 f4       	brcc	.+12     	; 0xf0e <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 f02:	61 11       	cpse	r22, r1
 f04:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 f06:	60 e0       	ldi	r22, 0x00	; 0
 f08:	80 68       	ori	r24, 0x80	; 128
 f0a:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCDByte>
 f0e:	08 95       	ret

Disassembly of section .text.setup:

00000f20 <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 f20:	fc 01       	movw	r30, r24
 f22:	11 82       	std	Z+1, r1	; 0x01
 f24:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 f26:	fb 01       	movw	r30, r22
 f28:	11 82       	std	Z+1, r1	; 0x01
 f2a:	10 82       	st	Z, r1
 f2c:	08 95       	ret

Disassembly of section .text.initLink:

00000e92 <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
 e92:	cf 93       	push	r28
 e94:	df 93       	push	r29
 e96:	ec 01       	movw	r28, r24
	//link *l;
	*newLink = malloc(sizeof(link));
 e98:	83 e0       	ldi	r24, 0x03	; 3
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	0e 94 ba 02 	call	0x574	; 0x574 <__simple_malloc>
 ea0:	99 83       	std	Y+1, r25	; 0x01
 ea2:	88 83       	st	Y, r24
	(*newLink)->next = NULL;
 ea4:	fc 01       	movw	r30, r24
 ea6:	12 82       	std	Z+2, r1	; 0x02
 ea8:	11 82       	std	Z+1, r1	; 0x01
	return;
}/*initLink*/
 eaa:	df 91       	pop	r29
 eac:	cf 91       	pop	r28
 eae:	08 95       	ret

Disassembly of section .text.enqueue:

00000c78 <enqueue>:
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
	return((*h)->e);
}/*firstValue*/
 c78:	db 01       	movw	r26, r22
 c7a:	ed 91       	ld	r30, X+
 c7c:	fc 91       	ld	r31, X
 c7e:	30 97       	sbiw	r30, 0x00	; 0
 c80:	61 f0       	breq	.+24     	; 0xc9a <enqueue+0x22>
 c82:	da 01       	movw	r26, r20
 c84:	8d 91       	ld	r24, X+
 c86:	9c 91       	ld	r25, X
 c88:	11 97       	sbiw	r26, 0x01	; 1
 c8a:	92 83       	std	Z+2, r25	; 0x02
 c8c:	81 83       	std	Z+1, r24	; 0x01
 c8e:	8d 91       	ld	r24, X+
 c90:	9c 91       	ld	r25, X
 c92:	fb 01       	movw	r30, r22
 c94:	91 83       	std	Z+1, r25	; 0x01
 c96:	80 83       	st	Z, r24
 c98:	08 95       	ret
 c9a:	da 01       	movw	r26, r20
 c9c:	2d 91       	ld	r18, X+
 c9e:	3c 91       	ld	r19, X
 ca0:	11 97       	sbiw	r26, 0x01	; 1
 ca2:	fc 01       	movw	r30, r24
 ca4:	31 83       	std	Z+1, r19	; 0x01
 ca6:	20 83       	st	Z, r18
 ca8:	8d 91       	ld	r24, X+
 caa:	9c 91       	ld	r25, X
 cac:	db 01       	movw	r26, r22
 cae:	8d 93       	st	X+, r24
 cb0:	9c 93       	st	X, r25
 cb2:	08 95       	ret

Disassembly of section .text.dequeue:

00000d56 <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **t, link **deQueuedLink){
 d56:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 d58:	80 81       	ld	r24, Z
 d5a:	91 81       	ldd	r25, Z+1	; 0x01
 d5c:	da 01       	movw	r26, r20
 d5e:	8d 93       	st	X+, r24
 d60:	9c 93       	st	X, r25
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 d62:	a0 81       	ld	r26, Z
 d64:	b1 81       	ldd	r27, Z+1	; 0x01
 d66:	10 97       	sbiw	r26, 0x00	; 0
 d68:	31 f0       	breq	.+12     	; 0xd76 <dequeue+0x20>
		*h = (*h)->next; // NULL when there's only 1 thing in the list	
 d6a:	11 96       	adiw	r26, 0x01	; 1
 d6c:	8d 91       	ld	r24, X+
 d6e:	9c 91       	ld	r25, X
 d70:	12 97       	sbiw	r26, 0x02	; 2
 d72:	91 83       	std	Z+1, r25	; 0x01
 d74:	80 83       	st	Z, r24
	}/*if*/
	if (*h == NULL){
 d76:	80 81       	ld	r24, Z
 d78:	91 81       	ldd	r25, Z+1	; 0x01
 d7a:	89 2b       	or	r24, r25
 d7c:	19 f4       	brne	.+6      	; 0xd84 <dequeue+0x2e>
		*t = NULL;
 d7e:	fb 01       	movw	r30, r22
 d80:	11 82       	std	Z+1, r1	; 0x01
 d82:	10 82       	st	Z, r1
 d84:	08 95       	ret

Disassembly of section .text.clearQueue:

00000d22 <clearQueue>:
/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
/* This clears the queue */
void clearQueue(link **h, link **t){
 d22:	0f 93       	push	r16
 d24:	1f 93       	push	r17
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
 d2a:	ec 01       	movw	r28, r24
 d2c:	8b 01       	movw	r16, r22

	link *temp;

	while (*h != NULL){
 d2e:	07 c0       	rjmp	.+14     	; 0xd3e <clearQueue+0x1c>
		temp = *h;
		*h=(*h)->next;
 d30:	fc 01       	movw	r30, r24
 d32:	21 81       	ldd	r18, Z+1	; 0x01
 d34:	32 81       	ldd	r19, Z+2	; 0x02
 d36:	39 83       	std	Y+1, r19	; 0x01
 d38:	28 83       	st	Y, r18
		free(temp);
 d3a:	0e 94 10 05 	call	0xa20	; 0xa20 <__simple_free>
/* This clears the queue */
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
 d3e:	88 81       	ld	r24, Y
 d40:	99 81       	ldd	r25, Y+1	; 0x01
 d42:	00 97       	sbiw	r24, 0x00	; 0
 d44:	a9 f7       	brne	.-22     	; 0xd30 <clearQueue+0xe>
		*h=(*h)->next;
		free(temp);
	}/*while*/
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		
 d46:	f8 01       	movw	r30, r16
 d48:	11 82       	std	Z+1, r1	; 0x01
 d4a:	10 82       	st	Z, r1

	return;
}/*clearQueue*/
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	1f 91       	pop	r17
 d52:	0f 91       	pop	r16
 d54:	08 95       	ret

Disassembly of section .text.main:

00000172 <main>:
link *rtnLink;		/* same as the above */
element eTest;		/* A variable to hold the aggregate data type known as element */			
/* End of Glabal Variables*/


int main(int argc, char *argv[]){
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	CLKPR = 0x80;
 17a:	e1 e6       	ldi	r30, 0x61	; 97
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	80 83       	st	Z, r24
	CLKPR = 0x01;		//  sets system clock to 8MHz
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 83       	st	Z, r24

	STATE = 0;
 186:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <STATE>

	cli();		// Disables all interrupts
 18a:	f8 94       	cli
	
	DDRL = 0xF0; // for LED
 18c:	80 ef       	ldi	r24, 0xF0	; 240
 18e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>

	/* Initialize LCD */
	InitLCD(LS_BLINK|LS_ULINE);
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	0e 94 49 04 	call	0x892	; 0x892 <InitLCD>
	LCDClear();
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 4c 05 	call	0xa98	; 0xa98 <LCDByte>
	
	/* Sensor */
	init_sensors();
 1a0:	0e 94 26 07 	call	0xe4c	; 0xe4c <init_sensors>

	/* Initialize ADC */
	init_adc();
 1a4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <init_adc>
	free_running_adc();
 1a8:	0e 94 a3 07 	call	0xf46	; 0xf46 <free_running_adc>

	/* Initialize DC Motor */
	init_pwm(90);
 1ac:	8a e5       	ldi	r24, 0x5A	; 90
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 13 07 	call	0xe26	; 0xe26 <init_pwm>
	init_dc_motor();
 1b4:	0e 94 38 07 	call	0xe70	; 0xe70 <init_dc_motor>

	/* Initialize Stepper Motor and Plate Position */
	init_stepper_motor();
 1b8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <init_stepper_motor>
	current_plate = BLACK;
 1bc:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <current_plate>

	setup(&head, &tail);
 1c0:	66 e0       	ldi	r22, 0x06	; 6
 1c2:	72 e0       	ldi	r23, 0x02	; 2
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	0e 94 90 07 	call	0xf20	; 0xf20 <setup>
	// LCDWriteStringXY(0, 0, "A");
	// LCDWriteStringXY(3, 0, "S");
	// LCDWriteStringXY(6, 0, "W");
	// LCDWriteStringXY(9, 0, "B");

	sei();	// Note this sets the Global Enable for all interrupts
 1cc:	78 94       	sei

	goto POLLING_STAGE;

	// POLLING STATE
	POLLING_STAGE:
		PORTL = 0x10;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
		// LCDWriteIntXY(0,0,STATE, 1);
		// LCDWriteIntXY(10,0,INT2_counter,2);
		// LCDWriteIntXY(14,0,INT3_counter,2);

		run_dc_motor();
 1d4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <run_dc_motor>
		// LCDWriteIntXY(0, 1, aluminum_counter, 2);
		// LCDWriteIntXY(3, 1, steel_counter, 2);
		// LCDWriteIntXY(6, 1, white_counter, 2);
		// LCDWriteIntXY(9, 1, black_counter, 2);

		if(!OR && in_OR_flag){
 1d8:	1c 99       	sbic	0x03, 4	; 3
 1da:	53 c0       	rjmp	.+166    	; 0x282 <main+0x110>
 1dc:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <in_OR_flag>
 1e0:	88 23       	and	r24, r24
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <main+0x74>
 1e4:	4e c0       	rjmp	.+156    	; 0x282 <main+0x110>
			PORTL = 0x70;
 1e6:	80 e7       	ldi	r24, 0x70	; 112
 1e8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			disable_adc();
 1ec:	0e 94 a9 07 	call	0xf52	; 0xf52 <disable_adc>
			stop_conversion();
 1f0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <stop_conversion>
			
			initLink(&newLink);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	0e 94 49 07 	call	0xe92	; 0xe92 <initLink>

			if(ADC_curr_min >= WHITE_BLACK_BOUND){
 1fc:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <ADC_curr_min>
 200:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ADC_curr_min+0x1>
 204:	83 39       	cpi	r24, 0x93	; 147
 206:	93 40       	sbci	r25, 0x03	; 3
 208:	30 f0       	brcs	.+12     	; 0x216 <main+0xa4>
				newLink->e.itemMaterial = BLACK; // 1
 20a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 20e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 212:	10 82       	st	Z, r1
 214:	22 c0       	rjmp	.+68     	; 0x25a <main+0xe8>
				// LCDWriteStringXY(pos2, 0, "B");
			} else if(ADC_curr_min >= STEEL_WHITE_BOUND){
 216:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <ADC_curr_min>
 21a:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ADC_curr_min+0x1>
 21e:	8c 3b       	cpi	r24, 0xBC	; 188
 220:	92 40       	sbci	r25, 0x02	; 2
 222:	38 f0       	brcs	.+14     	; 0x232 <main+0xc0>
				newLink->e.itemMaterial = WHITE; // 3
 224:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 228:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
 230:	14 c0       	rjmp	.+40     	; 0x25a <main+0xe8>
				// LCDWriteStringXY(pos2, 0, "W");
			} else if(ADC_curr_min >= ALUMINUM_STEEL_BOUND){
 232:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <ADC_curr_min>
 236:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ADC_curr_min+0x1>
 23a:	88 3c       	cpi	r24, 0xC8	; 200
 23c:	91 05       	cpc	r25, r1
 23e:	38 f0       	brcs	.+14     	; 0x24e <main+0xdc>
				newLink->e.itemMaterial = STEEL; // 2
 240:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 244:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 83       	st	Z, r24
 24c:	06 c0       	rjmp	.+12     	; 0x25a <main+0xe8>
				// LCDWriteStringXY(pos2, 0, "S");
			} else {
				newLink->e.itemMaterial = ALUMINUM; // 4
 24e:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 252:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 83       	st	Z, r24
				// LCDWriteStringXY(pos2, 0, "A");
			}
			
			enqueue(&head, &tail, &newLink);
 25a:	4c e0       	ldi	r20, 0x0C	; 12
 25c:	52 e0       	ldi	r21, 0x02	; 2
 25e:	66 e0       	ldi	r22, 0x06	; 6
 260:	72 e0       	ldi	r23, 0x02	; 2
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	0e 94 3c 06 	call	0xc78	; 0xc78 <enqueue>

			// LCDWriteIntXY(10,1,ADC_counter,5);
			// LCDWriteIntXY(5,0,ADC_curr_min,4);


			ADC_curr_min = 1023;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ADC_curr_min+0x1>
 272:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ADC_curr_min>
			ADC_counter = 0;
 276:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <ADC_counter+0x1>
 27a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <ADC_counter>
			in_OR_flag = 0;
 27e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <in_OR_flag>
		}

		if(item_counter == TOTAL_ITEM){
 282:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <item_counter>
 286:	80 33       	cpi	r24, 0x30	; 48
 288:	41 f4       	brne	.+16     	; 0x29a <main+0x128>
			mTimer(200);
 28a:	88 ec       	ldi	r24, 0xC8	; 200
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
			STATE = 5;
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <STATE>
			goto END;
 298:	db c0       	rjmp	.+438    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		}

		switch(STATE){
 29a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <STATE>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	01 f1       	breq	.+64     	; 0x2e2 <main+0x170>
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <main+0x138>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	41 f0       	breq	.+16     	; 0x2b8 <main+0x146>
 2a8:	92 cf       	rjmp	.-220    	; 0x1ce <main+0x5c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <main+0x13e>
 2ae:	a9 c0       	rjmp	.+338    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 2b0:	85 30       	cpi	r24, 0x05	; 5
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <main+0x144>
 2b4:	cd c0       	rjmp	.+410    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 2b6:	8b cf       	rjmp	.-234    	; 0x1ce <main+0x5c>
				goto POLLING_STAGE;
		}//switch STATE


	REFLECTIVE_STAGE:
		PORTL = 0x20;
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		LCDWriteIntXY(10,0,INT0_counter,2);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	0e 94 7f 07 	call	0xefe	; 0xefe <LCDGotoXY>
 2c6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <INT0_counter>
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 27 03 	call	0x64e	; 0x64e <LCDWriteInt>

		enable_adc();
 2d4:	0e 94 af 07 	call	0xf5e	; 0xf5e <enable_adc>
		start_conversion();
 2d8:	0e 94 97 07 	call	0xf2e	; 0xf2e <start_conversion>
		
		//Reset the state variable
		STATE = 0;
 2dc:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <STATE>
		goto POLLING_STAGE;
 2e0:	76 cf       	rjmp	.-276    	; 0x1ce <main+0x5c>
	

	BUCKET_STAGE:
		PORTL = 0x40;
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		LCDWriteIntXY(14,0,INT1_counter,2);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	8e e0       	ldi	r24, 0x0E	; 14
 2ec:	0e 94 7f 07 	call	0xefe	; 0xefe <LCDGotoXY>
 2f0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <INT1_counter>
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 27 03 	call	0x64e	; 0x64e <LCDWriteInt>

		brake_dc_motor();
 2fe:	0e 94 ba 07 	call	0xf74	; 0xf74 <brake_dc_motor>

		// LCDWriteIntXY(0,1,head->e.itemMaterial,1);

		switch(head->e.itemMaterial){
 302:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <head>
 306:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <head+0x1>
 30a:	80 81       	ld	r24, Z
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	f1 f0       	breq	.+60     	; 0x34c <main+0x1da>
 310:	08 f4       	brcc	.+2      	; 0x314 <main+0x1a2>
 312:	4a c0       	rjmp	.+148    	; 0x3a8 <main+0x236>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	89 f1       	breq	.+98     	; 0x37a <main+0x208>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	09 f0       	breq	.+2      	; 0x31e <main+0x1ac>
 31c:	5a c0       	rjmp	.+180    	; 0x3d2 <main+0x260>
			case(ALUMINUM):
				StepperMotor_Rotate(rotations[current_plate][ALUMINUM]);
 31e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 322:	24 e0       	ldi	r18, 0x04	; 4
 324:	e2 9f       	mul	r30, r18
 326:	f0 01       	movw	r30, r0
 328:	11 24       	eor	r1, r1
 32a:	e6 5d       	subi	r30, 0xD6	; 214
 32c:	fd 4f       	sbci	r31, 0xFD	; 253
 32e:	83 81       	ldd	r24, Z+3	; 0x03
 330:	08 2e       	mov	r0, r24
 332:	00 0c       	add	r0, r0
 334:	99 0b       	sbc	r25, r25
 336:	0e 94 66 07 	call	0xecc	; 0xecc <StepperMotor_Rotate>
				aluminum_counter += 1;
 33a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <aluminum_counter>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <aluminum_counter>
				current_plate = ALUMINUM;
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
				break;
 34a:	43 c0       	rjmp	.+134    	; 0x3d2 <main+0x260>
			
			case(STEEL):
				StepperMotor_Rotate(rotations[current_plate][STEEL]);
 34c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	e8 9f       	mul	r30, r24
 354:	f0 01       	movw	r30, r0
 356:	11 24       	eor	r1, r1
 358:	e6 5d       	subi	r30, 0xD6	; 214
 35a:	fd 4f       	sbci	r31, 0xFD	; 253
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	08 2e       	mov	r0, r24
 360:	00 0c       	add	r0, r0
 362:	99 0b       	sbc	r25, r25
 364:	0e 94 66 07 	call	0xecc	; 0xecc <StepperMotor_Rotate>
				steel_counter += 1;
 368:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <steel_counter>
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <steel_counter>
				current_plate = STEEL;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
				break;
 378:	2c c0       	rjmp	.+88     	; 0x3d2 <main+0x260>
			
			case(WHITE):
				StepperMotor_Rotate(rotations[current_plate][WHITE]);
 37a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 37e:	24 e0       	ldi	r18, 0x04	; 4
 380:	e2 9f       	mul	r30, r18
 382:	f0 01       	movw	r30, r0
 384:	11 24       	eor	r1, r1
 386:	e6 5d       	subi	r30, 0xD6	; 214
 388:	fd 4f       	sbci	r31, 0xFD	; 253
 38a:	82 81       	ldd	r24, Z+2	; 0x02
 38c:	08 2e       	mov	r0, r24
 38e:	00 0c       	add	r0, r0
 390:	99 0b       	sbc	r25, r25
 392:	0e 94 66 07 	call	0xecc	; 0xecc <StepperMotor_Rotate>
				white_counter += 1;
 396:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <white_counter>
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <white_counter>
				current_plate = WHITE;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
				break;
 3a6:	15 c0       	rjmp	.+42     	; 0x3d2 <main+0x260>
			
			case(BLACK):
				StepperMotor_Rotate(rotations[current_plate][BLACK]);
 3a8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	e8 9f       	mul	r30, r24
 3b0:	f0 01       	movw	r30, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	e6 5d       	subi	r30, 0xD6	; 214
 3b6:	fd 4f       	sbci	r31, 0xFD	; 253
 3b8:	80 81       	ld	r24, Z
 3ba:	08 2e       	mov	r0, r24
 3bc:	00 0c       	add	r0, r0
 3be:	99 0b       	sbc	r25, r25
 3c0:	0e 94 66 07 	call	0xecc	; 0xecc <StepperMotor_Rotate>
				black_counter += 1;
 3c4:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <black_counter>
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <black_counter>
				current_plate = BLACK;
 3ce:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <current_plate>
				break;
		}

		run_dc_motor();
 3d2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <run_dc_motor>

		// LCDWriteIntXY(0,0,STATE, 1);
		
		dequeue(&head, &tail, &rtnLink);
 3d6:	43 e0       	ldi	r20, 0x03	; 3
 3d8:	52 e0       	ldi	r21, 0x02	; 2
 3da:	66 e0       	ldi	r22, 0x06	; 6
 3dc:	72 e0       	ldi	r23, 0x02	; 2
 3de:	88 e0       	ldi	r24, 0x08	; 8
 3e0:	92 e0       	ldi	r25, 0x02	; 2
 3e2:	0e 94 ab 06 	call	0xd56	; 0xd56 <dequeue>
		free(rtnLink);
 3e6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rtnLink>
 3ea:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rtnLink+0x1>
 3ee:	0e 94 10 05 	call	0xa20	; 0xa20 <__simple_free>

		item_counter += 1;
 3f2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <item_counter>
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <item_counter>

		//Reset the state variable
		STATE = 0;
 3fc:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <STATE>
		goto POLLING_STAGE;
 400:	e6 ce       	rjmp	.-564    	; 0x1ce <main+0x5c>


	

	RESET:
		PORTL = 0xF0;
 402:	80 ef       	ldi	r24, 0xF0	; 240
 404:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		brake_dc_motor();
 408:	0e 94 ba 07 	call	0xf74	; 0xf74 <brake_dc_motor>

		/* Resetting all counters */
		clearQueue(&head, &tail);
 40c:	66 e0       	ldi	r22, 0x06	; 6
 40e:	72 e0       	ldi	r23, 0x02	; 2
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	92 e0       	ldi	r25, 0x02	; 2
 414:	0e 94 91 06 	call	0xd22	; 0xd22 <clearQueue>
		setup(&head, &tail);
 418:	66 e0       	ldi	r22, 0x06	; 6
 41a:	72 e0       	ldi	r23, 0x02	; 2
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	92 e0       	ldi	r25, 0x02	; 2
 420:	0e 94 90 07 	call	0xf20	; 0xf20 <setup>
		ADC_curr_min = 1023;
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ADC_curr_min+0x1>
 42c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ADC_curr_min>
		ADC_counter = 0;
 430:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <ADC_counter+0x1>
 434:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <ADC_counter>
		aluminum_counter = 0;
 438:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <aluminum_counter>
		steel_counter = 0;
 43c:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <steel_counter>
		black_counter = 0;
 440:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <black_counter>
		white_counter = 0;
 444:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <white_counter>
		INT1_counter = 0;
 448:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <INT1_counter>
		INT0_counter = 0;
 44c:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <INT0_counter>


	END:
		disable_adc();
 450:	0e 94 a9 07 	call	0xf52	; 0xf52 <disable_adc>
		disable_dc_motor();
 454:	0e 94 88 07 	call	0xf10	; 0xf10 <disable_dc_motor>
		cli();
 458:	f8 94       	cli

		for(int i = 0; i < 10; i++){
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	d0 e0       	ldi	r29, 0x00	; 0
 45e:	10 c0       	rjmp	.+32     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
			PORTL = 0xF0;
 460:	0b e0       	ldi	r16, 0x0B	; 11
 462:	11 e0       	ldi	r17, 0x01	; 1
 464:	80 ef       	ldi	r24, 0xF0	; 240
 466:	f8 01       	movw	r30, r16
 468:	80 83       	st	Z, r24
			mTimer(500);
 46a:	84 ef       	ldi	r24, 0xF4	; 244
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
			PORTL = 0x00;
 472:	f8 01       	movw	r30, r16
 474:	10 82       	st	Z, r1
			mTimer(500);
 476:	84 ef       	ldi	r24, 0xF4	; 244
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
	END:
		disable_adc();
		disable_dc_motor();
		cli();

		for(int i = 0; i < 10; i++){
 47e:	21 96       	adiw	r28, 0x01	; 1
 480:	ca 30       	cpi	r28, 0x0A	; 10
 482:	d1 05       	cpc	r29, r1
 484:	6c f3       	brlt	.-38     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			mTimer(500);
		}

	return(0);

}
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

Disassembly of section .text.__vector_default:

00000f84 <__vector_default>:

/* Interrupt Service Routine*/
EMPTY_INTERRUPT(BADISR_vect);
 f84:	18 95       	reti

Disassembly of section .text.__vector_29:

0000091a <__vector_29>:

ISR(ADC_vect){ //ADC conversion done
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	8f 93       	push	r24
 92a:	9f 93       	push	r25
	ADC_result = (ADCL >> 6) + (ADCH << 2);
 92c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 930:	22 95       	swap	r18
 932:	26 95       	lsr	r18
 934:	26 95       	lsr	r18
 936:	23 70       	andi	r18, 0x03	; 3
 938:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	88 0f       	add	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	88 0f       	add	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	82 0f       	add	r24, r18
 948:	91 1d       	adc	r25, r1
 94a:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ADC_result+0x1>
 94e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ADC_result>
	if(ADC_result < ADC_curr_min){
 952:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <ADC_result>
 956:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <ADC_result+0x1>
 95a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <ADC_curr_min>
 95e:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ADC_curr_min+0x1>
 962:	28 17       	cp	r18, r24
 964:	39 07       	cpc	r19, r25
 966:	40 f4       	brcc	.+16     	; 0x978 <__vector_29+0x5e>
		ADC_curr_min = ADC_result;
 968:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <ADC_result>
 96c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <ADC_result+0x1>
 970:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <ADC_curr_min+0x1>
 974:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <ADC_curr_min>
	}

	ADC_counter += 1;
 978:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <ADC_counter>
 97c:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <ADC_counter+0x1>
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <ADC_counter+0x1>
 986:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <ADC_counter>
	in_OR_flag = 1;
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <in_OR_flag>
}
 990:	9f 91       	pop	r25
 992:	8f 91       	pop	r24
 994:	3f 91       	pop	r19
 996:	2f 91       	pop	r18
 998:	0f 90       	pop	r0
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	0f 90       	pop	r0
 99e:	1f 90       	pop	r1
 9a0:	18 95       	reti

Disassembly of section .text.__vector_1:

00000d86 <__vector_1>:

/* Sensor INT */
ISR(INT0_vect){ // OR sensor is logic high when object in
 d86:	1f 92       	push	r1
 d88:	0f 92       	push	r0
 d8a:	0f b6       	in	r0, 0x3f	; 63
 d8c:	0f 92       	push	r0
 d8e:	11 24       	eor	r1, r1
 d90:	8f 93       	push	r24
	INT0_counter += 1;
 d92:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <INT0_counter>
 d96:	8f 5f       	subi	r24, 0xFF	; 255
 d98:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <INT0_counter>
	STATE = 1;
 d9c:	81 e0       	ldi	r24, 0x01	; 1
 d9e:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <STATE>
}
 da2:	8f 91       	pop	r24
 da4:	0f 90       	pop	r0
 da6:	0f be       	out	0x3f, r0	; 63
 da8:	0f 90       	pop	r0
 daa:	1f 90       	pop	r1
 dac:	18 95       	reti

Disassembly of section .text.__vector_2:

00000dae <__vector_2>:

ISR(INT1_vect){ //catch EX falling edge
 dae:	1f 92       	push	r1
 db0:	0f 92       	push	r0
 db2:	0f b6       	in	r0, 0x3f	; 63
 db4:	0f 92       	push	r0
 db6:	11 24       	eor	r1, r1
 db8:	8f 93       	push	r24
	INT1_counter += 1;
 dba:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <INT1_counter>
 dbe:	8f 5f       	subi	r24, 0xFF	; 255
 dc0:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <INT1_counter>
	STATE = 2; // bucket stage
 dc4:	82 e0       	ldi	r24, 0x02	; 2
 dc6:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <STATE>
}
 dca:	8f 91       	pop	r24
 dcc:	0f 90       	pop	r0
 dce:	0f be       	out	0x3f, r0	; 63
 dd0:	0f 90       	pop	r0
 dd2:	1f 90       	pop	r1
 dd4:	18 95       	reti

Disassembly of section .text.__vector_5:

00000b76 <__vector_5>:

/* Switches INT */
ISR(INT4_vect){
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	0b b6       	in	r0, 0x3b	; 59
 b82:	0f 92       	push	r0
 b84:	2f 93       	push	r18
 b86:	3f 93       	push	r19
 b88:	4f 93       	push	r20
 b8a:	5f 93       	push	r21
 b8c:	6f 93       	push	r22
 b8e:	7f 93       	push	r23
 b90:	8f 93       	push	r24
 b92:	9f 93       	push	r25
 b94:	af 93       	push	r26
 b96:	bf 93       	push	r27
 b98:	ef 93       	push	r30
 b9a:	ff 93       	push	r31
	mTimer(25);
 b9c:	89 e1       	ldi	r24, 0x19	; 25
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
	while(!SWITCH1);
 ba4:	60 9b       	sbis	0x0c, 0	; 12
 ba6:	fe cf       	rjmp	.-4      	; 0xba4 <__vector_5+0x2e>
	mTimer(25);
 ba8:	89 e1       	ldi	r24, 0x19	; 25
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
	STATE = 4; // reset
 bb0:	84 e0       	ldi	r24, 0x04	; 4
 bb2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <STATE>
}
 bb6:	ff 91       	pop	r31
 bb8:	ef 91       	pop	r30
 bba:	bf 91       	pop	r27
 bbc:	af 91       	pop	r26
 bbe:	9f 91       	pop	r25
 bc0:	8f 91       	pop	r24
 bc2:	7f 91       	pop	r23
 bc4:	6f 91       	pop	r22
 bc6:	5f 91       	pop	r21
 bc8:	4f 91       	pop	r20
 bca:	3f 91       	pop	r19
 bcc:	2f 91       	pop	r18
 bce:	0f 90       	pop	r0
 bd0:	0b be       	out	0x3b, r0	; 59
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

Disassembly of section .text.init_pwm:

00000e26 <init_pwm>:

/****** PWM ******/

void init_pwm(int num){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
 e26:	94 b5       	in	r25, 0x24	; 36
 e28:	93 60       	ori	r25, 0x03	; 3
 e2a:	94 bd       	out	0x24, r25	; 36
	
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
 e2c:	ee e6       	ldi	r30, 0x6E	; 110
 e2e:	f0 e0       	ldi	r31, 0x00	; 0
 e30:	90 81       	ld	r25, Z
 e32:	92 60       	ori	r25, 0x02	; 2
 e34:	90 83       	st	Z, r25
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
 e36:	94 b5       	in	r25, 0x24	; 36
 e38:	90 68       	ori	r25, 0x80	; 128
 e3a:	94 bd       	out	0x24, r25	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
 e3c:	95 b5       	in	r25, 0x25	; 37
 e3e:	92 60       	ori	r25, 0x02	; 2
 e40:	95 bd       	out	0x25, r25	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = num;
 e42:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
 e44:	84 b1       	in	r24, 0x04	; 4
 e46:	80 68       	ori	r24, 0x80	; 128
 e48:	84 b9       	out	0x04, r24	; 4
 e4a:	08 95       	ret

Disassembly of section .text.init_sensors:

00000e4c <init_sensors>:
#include "sensor.h"
#include "timer.h"

void init_sensors(){
  // OR
  EIMSK |= (_BV(INT0));
 e4c:	8d b3       	in	r24, 0x1d	; 29
 e4e:	81 60       	ori	r24, 0x01	; 1
 e50:	8d bb       	out	0x1d, r24	; 29
  EICRA |= (_BV(ISC01) | _BV(ISC00)); // rising edge
 e52:	e9 e6       	ldi	r30, 0x69	; 105
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	80 81       	ld	r24, Z
 e58:	83 60       	ori	r24, 0x03	; 3
 e5a:	80 83       	st	Z, r24

  // EX
  EIMSK |= (_BV(INT1));		
 e5c:	8d b3       	in	r24, 0x1d	; 29
 e5e:	82 60       	ori	r24, 0x02	; 2
 e60:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC11));  // falling edge
 e62:	80 81       	ld	r24, Z
 e64:	88 60       	ori	r24, 0x08	; 8
 e66:	80 83       	st	Z, r24

  // GPIO
  DDRB &= ~(_BV(DDB6) | _BV(DDB5) | _BV(DDB4));
 e68:	84 b1       	in	r24, 0x04	; 4
 e6a:	8f 78       	andi	r24, 0x8F	; 143
 e6c:	84 b9       	out	0x04, r24	; 4
 e6e:	08 95       	ret

Disassembly of section .text.init_stepper_motor:

00000bdc <init_stepper_motor>:
																												15, 14, 13, 12, 11, 10};
volatile unsigned int decel_speed[DECCEL_TOTAL_STEPS] = {11, 12, 13, 14, 16, 17, 18, 20};


/* Initialize Stepper Motor to Black */
void init_stepper_motor(){
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
 be0:	81 b1       	in	r24, 0x01	; 1
 be2:	8f 63       	ori	r24, 0x3F	; 63
 be4:	81 b9       	out	0x01, r24	; 1
	PORTL = 0xF0;
 be6:	80 ef       	ldi	r24, 0xF0	; 240
 be8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	int i = 0;
 bec:	c0 e0       	ldi	r28, 0x00	; 0
 bee:	d0 e0       	ldi	r29, 0x00	; 0

	while(HE){ // HE: active low
 bf0:	1a c0       	rjmp	.+52     	; 0xc26 <init_stepper_motor+0x4a>
		temp_step = i % 4;
 bf2:	ce 01       	movw	r24, r28
 bf4:	83 70       	andi	r24, 0x03	; 3
 bf6:	90 78       	andi	r25, 0x80	; 128
 bf8:	99 23       	and	r25, r25
 bfa:	24 f4       	brge	.+8      	; 0xc04 <init_stepper_motor+0x28>
 bfc:	01 97       	sbiw	r24, 0x01	; 1
 bfe:	8c 6f       	ori	r24, 0xFC	; 252
 c00:	9f 6f       	ori	r25, 0xFF	; 255
 c02:	01 96       	adiw	r24, 0x01	; 1
 c04:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 c08:	82 b1       	in	r24, 0x02	; 2
 c0a:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	e6 5b       	subi	r30, 0xB6	; 182
 c12:	fd 4f       	sbci	r31, 0xFD	; 253
 c14:	90 81       	ld	r25, Z
 c16:	80 7c       	andi	r24, 0xC0	; 192
 c18:	89 2b       	or	r24, r25
 c1a:	82 b9       	out	0x02, r24	; 2
		mTimer(18);
 c1c:	82 e1       	ldi	r24, 0x12	; 18
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
		i += 1;
 c24:	21 96       	adiw	r28, 0x01	; 1
void init_stepper_motor(){
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
	PORTL = 0xF0;
	int i = 0;

	while(HE){ // HE: active low
 c26:	1e 99       	sbic	0x03, 6	; 3
 c28:	e4 cf       	rjmp	.-56     	; 0xbf2 <init_stepper_motor+0x16>
		temp_step = i % 4;
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
		mTimer(18);
		i += 1;
	}
	current_step = temp_step;
 c2a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 c2e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>
}
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	08 95       	ret

Disassembly of section .text.StepperMotor_CW:

000007d4 <StepperMotor_CW>:
		StepperMotor_CW(-num_steps);
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
 7d4:	ef 92       	push	r14
 7d6:	ff 92       	push	r15
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 1; i < (num_steps+1); i++){
 7e2:	c1 e0       	ldi	r28, 0x01	; 1
 7e4:	d0 e0       	ldi	r29, 0x00	; 0
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
 7e6:	00 e0       	ldi	r16, 0x00	; 0
 7e8:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 1; i < (num_steps+1); i++){
 7ea:	42 c0       	rjmp	.+132    	; 0x870 <StepperMotor_CW+0x9c>
		temp_step = (current_step + i) % 4;
 7ec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <current_step>
 7f0:	9e 01       	movw	r18, r28
 7f2:	28 0f       	add	r18, r24
 7f4:	31 1d       	adc	r19, r1
 7f6:	c9 01       	movw	r24, r18
 7f8:	83 70       	andi	r24, 0x03	; 3
 7fa:	90 78       	andi	r25, 0x80	; 128
 7fc:	99 23       	and	r25, r25
 7fe:	24 f4       	brge	.+8      	; 0x808 <StepperMotor_CW+0x34>
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	8c 6f       	ori	r24, 0xFC	; 252
 804:	9f 6f       	ori	r25, 0xFF	; 255
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 80c:	82 b1       	in	r24, 0x02	; 2
 80e:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	e6 5b       	subi	r30, 0xB6	; 182
 816:	fd 4f       	sbci	r31, 0xFD	; 253
 818:	90 81       	ld	r25, Z
 81a:	80 7c       	andi	r24, 0xC0	; 192
 81c:	89 2b       	or	r24, r25
 81e:	82 b9       	out	0x02, r24	; 2

		// mTimer(18);

		/* Acceleration and Deceleration Profile */
		if((i-1) < ACCEL_TOTAL_STEPS){ 
 820:	ce 01       	movw	r24, r28
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	8b 30       	cpi	r24, 0x0B	; 11
 826:	91 05       	cpc	r25, r1
 828:	54 f4       	brge	.+20     	; 0x83e <StepperMotor_CW+0x6a>
			mTimer(accel_speed[i-1]);
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	fc 01       	movw	r30, r24
 830:	ec 5e       	subi	r30, 0xEC	; 236
 832:	fd 4f       	sbci	r31, 0xFD	; 253
 834:	80 81       	ld	r24, Z
 836:	91 81       	ldd	r25, Z+1	; 0x01
 838:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
 83c:	18 c0       	rjmp	.+48     	; 0x86e <StepperMotor_CW+0x9a>
		} else if ((i-1) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 83e:	97 01       	movw	r18, r14
 840:	29 50       	subi	r18, 0x09	; 9
 842:	31 09       	sbc	r19, r1
 844:	28 17       	cp	r18, r24
 846:	39 07       	cpc	r19, r25
 848:	64 f4       	brge	.+24     	; 0x862 <StepperMotor_CW+0x8e>
			mTimer(decel_speed[j]);
 84a:	f8 01       	movw	r30, r16
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	e6 5c       	subi	r30, 0xC6	; 198
 852:	fd 4f       	sbci	r31, 0xFD	; 253
 854:	80 81       	ld	r24, Z
 856:	91 81       	ldd	r25, Z+1	; 0x01
 858:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
			j += 1;
 85c:	0f 5f       	subi	r16, 0xFF	; 255
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	06 c0       	rjmp	.+12     	; 0x86e <StepperMotor_CW+0x9a>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 862:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <accel_speed+0x14>
 866:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <accel_speed+0x15>
 86a:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
	for(int i = 1; i < (num_steps+1); i++){
 86e:	21 96       	adiw	r28, 0x01	; 1
 870:	c7 01       	movw	r24, r14
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	c8 17       	cp	r28, r24
 876:	d9 07       	cpc	r29, r25
 878:	0c f4       	brge	.+2      	; 0x87c <StepperMotor_CW+0xa8>
 87a:	b8 cf       	rjmp	.-144    	; 0x7ec <StepperMotor_CW+0x18>
		}
		/* End of Accel/Deccel Profile */

	}
	
	current_step = temp_step;
 87c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 880:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>

}
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	ff 90       	pop	r15
 88e:	ef 90       	pop	r14
 890:	08 95       	ret

Disassembly of section .text.StepperMotor_CCW:

00000712 <StepperMotor_CCW>:

void StepperMotor_CCW(int num_steps){
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 2; i < (num_steps + 2); i++){
 720:	c2 e0       	ldi	r28, 0x02	; 2
 722:	d0 e0       	ldi	r29, 0x00	; 0
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
 724:	00 e0       	ldi	r16, 0x00	; 0
 726:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 2; i < (num_steps + 2); i++){
 728:	44 c0       	rjmp	.+136    	; 0x7b2 <StepperMotor_CCW+0xa0>
		temp_step = 3 - (current_step+i)%4;
 72a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <current_step>
 72e:	9e 01       	movw	r18, r28
 730:	28 0f       	add	r18, r24
 732:	31 1d       	adc	r19, r1
 734:	c9 01       	movw	r24, r18
 736:	83 70       	andi	r24, 0x03	; 3
 738:	90 78       	andi	r25, 0x80	; 128
 73a:	99 23       	and	r25, r25
 73c:	24 f4       	brge	.+8      	; 0x746 <StepperMotor_CCW+0x34>
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	8c 6f       	ori	r24, 0xFC	; 252
 742:	9f 6f       	ori	r25, 0xFF	; 255
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	93 e0       	ldi	r25, 0x03	; 3
 748:	98 1b       	sub	r25, r24
 74a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 74e:	82 b1       	in	r24, 0x02	; 2
 750:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	e6 5b       	subi	r30, 0xB6	; 182
 758:	fd 4f       	sbci	r31, 0xFD	; 253
 75a:	90 81       	ld	r25, Z
 75c:	80 7c       	andi	r24, 0xC0	; 192
 75e:	89 2b       	or	r24, r25
 760:	82 b9       	out	0x02, r24	; 2
		
		// mTimer(18);

		// /* Acceleration and Deceleration Profile */
		if((i-2) < ACCEL_TOTAL_STEPS){ 
 762:	ce 01       	movw	r24, r28
 764:	02 97       	sbiw	r24, 0x02	; 2
 766:	8b 30       	cpi	r24, 0x0B	; 11
 768:	91 05       	cpc	r25, r1
 76a:	54 f4       	brge	.+20     	; 0x780 <StepperMotor_CCW+0x6e>
			mTimer(accel_speed[i-2]);
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	fc 01       	movw	r30, r24
 772:	ec 5e       	subi	r30, 0xEC	; 236
 774:	fd 4f       	sbci	r31, 0xFD	; 253
 776:	80 81       	ld	r24, Z
 778:	91 81       	ldd	r25, Z+1	; 0x01
 77a:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
 77e:	18 c0       	rjmp	.+48     	; 0x7b0 <StepperMotor_CCW+0x9e>
		} else if ((i-2) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 780:	97 01       	movw	r18, r14
 782:	29 50       	subi	r18, 0x09	; 9
 784:	31 09       	sbc	r19, r1
 786:	28 17       	cp	r18, r24
 788:	39 07       	cpc	r19, r25
 78a:	64 f4       	brge	.+24     	; 0x7a4 <StepperMotor_CCW+0x92>
			mTimer(decel_speed[j]);
 78c:	f8 01       	movw	r30, r16
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	e6 5c       	subi	r30, 0xC6	; 198
 794:	fd 4f       	sbci	r31, 0xFD	; 253
 796:	80 81       	ld	r24, Z
 798:	91 81       	ldd	r25, Z+1	; 0x01
 79a:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>
			j += 1;
 79e:	0f 5f       	subi	r16, 0xFF	; 255
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <StepperMotor_CCW+0x9e>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 7a4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <accel_speed+0x14>
 7a8:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <accel_speed+0x15>
 7ac:	0e 94 1c 06 	call	0xc38	; 0xc38 <mTimer>

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
	for(int i = 2; i < (num_steps + 2); i++){
 7b0:	21 96       	adiw	r28, 0x01	; 1
 7b2:	c7 01       	movw	r24, r14
 7b4:	02 96       	adiw	r24, 0x02	; 2
 7b6:	c8 17       	cp	r28, r24
 7b8:	d9 07       	cpc	r29, r25
 7ba:	0c f4       	brge	.+2      	; 0x7be <StepperMotor_CCW+0xac>
 7bc:	b6 cf       	rjmp	.-148    	; 0x72a <StepperMotor_CCW+0x18>
		}
		/* End of Accel/Deccel Profile */			

	}

	current_step = temp_step;
 7be:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 7c2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>

 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	08 95       	ret

Disassembly of section .text.StepperMotor_Rotate:

00000ecc <StepperMotor_Rotate>:
	current_step = temp_step;
}


void StepperMotor_Rotate(int num_steps){
	if(num_steps > 0){
 ecc:	18 16       	cp	r1, r24
 ece:	19 06       	cpc	r1, r25
 ed0:	1c f4       	brge	.+6      	; 0xed8 <StepperMotor_Rotate+0xc>
		StepperMotor_CCW(num_steps);
 ed2:	0e 94 89 03 	call	0x712	; 0x712 <StepperMotor_CCW>
 ed6:	08 95       	ret
	} else if (num_steps < 0) {
 ed8:	99 23       	and	r25, r25
 eda:	2c f4       	brge	.+10     	; 0xee6 <StepperMotor_Rotate+0x1a>
		StepperMotor_CW(-num_steps);
 edc:	91 95       	neg	r25
 ede:	81 95       	neg	r24
 ee0:	91 09       	sbc	r25, r1
 ee2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <StepperMotor_CW>
 ee6:	08 95       	ret

Disassembly of section .text.mTimer:

00000c38 <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 c38:	e1 e8       	ldi	r30, 0x81	; 129
 c3a:	f0 e0       	ldi	r31, 0x00	; 0
 c3c:	20 81       	ld	r18, Z
 c3e:	2a 60       	ori	r18, 0x0A	; 10
 c40:	20 83       	st	Z, r18
	OCR1A = 0x03E8; // Set output compare register for 1000 ticks which equals to 1ms
 c42:	28 ee       	ldi	r18, 0xE8	; 232
 c44:	33 e0       	ldi	r19, 0x03	; 3
 c46:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 c4a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
 c4e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 c52:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 c56:	26 b3       	in	r18, 0x16	; 22
 c58:	22 60       	ori	r18, 0x02	; 2
 c5a:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 c5c:	20 e0       	ldi	r18, 0x00	; 0
 c5e:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 c60:	07 c0       	rjmp	.+14     	; 0xc70 <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 c62:	b1 9b       	sbis	0x16, 1	; 22
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 c66:	46 b3       	in	r20, 0x16	; 22
 c68:	42 60       	ori	r20, 0x02	; 2
 c6a:	46 bb       	out	0x16, r20	; 22
			i++;
 c6c:	2f 5f       	subi	r18, 0xFF	; 255
 c6e:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 c70:	28 17       	cp	r18, r24
 c72:	39 07       	cpc	r19, r25
 c74:	b4 f3       	brlt	.-20     	; 0xc62 <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
}
 c76:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000dd6 <__divmodhi4>:
 dd6:	97 fb       	bst	r25, 7
 dd8:	07 2e       	mov	r0, r23
 dda:	16 f4       	brtc	.+4      	; 0xde0 <__divmodhi4+0xa>
 ddc:	00 94       	com	r0
 dde:	07 d0       	rcall	.+14     	; 0xdee <__divmodhi4_neg1>
 de0:	77 fd       	sbrc	r23, 7
 de2:	09 d0       	rcall	.+18     	; 0xdf6 <__divmodhi4_neg2>
 de4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__udivmodhi4>
 de8:	07 fc       	sbrc	r0, 7
 dea:	05 d0       	rcall	.+10     	; 0xdf6 <__divmodhi4_neg2>
 dec:	3e f4       	brtc	.+14     	; 0xdfc <__divmodhi4_exit>

00000dee <__divmodhi4_neg1>:
 dee:	90 95       	com	r25
 df0:	81 95       	neg	r24
 df2:	9f 4f       	sbci	r25, 0xFF	; 255
 df4:	08 95       	ret

00000df6 <__divmodhi4_neg2>:
 df6:	70 95       	com	r23
 df8:	61 95       	neg	r22
 dfa:	7f 4f       	sbci	r23, 0xFF	; 255

00000dfc <__divmodhi4_exit>:
 dfc:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000dfe <__udivmodhi4>:
 dfe:	aa 1b       	sub	r26, r26
 e00:	bb 1b       	sub	r27, r27
 e02:	51 e1       	ldi	r21, 0x11	; 17
 e04:	07 c0       	rjmp	.+14     	; 0xe14 <__udivmodhi4_ep>

00000e06 <__udivmodhi4_loop>:
 e06:	aa 1f       	adc	r26, r26
 e08:	bb 1f       	adc	r27, r27
 e0a:	a6 17       	cp	r26, r22
 e0c:	b7 07       	cpc	r27, r23
 e0e:	10 f0       	brcs	.+4      	; 0xe14 <__udivmodhi4_ep>
 e10:	a6 1b       	sub	r26, r22
 e12:	b7 0b       	sbc	r27, r23

00000e14 <__udivmodhi4_ep>:
 e14:	88 1f       	adc	r24, r24
 e16:	99 1f       	adc	r25, r25
 e18:	5a 95       	dec	r21
 e1a:	a9 f7       	brne	.-22     	; 0xe06 <__udivmodhi4_loop>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	bc 01       	movw	r22, r24
 e22:	cd 01       	movw	r24, r26
 e24:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000f86 <_fini>:
 f86:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000f88 <__funcs_on_exit>:
 f88:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000f8a <__simulator_exit>:
 f8a:	08 95       	ret

Disassembly of section .text.exit:

00000ee8 <exit>:
 ee8:	ec 01       	movw	r28, r24
 eea:	0e 94 c4 07 	call	0xf88	; 0xf88 <__funcs_on_exit>
 eee:	0e 94 c3 07 	call	0xf86	; 0xf86 <_fini>
 ef2:	ce 01       	movw	r24, r28
 ef4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__simulator_exit>
 ef8:	ce 01       	movw	r24, r28
 efa:	0e 94 c0 07 	call	0xf80	; 0xf80 <_Exit>

Disassembly of section .text.__simple_search_fl:

00000494 <__simple_search_fl>:
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <__freelist>
 4a4:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <__freelist+0x1>
 4a8:	61 15       	cp	r22, r1
 4aa:	71 05       	cpc	r23, r1
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <__simple_search_fl+0x1c>
 4ae:	5b c0       	rjmp	.+182    	; 0x566 <__simple_search_fl+0xd2>
 4b0:	fb 01       	movw	r30, r22
 4b2:	a0 e0       	ldi	r26, 0x00	; 0
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	c0 e0       	ldi	r28, 0x00	; 0
 4bc:	d0 e0       	ldi	r29, 0x00	; 0
 4be:	00 81       	ld	r16, Z
 4c0:	11 81       	ldd	r17, Z+1	; 0x01
 4c2:	22 81       	ldd	r18, Z+2	; 0x02
 4c4:	33 81       	ldd	r19, Z+3	; 0x03
 4c6:	08 17       	cp	r16, r24
 4c8:	19 07       	cpc	r17, r25
 4ca:	71 f4       	brne	.+28     	; 0x4e8 <__simple_search_fl+0x54>
 4cc:	10 97       	sbiw	r26, 0x00	; 0
 4ce:	29 f0       	breq	.+10     	; 0x4da <__simple_search_fl+0x46>
 4d0:	13 96       	adiw	r26, 0x03	; 3
 4d2:	3c 93       	st	X, r19
 4d4:	2e 93       	st	-X, r18
 4d6:	12 97       	sbiw	r26, 0x02	; 2
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__simple_search_fl+0x4e>
 4da:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <__freelist+0x1>
 4de:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <__freelist>
 4e2:	cf 01       	movw	r24, r30
 4e4:	02 96       	adiw	r24, 0x02	; 2
 4e6:	41 c0       	rjmp	.+130    	; 0x56a <__simple_search_fl+0xd6>
 4e8:	80 17       	cp	r24, r16
 4ea:	91 07       	cpc	r25, r17
 4ec:	48 f4       	brcc	.+18     	; 0x500 <__simple_search_fl+0x6c>
 4ee:	20 97       	sbiw	r28, 0x00	; 0
 4f0:	29 f0       	breq	.+10     	; 0x4fc <__simple_search_fl+0x68>
 4f2:	e8 80       	ld	r14, Y
 4f4:	f9 80       	ldd	r15, Y+1	; 0x01
 4f6:	0e 15       	cp	r16, r14
 4f8:	1f 05       	cpc	r17, r15
 4fa:	10 f4       	brcc	.+4      	; 0x500 <__simple_search_fl+0x6c>
 4fc:	ad 01       	movw	r20, r26
 4fe:	ef 01       	movw	r28, r30
 500:	df 01       	movw	r26, r30
 502:	21 15       	cp	r18, r1
 504:	31 05       	cpc	r19, r1
 506:	11 f0       	breq	.+4      	; 0x50c <__simple_search_fl+0x78>
 508:	f9 01       	movw	r30, r18
 50a:	d9 cf       	rjmp	.-78     	; 0x4be <__simple_search_fl+0x2a>
 50c:	20 97       	sbiw	r28, 0x00	; 0
 50e:	59 f1       	breq	.+86     	; 0x566 <__simple_search_fl+0xd2>
 510:	0a 81       	ldd	r16, Y+2	; 0x02
 512:	1b 81       	ldd	r17, Y+3	; 0x03
 514:	fe 01       	movw	r30, r28
 516:	21 91       	ld	r18, Z+
 518:	31 91       	ld	r19, Z+
 51a:	28 1b       	sub	r18, r24
 51c:	39 0b       	sbc	r19, r25
 51e:	25 30       	cpi	r18, 0x05	; 5
 520:	31 05       	cpc	r19, r1
 522:	88 f0       	brcs	.+34     	; 0x546 <__simple_search_fl+0xb2>
 524:	99 83       	std	Y+1, r25	; 0x01
 526:	88 83       	st	Y, r24
 528:	df 01       	movw	r26, r30
 52a:	a8 0f       	add	r26, r24
 52c:	b9 1f       	adc	r27, r25
 52e:	22 50       	subi	r18, 0x02	; 2
 530:	31 09       	sbc	r19, r1
 532:	11 96       	adiw	r26, 0x01	; 1
 534:	3c 93       	st	X, r19
 536:	2e 93       	st	-X, r18
 538:	12 96       	adiw	r26, 0x02	; 2
 53a:	0c 93       	st	X, r16
 53c:	12 97       	sbiw	r26, 0x02	; 2
 53e:	13 96       	adiw	r26, 0x03	; 3
 540:	1c 93       	st	X, r17
 542:	13 97       	sbiw	r26, 0x03	; 3
 544:	8d 01       	movw	r16, r26
 546:	c6 17       	cp	r28, r22
 548:	d7 07       	cpc	r29, r23
 54a:	29 f4       	brne	.+10     	; 0x556 <__simple_search_fl+0xc2>
 54c:	00 93 52 02 	sts	0x0252, r16	; 0x800252 <__freelist>
 550:	10 93 53 02 	sts	0x0253, r17	; 0x800253 <__freelist+0x1>
 554:	06 c0       	rjmp	.+12     	; 0x562 <__simple_search_fl+0xce>
 556:	da 01       	movw	r26, r20
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	0c 93       	st	X, r16
 55c:	12 97       	sbiw	r26, 0x02	; 2
 55e:	13 96       	adiw	r26, 0x03	; 3
 560:	1c 93       	st	X, r17
 562:	cf 01       	movw	r24, r30
 564:	02 c0       	rjmp	.+4      	; 0x56a <__simple_search_fl+0xd6>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	e6 e0       	ldi	r30, 0x06	; 6
 570:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00000a20 <__simple_free>:
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	c9 f1       	breq	.+114    	; 0xa96 <__simple_free+0x76>
 a24:	fc 01       	movw	r30, r24
 a26:	32 97       	sbiw	r30, 0x02	; 2
 a28:	a0 91 52 02 	lds	r26, 0x0252	; 0x800252 <__freelist>
 a2c:	b0 91 53 02 	lds	r27, 0x0253	; 0x800253 <__freelist+0x1>
 a30:	10 97       	sbiw	r26, 0x00	; 0
 a32:	59 f1       	breq	.+86     	; 0xa8a <__simple_free+0x6a>
 a34:	40 81       	ld	r20, Z
 a36:	51 81       	ldd	r21, Z+1	; 0x01
 a38:	9c 01       	movw	r18, r24
 a3a:	24 0f       	add	r18, r20
 a3c:	35 1f       	adc	r19, r21
 a3e:	a2 17       	cp	r26, r18
 a40:	b3 07       	cpc	r27, r19
 a42:	79 f4       	brne	.+30     	; 0xa62 <__simple_free+0x42>
 a44:	12 96       	adiw	r26, 0x02	; 2
 a46:	8d 91       	ld	r24, X+
 a48:	9c 91       	ld	r25, X
 a4a:	13 97       	sbiw	r26, 0x03	; 3
 a4c:	93 83       	std	Z+3, r25	; 0x03
 a4e:	82 83       	std	Z+2, r24	; 0x02
 a50:	2d 91       	ld	r18, X+
 a52:	3c 91       	ld	r19, X
 a54:	ca 01       	movw	r24, r20
 a56:	82 0f       	add	r24, r18
 a58:	93 1f       	adc	r25, r19
 a5a:	02 96       	adiw	r24, 0x02	; 2
 a5c:	91 83       	std	Z+1, r25	; 0x01
 a5e:	80 83       	st	Z, r24
 a60:	16 c0       	rjmp	.+44     	; 0xa8e <__simple_free+0x6e>
 a62:	8d 91       	ld	r24, X+
 a64:	9c 91       	ld	r25, X
 a66:	11 97       	sbiw	r26, 0x01	; 1
 a68:	9c 01       	movw	r18, r24
 a6a:	2e 5f       	subi	r18, 0xFE	; 254
 a6c:	3f 4f       	sbci	r19, 0xFF	; 255
 a6e:	2a 0f       	add	r18, r26
 a70:	3b 1f       	adc	r19, r27
 a72:	e2 17       	cp	r30, r18
 a74:	f3 07       	cpc	r31, r19
 a76:	31 f4       	brne	.+12     	; 0xa84 <__simple_free+0x64>
 a78:	84 0f       	add	r24, r20
 a7a:	95 1f       	adc	r25, r21
 a7c:	02 96       	adiw	r24, 0x02	; 2
 a7e:	8d 93       	st	X+, r24
 a80:	9c 93       	st	X, r25
 a82:	08 95       	ret
 a84:	b3 83       	std	Z+3, r27	; 0x03
 a86:	a2 83       	std	Z+2, r26	; 0x02
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <__simple_free+0x6e>
 a8a:	13 82       	std	Z+3, r1	; 0x03
 a8c:	12 82       	std	Z+2, r1	; 0x02
 a8e:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__freelist+0x1>
 a92:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__freelist>
 a96:	08 95       	ret

Disassembly of section .text.__simple_malloc:

00000574 <__simple_malloc>:
 574:	a2 e0       	ldi	r26, 0x02	; 2
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	e0 ec       	ldi	r30, 0xC0	; 192
 57a:	f2 e0       	ldi	r31, 0x02	; 2
 57c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__prologue_saves__+0x14>
 580:	8c 01       	movw	r16, r24
 582:	80 e1       	ldi	r24, 0x10	; 16
 584:	95 e0       	ldi	r25, 0x05	; 5
 586:	01 15       	cp	r16, r1
 588:	11 05       	cpc	r17, r1
 58a:	09 f4       	brne	.+2      	; 0x58e <__simple_malloc+0x1a>
 58c:	55 c0       	rjmp	.+170    	; 0x638 <__simple_malloc+0xc4>
 58e:	89 2b       	or	r24, r25
 590:	79 f0       	breq	.+30     	; 0x5b0 <__simple_malloc+0x3c>
 592:	02 30       	cpi	r16, 0x02	; 2
 594:	11 05       	cpc	r17, r1
 596:	10 f4       	brcc	.+4      	; 0x59c <__simple_malloc+0x28>
 598:	02 e0       	ldi	r16, 0x02	; 2
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	c8 01       	movw	r24, r16
 59e:	0e 94 4a 02 	call	0x494	; 0x494 <__simple_search_fl>
 5a2:	00 97       	sbiw	r24, 0x00	; 0
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__simple_malloc+0x34>
 5a6:	4f c0       	rjmp	.+158    	; 0x646 <__simple_malloc+0xd2>
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	e9 2e       	mov	r14, r25
 5ac:	f1 2c       	mov	r15, r1
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__simple_malloc+0x44>
 5b0:	80 e1       	ldi	r24, 0x10	; 16
 5b2:	e8 2e       	mov	r14, r24
 5b4:	85 e0       	ldi	r24, 0x05	; 5
 5b6:	f8 2e       	mov	r15, r24
 5b8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <end.1483>
 5bc:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <end.1483+0x1>
 5c0:	20 91 56 02 	lds	r18, 0x0256	; 0x800256 <cur.1482>
 5c4:	30 91 57 02 	lds	r19, 0x0257	; 0x800257 <cur.1482+0x1>
 5c8:	82 1b       	sub	r24, r18
 5ca:	93 0b       	sbc	r25, r19
 5cc:	67 01       	movw	r12, r14
 5ce:	c0 0e       	add	r12, r16
 5d0:	d1 1e       	adc	r13, r17
 5d2:	80 17       	cp	r24, r16
 5d4:	91 07       	cpc	r25, r17
 5d6:	f0 f4       	brcc	.+60     	; 0x614 <__simple_malloc+0xa0>
 5d8:	da 82       	std	Y+2, r13	; 0x02
 5da:	c9 82       	std	Y+1, r12	; 0x01
 5dc:	ce 01       	movw	r24, r28
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	0e 94 84 05 	call	0xb08	; 0xb08 <__expand_heap>
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	19 f4       	brne	.+6      	; 0x5ee <__simple_malloc+0x7a>
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	2c c0       	rjmp	.+88     	; 0x646 <__simple_malloc+0xd2>
 5ee:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <end.1483>
 5f2:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <end.1483+0x1>
 5f6:	82 17       	cp	r24, r18
 5f8:	93 07       	cpc	r25, r19
 5fa:	21 f0       	breq	.+8      	; 0x604 <__simple_malloc+0x90>
 5fc:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <cur.1482+0x1>
 600:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <cur.1482>
 604:	29 81       	ldd	r18, Y+1	; 0x01
 606:	3a 81       	ldd	r19, Y+2	; 0x02
 608:	82 0f       	add	r24, r18
 60a:	93 1f       	adc	r25, r19
 60c:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <end.1483+0x1>
 610:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <end.1483>
 614:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <cur.1482>
 618:	f0 91 57 02 	lds	r31, 0x0257	; 0x800257 <cur.1482+0x1>
 61c:	cf 01       	movw	r24, r30
 61e:	e1 14       	cp	r14, r1
 620:	f1 04       	cpc	r15, r1
 622:	19 f0       	breq	.+6      	; 0x62a <__simple_malloc+0xb6>
 624:	02 96       	adiw	r24, 0x02	; 2
 626:	11 83       	std	Z+1, r17	; 0x01
 628:	00 83       	st	Z, r16
 62a:	ce 0e       	add	r12, r30
 62c:	df 1e       	adc	r13, r31
 62e:	d0 92 57 02 	sts	0x0257, r13	; 0x800257 <cur.1482+0x1>
 632:	c0 92 56 02 	sts	0x0256, r12	; 0x800256 <cur.1482>
 636:	07 c0       	rjmp	.+14     	; 0x646 <__simple_malloc+0xd2>
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	09 f0       	breq	.+2      	; 0x63e <__simple_malloc+0xca>
 63c:	ad cf       	rjmp	.-166    	; 0x598 <__simple_malloc+0x24>
 63e:	7c 01       	movw	r14, r24
 640:	01 e0       	ldi	r16, 0x01	; 1
 642:	10 e0       	ldi	r17, 0x00	; 0
 644:	b9 cf       	rjmp	.-142    	; 0x5b8 <__simple_malloc+0x44>
 646:	22 96       	adiw	r28, 0x02	; 2
 648:	e8 e0       	ldi	r30, 0x08	; 8
 64a:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

00000f80 <_Exit>:
 f80:	0e 94 b7 00 	call	0x16e	; 0x16e <_exit>

Disassembly of section .text.__expand_heap:

00000b08 <__expand_heap>:
 b08:	fc 01       	movw	r30, r24
 b0a:	40 81       	ld	r20, Z
 b0c:	51 81       	ldd	r21, Z+1	; 0x01
 b0e:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__brkval>
 b12:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__brkval+0x1>
 b16:	89 2b       	or	r24, r25
 b18:	41 f4       	brne	.+16     	; 0xb2a <__expand_heap+0x22>
 b1a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__malloc_heap_start>
 b1e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__malloc_heap_start+0x1>
 b22:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__brkval+0x1>
 b26:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__brkval>
 b2a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__malloc_heap_end>
 b2e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <__malloc_heap_end+0x1>
 b32:	00 97       	sbiw	r24, 0x00	; 0
 b34:	19 f4       	brne	.+6      	; 0xb3c <__expand_heap+0x34>
 b36:	8d b7       	in	r24, 0x3d	; 61
 b38:	9e b7       	in	r25, 0x3e	; 62
 b3a:	80 97       	sbiw	r24, 0x20	; 32
 b3c:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <__brkval>
 b40:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <__brkval+0x1>
 b44:	28 17       	cp	r18, r24
 b46:	39 07       	cpc	r19, r25
 b48:	48 f0       	brcs	.+18     	; 0xb5c <__expand_heap+0x54>
 b4a:	8c e0       	ldi	r24, 0x0C	; 12
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__errno_val+0x1>
 b52:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__errno_val>
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	08 95       	ret
 b5c:	82 1b       	sub	r24, r18
 b5e:	93 0b       	sbc	r25, r19
 b60:	84 17       	cp	r24, r20
 b62:	95 07       	cpc	r25, r21
 b64:	90 f3       	brcs	.-28     	; 0xb4a <__expand_heap+0x42>
 b66:	42 0f       	add	r20, r18
 b68:	53 1f       	adc	r21, r19
 b6a:	50 93 59 02 	sts	0x0259, r21	; 0x800259 <__brkval+0x1>
 b6e:	40 93 58 02 	sts	0x0258, r20	; 0x800258 <__brkval>
 b72:	c9 01       	movw	r24, r18
 b74:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000cb4 <__prologue_saves__>:
 cb4:	2f 92       	push	r2
 cb6:	3f 92       	push	r3
 cb8:	4f 92       	push	r4
 cba:	5f 92       	push	r5
 cbc:	6f 92       	push	r6
 cbe:	7f 92       	push	r7
 cc0:	8f 92       	push	r8
 cc2:	9f 92       	push	r9
 cc4:	af 92       	push	r10
 cc6:	bf 92       	push	r11
 cc8:	cf 92       	push	r12
 cca:	df 92       	push	r13
 ccc:	ef 92       	push	r14
 cce:	ff 92       	push	r15
 cd0:	0f 93       	push	r16
 cd2:	1f 93       	push	r17
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	cd b7       	in	r28, 0x3d	; 61
 cda:	de b7       	in	r29, 0x3e	; 62
 cdc:	ca 1b       	sub	r28, r26
 cde:	db 0b       	sbc	r29, r27
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	f8 94       	cli
 ce4:	de bf       	out	0x3e, r29	; 62
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	cd bf       	out	0x3d, r28	; 61
 cea:	19 94       	eijmp

Disassembly of section .text.libgcc.prologue:

00000cec <__epilogue_restores__>:
 cec:	2a 88       	ldd	r2, Y+18	; 0x12
 cee:	39 88       	ldd	r3, Y+17	; 0x11
 cf0:	48 88       	ldd	r4, Y+16	; 0x10
 cf2:	5f 84       	ldd	r5, Y+15	; 0x0f
 cf4:	6e 84       	ldd	r6, Y+14	; 0x0e
 cf6:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf8:	8c 84       	ldd	r8, Y+12	; 0x0c
 cfa:	9b 84       	ldd	r9, Y+11	; 0x0b
 cfc:	aa 84       	ldd	r10, Y+10	; 0x0a
 cfe:	b9 84       	ldd	r11, Y+9	; 0x09
 d00:	c8 84       	ldd	r12, Y+8	; 0x08
 d02:	df 80       	ldd	r13, Y+7	; 0x07
 d04:	ee 80       	ldd	r14, Y+6	; 0x06
 d06:	fd 80       	ldd	r15, Y+5	; 0x05
 d08:	0c 81       	ldd	r16, Y+4	; 0x04
 d0a:	1b 81       	ldd	r17, Y+3	; 0x03
 d0c:	aa 81       	ldd	r26, Y+2	; 0x02
 d0e:	b9 81       	ldd	r27, Y+1	; 0x01
 d10:	ce 0f       	add	r28, r30
 d12:	d1 1d       	adc	r29, r1
 d14:	0f b6       	in	r0, 0x3f	; 63
 d16:	f8 94       	cli
 d18:	de bf       	out	0x3e, r29	; 62
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	cd bf       	out	0x3d, r28	; 61
 d1e:	ed 01       	movw	r28, r26
 d20:	08 95       	ret
