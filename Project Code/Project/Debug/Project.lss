
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000012ca  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800200  00800200  000012ca  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003aa0  00000000  00000000  00001533  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012cc  00000000  00000000  00004fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001397  00000000  00000000  0000629f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00007638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00007ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f75  00000000  00000000  00007fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00008f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00001126  00001126  0000127a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000090ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000001c  0000105a  0000105a  000011ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000c  000010d8  000010d8  0000122c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.stop_conversion 0000000c  000010e4  000010e4  00001238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.free_running_adc 0000000c  000010f0  000010f0  00001244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.disable_adc 0000000c  000010fc  000010fc  00001250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.enable_adc 0000000c  00001108  00001108  0000125c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.disable_dc_motor 00000010  000010ba  000010ba  0000120e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.run_dc_motor 0000000a  00001114  00001114  00001268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.brake_dc_motor 00000008  0000111e  0000111e  00001272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.init_dc_motor 00000022  0000101a  0000101a  0000116e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.LCDBusyLoop 0000007e  00000b4c  00000b4c  00000ca0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDByte 00000070  00000c42  00000c42  00000d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.InitLCD 00000088  00000a3c  00000a3c  00000b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCDWriteInt 000000c4  00000978  00000978  00000acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.LCDGotoXY 00000012  000010a8  000010a8  000011fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.setup   0000000e  000010ca  000010ca  0000121e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.initLink 0000001e  0000103c  0000103c  00001190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.enqueue 0000003c  00000e22  00000e22  00000f76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.dequeue 00000030  00000f00  00000f00  00001054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.clearQueue 00000034  00000ecc  00000ecc  00001020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.main    00000474  00000172  00000172  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_default 00000002  0000112e  0000112e  00001282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_29 00000088  00000ac4  00000ac4  00000c18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_1 00000028  00000f30  00000f30  00001084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_2 00000028  00000f58  00000f58  000010ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_5 00000066  00000d20  00000d20  00000e74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .data.rotations 00000010  00800230  0000114c  000012a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .bss.black_counter 00000001  00800264  00800264  000012ca  2**0
                  ALLOC
 43 .bss.white_counter 00000001  00800265  00800265  000012ca  2**0
                  ALLOC
 44 .bss.steel_counter 00000001  00800266  00800266  000012ca  2**0
                  ALLOC
 45 .bss.aluminum_counter 00000001  00800267  00800267  000012ca  2**0
                  ALLOC
 46 .bss.item_counter 00000001  00800268  00800268  000012ca  2**0
                  ALLOC
 47 .bss.ADC_counter 00000002  00800254  00800254  000012ca  2**0
                  ALLOC
 48 .bss.INT1_counter 00000001  00800269  00800269  000012ca  2**0
                  ALLOC
 49 .bss.INT0_counter 00000001  0080026a  0080026a  000012ca  2**0
                  ALLOC
 50 .bss.in_OR_flag 00000001  0080026b  0080026b  000012ca  2**0
                  ALLOC
 51 .bss.STATE    00000001  0080026c  0080026c  000012ca  2**0
                  ALLOC
 52 .data.ADC_curr_min 00000002  00800256  00001170  000012c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 53 .text.init_pwm 00000026  00000fd0  00000fd0  00001124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.init_sensors 00000024  00000ff6  00000ff6  0000114a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.init_stepper_motor 0000005c  00000d86  00000d86  00000eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.StepperMotor_CW 000000ea  000006d4  000006d4  00000828  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.StepperMotor_CCW 000000ee  000005e6  000005e6  0000073a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.StepperMotor_Rotate 0000001c  00001076  00001076  000011ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .data.decel_speed 00000010  00800240  0000115c  000012b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 60 .data.accel_speed 00000016  0080021a  00001136  0000128a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 61 .data.steps   00000004  00800250  0000116c  000012c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 62 .text.mTimer  00000040  00000de2  00000de2  00000f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.div 00000028  00000f80  00000f80  000010d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.div 00000028  00000fa8  00000fa8  000010fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__dummy_fini 00000002  00001130  00001130  00001284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__dummy_funcs_on_exit 00000002  00001132  00001132  00001286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__dummy_simulator_exit 00000002  00001134  00001134  00001288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.exit    00000016  00001092  00001092  000011e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__simple_search_fl 000000e0  000007be  000007be  00000912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__simple_free 00000078  00000bca  00000bca  00000d1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .bss.__freelist 00000002  00800258  00800258  000012ca  2**0
                  ALLOC
 72 .text.__simple_malloc 000000da  0000089e  0000089e  000009f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .bss.end.1483 00000002  0080025a  0080025a  000012ca  2**0
                  ALLOC
 74 .bss.cur.1482 00000002  0080025c  0080025c  000012ca  2**0
                  ALLOC
 75 .text._Exit   00000004  0000112a  0000112a  0000127e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__expand_heap 0000006e  00000cb2  00000cb2  00000e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.__brkval 00000002  0080025e  0080025e  000012ca  2**0
                  ALLOC
 78 .data.__malloc_heap_end 00000002  00800260  00001172  000012c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 79 .data.__malloc_heap_start 00000002  00800262  00001174  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 80 .text.libgcc.prologue 00000038  00000e5e  00000e5e  00000fb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.libgcc.prologue 00000036  00000e96  00000e96  00000fea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
   4:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_1>
   8:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_2>
   c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  10:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  14:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_5>
  18:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  1c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  20:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  24:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  28:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  2c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  30:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  34:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  38:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  3c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  40:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  44:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  48:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  4c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  50:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  54:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  58:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  5c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  60:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  64:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  68:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  6c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  70:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  74:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__vector_29>
  78:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  7c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  80:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  84:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  88:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  8c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  90:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  94:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  98:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  9c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  a0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  a4:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  a8:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  ac:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  b0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  b4:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  b8:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  bc:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  c0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  c4:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  c8:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  cc:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  d0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  d4:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  d8:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  dc:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>
  e0:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 1a       	sub	r0, r18
  e8:	80 02       	muls	r24, r16
  ea:	1a 02       	muls	r17, r26
  ec:	54 00       	.word	0x0054	; ????
  ee:	11 36       	cpi	r17, 0x61	; 97
  f0:	02 54       	subi	r16, 0x42	; 66
  f2:	02 56       	subi	r16, 0x62	; 98
  f4:	80 02       	muls	r24, r16
  f6:	56 02       	muls	r21, r22
  f8:	58 00       	.word	0x0058	; ????
  fa:	11 70       	andi	r17, 0x01	; 1
  fc:	02 58       	subi	r16, 0x82	; 130
  fe:	02 60       	ori	r16, 0x02	; 2
 100:	80 02       	muls	r24, r16
 102:	60 02       	muls	r22, r16
 104:	64 00       	.word	0x0064	; ????
 106:	11 72       	andi	r17, 0x21	; 33
 108:	02 64       	ori	r16, 0x42	; 66
 10a:	02 6d       	ori	r16, 0xD2	; 210
 10c:	80 00       	.word	0x0080	; ????

0000010e <__trampolines_start>:
 10e:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__simple_malloc+0xc>
 112:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__simple_free>

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d1 e2       	ldi	r29, 0x21	; 33
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
 126:	e4 ee       	ldi	r30, 0xE4	; 228
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	19 c0       	rjmp	.+50     	; 0x160 <__do_clear_bss+0x8>
 12e:	b7 91       	elpm	r27, Z+
 130:	a7 91       	elpm	r26, Z+
 132:	37 91       	elpm	r19, Z+
 134:	27 91       	elpm	r18, Z+
 136:	07 91       	elpm	r16, Z+
 138:	07 fd       	sbrc	r16, 7
 13a:	0e c0       	rjmp	.+28     	; 0x158 <__do_clear_bss>
 13c:	97 91       	elpm	r25, Z+
 13e:	87 91       	elpm	r24, Z+
 140:	ef 01       	movw	r28, r30
 142:	f9 2f       	mov	r31, r25
 144:	e8 2f       	mov	r30, r24
 146:	0b bf       	out	0x3b, r16	; 59
 148:	07 90       	elpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x22>
 152:	fe 01       	movw	r30, r28
 154:	1b be       	out	0x3b, r1	; 59
 156:	04 c0       	rjmp	.+8      	; 0x160 <__do_clear_bss+0x8>

00000158 <__do_clear_bss>:
 158:	1d 92       	st	X+, r1
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e1 f7       	brne	.-8      	; 0x158 <__do_clear_bss>
 160:	ed 30       	cpi	r30, 0x0D	; 13
 162:	f4 07       	cpc	r31, r20
 164:	21 f7       	brne	.-56     	; 0x12e <__do_copy_data+0x8>
 166:	0e 94 b9 00 	call	0x172	; 0x172 <_etext>
 16a:	0c 94 49 08 	jmp	0x1092	; 0x1092 <exit>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

Disassembly of section .text:

00001126 <__bad_interrupt>:
    1126:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_default>

Disassembly of section .text.init_adc:

0000105a <init_adc>:
#include <avr/interrupt.h>

/* Initialize ADC in one conversion mode */
void init_adc(){	
	/* Config ADC: default ADC input is ADC0 in PORTF 0 (Single Conversion) */
	ADCSRA |= _BV(ADEN);					// enable ADC | ADEN: ADC Enable
    105a:	ea e7       	ldi	r30, 0x7A	; 122
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);					// enable interrupt of ADC | ADIE: ADC Interrupt enable (raised when conversion done)
    1064:	80 81       	ld	r24, Z
    1066:	88 60       	ori	r24, 0x08	; 8
    1068:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0);		// ADLAR: ADC Left adjust result | REFS0: AVCC with external capacitor at AREF pin
    106a:	ec e7       	ldi	r30, 0x7C	; 124
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 66       	ori	r24, 0x60	; 96
    1072:	80 83       	st	Z, r24
    1074:	08 95       	ret

Disassembly of section .text.start_conversion:

000010d8 <start_conversion>:
} // end init_adc

/* Start ADC Conversion */
void start_conversion(){
	/* Initialize ADC and start one conversion at the beginning */
	ADCSRA |= _BV(ADSC);					// ADSC: ADC Start Conversion Bit
    10d8:	ea e7       	ldi	r30, 0x7A	; 122
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	80 64       	ori	r24, 0x40	; 64
    10e0:	80 83       	st	Z, r24
    10e2:	08 95       	ret

Disassembly of section .text.stop_conversion:

000010e4 <stop_conversion>:
} // end start_adc

/* Stop ADC Conversion */
void stop_conversion(){
	ADCSRA &= ~(_BV(ADSC));				// clear ADSC
    10e4:	ea e7       	ldi	r30, 0x7A	; 122
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 7b       	andi	r24, 0xBF	; 191
    10ec:	80 83       	st	Z, r24
    10ee:	08 95       	ret

Disassembly of section .text.free_running_adc:

000010f0 <free_running_adc>:
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
    10f0:	ea e7       	ldi	r30, 0x7A	; 122
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	80 83       	st	Z, r24
    10fa:	08 95       	ret

Disassembly of section .text.disable_adc:

000010fc <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
    10fc:	ea e7       	ldi	r30, 0x7A	; 122
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8f 77       	andi	r24, 0x7F	; 127
    1104:	80 83       	st	Z, r24
    1106:	08 95       	ret

Disassembly of section .text.enable_adc:

00001108 <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
    1108:	ea e7       	ldi	r30, 0x7A	; 122
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	80 83       	st	Z, r24
    1112:	08 95       	ret

Disassembly of section .text.disable_dc_motor:

000010ba <disable_dc_motor>:
	brake_dc_motor();
}

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
    10ba:	85 b1       	in	r24, 0x05	; 5
    10bc:	80 7f       	andi	r24, 0xF0	; 240
    10be:	85 b9       	out	0x05, r24	; 5
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
    10c0:	85 e0       	ldi	r24, 0x05	; 5
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
    10c8:	08 95       	ret

Disassembly of section .text.run_dc_motor:

00001114 <run_dc_motor>:
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
    1114:	85 b1       	in	r24, 0x05	; 5
    1116:	80 7f       	andi	r24, 0xF0	; 240
    1118:	8b 60       	ori	r24, 0x0B	; 11
    111a:	85 b9       	out	0x05, r24	; 5
    111c:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

0000111e <brake_dc_motor>:
	//PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
    111e:	85 b1       	in	r24, 0x05	; 5
    1120:	8f 60       	ori	r24, 0x0F	; 15
    1122:	85 b9       	out	0x05, r24	; 5
    1124:	08 95       	ret

Disassembly of section .text.init_dc_motor:

0000101a <init_dc_motor>:


/* Initialize DC motor */
void init_dc_motor(){
	// Enable switch button interrupt
	EIMSK |= (_BV(INT4));
    101a:	8d b3       	in	r24, 0x1d	; 29
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC41));		// falling edge trigger
    1020:	ea e6       	ldi	r30, 0x6A	; 106
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	80 83       	st	Z, r24

	// GPIO
	DDRE &= ~(_BV(PE1) | _BV(PE0)); // used as input
    102a:	8d b1       	in	r24, 0x0d	; 13
    102c:	8c 7f       	andi	r24, 0xFC	; 252
    102e:	8d b9       	out	0x0d, r24	; 13

	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
    1030:	84 b1       	in	r24, 0x04	; 4
    1032:	8f 60       	ori	r24, 0x0F	; 15
    1034:	84 b9       	out	0x04, r24	; 4
	//PORTB = (PORTB & 0xF0) | DC_Brake;							// motor driver enable pins	& brake to Vcc
	brake_dc_motor();
    1036:	0e 94 8f 08 	call	0x111e	; 0x111e <brake_dc_motor>
    103a:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

00000b4c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 b4c:	87 b1       	in	r24, 0x07	; 7
 b4e:	80 7f       	andi	r24, 0xF0	; 240
 b50:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 b52:	88 b1       	in	r24, 0x08	; 8
 b54:	80 62       	ori	r24, 0x20	; 32
 b56:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 b58:	88 b1       	in	r24, 0x08	; 8
 b5a:	8f 7b       	andi	r24, 0xBF	; 191
 b5c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b5e:	82 e0       	ldi	r24, 0x02	; 2
 b60:	8a 95       	dec	r24
 b62:	f1 f7       	brne	.-4      	; 0xb60 <LCDBusyLoop+0x14>
 b64:	00 c0       	rjmp	.+0      	; 0xb66 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 b66:	88 b1       	in	r24, 0x08	; 8
 b68:	80 68       	ori	r24, 0x80	; 128
 b6a:	88 b9       	out	0x08, r24	; 8
 b6c:	92 e0       	ldi	r25, 0x02	; 2
 b6e:	9a 95       	dec	r25
 b70:	f1 f7       	brne	.-4      	; 0xb6e <LCDBusyLoop+0x22>
 b72:	00 c0       	rjmp	.+0      	; 0xb74 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 b74:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 b76:	82 95       	swap	r24
 b78:	80 7f       	andi	r24, 0xF0	; 240
 b7a:	92 e0       	ldi	r25, 0x02	; 2
 b7c:	9a 95       	dec	r25
 b7e:	f1 f7       	brne	.-4      	; 0xb7c <LCDBusyLoop+0x30>
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 b82:	98 b1       	in	r25, 0x08	; 8
 b84:	9f 77       	andi	r25, 0x7F	; 127
 b86:	98 b9       	out	0x08, r25	; 8
 b88:	95 e0       	ldi	r25, 0x05	; 5
 b8a:	9a 95       	dec	r25
 b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCDBusyLoop+0x3e>
 b8e:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 b90:	98 b1       	in	r25, 0x08	; 8
 b92:	90 68       	ori	r25, 0x80	; 128
 b94:	98 b9       	out	0x08, r25	; 8
 b96:	92 e0       	ldi	r25, 0x02	; 2
 b98:	9a 95       	dec	r25
 b9a:	f1 f7       	brne	.-4      	; 0xb98 <LCDBusyLoop+0x4c>
 b9c:	00 c0       	rjmp	.+0      	; 0xb9e <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 b9e:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 ba0:	80 78       	andi	r24, 0x80	; 128
 ba2:	92 e0       	ldi	r25, 0x02	; 2
 ba4:	9a 95       	dec	r25
 ba6:	f1 f7       	brne	.-4      	; 0xba4 <LCDBusyLoop+0x58>
 ba8:	00 c0       	rjmp	.+0      	; 0xbaa <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 baa:	98 b1       	in	r25, 0x08	; 8
 bac:	9f 77       	andi	r25, 0x7F	; 127
 bae:	98 b9       	out	0x08, r25	; 8
 bb0:	95 e0       	ldi	r25, 0x05	; 5
 bb2:	9a 95       	dec	r25
 bb4:	f1 f7       	brne	.-4      	; 0xbb2 <LCDBusyLoop+0x66>
 bb6:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 bb8:	81 11       	cpse	r24, r1
 bba:	d5 cf       	rjmp	.-86     	; 0xb66 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 bbc:	88 b1       	in	r24, 0x08	; 8
 bbe:	8f 7d       	andi	r24, 0xDF	; 223
 bc0:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 bc2:	87 b1       	in	r24, 0x07	; 7
 bc4:	8f 60       	ori	r24, 0x0F	; 15
 bc6:	87 b9       	out	0x07, r24	; 7
 bc8:	08 95       	ret

Disassembly of section .text.LCDByte:

00000c42 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 c42:	28 2f       	mov	r18, r24
 c44:	22 95       	swap	r18
 c46:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 c48:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 c4a:	61 11       	cpse	r22, r1
 c4c:	04 c0       	rjmp	.+8      	; 0xc56 <LCDByte+0x14>
	CLEAR_RS();
 c4e:	98 b1       	in	r25, 0x08	; 8
 c50:	9f 7b       	andi	r25, 0xBF	; 191
 c52:	98 b9       	out	0x08, r25	; 8
 c54:	03 c0       	rjmp	.+6      	; 0xc5c <LCDByte+0x1a>
else
	SET_RS();
 c56:	98 b1       	in	r25, 0x08	; 8
 c58:	90 64       	ori	r25, 0x40	; 64
 c5a:	98 b9       	out	0x08, r25	; 8
 c5c:	92 e0       	ldi	r25, 0x02	; 2
 c5e:	9a 95       	dec	r25
 c60:	f1 f7       	brne	.-4      	; 0xc5e <LCDByte+0x1c>
 c62:	00 c0       	rjmp	.+0      	; 0xc64 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 c64:	98 b1       	in	r25, 0x08	; 8
 c66:	90 68       	ori	r25, 0x80	; 128
 c68:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 c6a:	98 b1       	in	r25, 0x08	; 8
 c6c:	90 7f       	andi	r25, 0xF0	; 240
 c6e:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 c70:	98 b9       	out	0x08, r25	; 8
 c72:	95 e0       	ldi	r25, 0x05	; 5
 c74:	9a 95       	dec	r25
 c76:	f1 f7       	brne	.-4      	; 0xc74 <LCDByte+0x32>
 c78:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 c7a:	98 b1       	in	r25, 0x08	; 8
 c7c:	9f 77       	andi	r25, 0x7F	; 127
 c7e:	98 b9       	out	0x08, r25	; 8
 c80:	95 e0       	ldi	r25, 0x05	; 5
 c82:	9a 95       	dec	r25
 c84:	f1 f7       	brne	.-4      	; 0xc82 <LCDByte+0x40>
 c86:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 c88:	98 b1       	in	r25, 0x08	; 8
 c8a:	90 68       	ori	r25, 0x80	; 128
 c8c:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 c8e:	98 b1       	in	r25, 0x08	; 8
 c90:	90 7f       	andi	r25, 0xF0	; 240
 c92:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 c94:	88 b9       	out	0x08, r24	; 8
 c96:	85 e0       	ldi	r24, 0x05	; 5
 c98:	8a 95       	dec	r24
 c9a:	f1 f7       	brne	.-4      	; 0xc98 <LCDByte+0x56>
 c9c:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 c9e:	88 b1       	in	r24, 0x08	; 8
 ca0:	8f 77       	andi	r24, 0x7F	; 127
 ca2:	88 b9       	out	0x08, r24	; 8
 ca4:	95 e0       	ldi	r25, 0x05	; 5
 ca6:	9a 95       	dec	r25
 ca8:	f1 f7       	brne	.-4      	; 0xca6 <LCDByte+0x64>
 caa:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 cac:	0e 94 a6 05 	call	0xb4c	; 0xb4c <LCDBusyLoop>
 cb0:	08 95       	ret

Disassembly of section .text.InitLCD:

00000a3c <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 a3c:	cf 93       	push	r28
 a3e:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a40:	2f ef       	ldi	r18, 0xFF	; 255
 a42:	86 e7       	ldi	r24, 0x76	; 118
 a44:	91 e0       	ldi	r25, 0x01	; 1
 a46:	21 50       	subi	r18, 0x01	; 1
 a48:	80 40       	sbci	r24, 0x00	; 0
 a4a:	90 40       	sbci	r25, 0x00	; 0
 a4c:	e1 f7       	brne	.-8      	; 0xa46 <InitLCD+0xa>
 a4e:	00 c0       	rjmp	.+0      	; 0xa50 <InitLCD+0x14>
 a50:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 a52:	87 b1       	in	r24, 0x07	; 7
 a54:	8f 60       	ori	r24, 0x0F	; 15
 a56:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 a58:	87 b1       	in	r24, 0x07	; 7
 a5a:	80 68       	ori	r24, 0x80	; 128
 a5c:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 a5e:	87 b1       	in	r24, 0x07	; 7
 a60:	80 64       	ori	r24, 0x40	; 64
 a62:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 a64:	87 b1       	in	r24, 0x07	; 7
 a66:	80 62       	ori	r24, 0x20	; 32
 a68:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 a6a:	88 b1       	in	r24, 0x08	; 8
 a6c:	80 7f       	andi	r24, 0xF0	; 240
 a6e:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 a70:	88 b1       	in	r24, 0x08	; 8
 a72:	8f 77       	andi	r24, 0x7F	; 127
 a74:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 a76:	88 b1       	in	r24, 0x08	; 8
 a78:	8f 7d       	andi	r24, 0xDF	; 223
 a7a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 a7c:	88 b1       	in	r24, 0x08	; 8
 a7e:	8f 7b       	andi	r24, 0xBF	; 191
 a80:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a82:	00 c0       	rjmp	.+0      	; 0xa84 <InitLCD+0x48>
 a84:	00 c0       	rjmp	.+0      	; 0xa86 <InitLCD+0x4a>
 a86:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 a88:	88 b1       	in	r24, 0x08	; 8
 a8a:	80 68       	ori	r24, 0x80	; 128
 a8c:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 a8e:	88 b1       	in	r24, 0x08	; 8
 a90:	82 60       	ori	r24, 0x02	; 2
 a92:	88 b9       	out	0x08, r24	; 8
 a94:	25 e0       	ldi	r18, 0x05	; 5
 a96:	2a 95       	dec	r18
 a98:	f1 f7       	brne	.-4      	; 0xa96 <InitLCD+0x5a>
 a9a:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 a9c:	88 b1       	in	r24, 0x08	; 8
 a9e:	8f 77       	andi	r24, 0x7F	; 127
 aa0:	88 b9       	out	0x08, r24	; 8
 aa2:	85 e0       	ldi	r24, 0x05	; 5
 aa4:	8a 95       	dec	r24
 aa6:	f1 f7       	brne	.-4      	; 0xaa4 <InitLCD+0x68>
 aa8:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 aaa:	0e 94 a6 05 	call	0xb4c	; 0xb4c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	8c 2f       	mov	r24, r28
 ab2:	8c 60       	ori	r24, 0x0C	; 12
 ab4:	0e 94 21 06 	call	0xc42	; 0xc42 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	88 e2       	ldi	r24, 0x28	; 40
 abc:	0e 94 21 06 	call	0xc42	; 0xc42 <LCDByte>
}
 ac0:	cf 91       	pop	r28
 ac2:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

00000978 <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 978:	ef 92       	push	r14
 97a:	ff 92       	push	r15
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	00 d0       	rcall	.+0      	; 0x986 <LCDWriteInt+0xe>
 986:	0f 92       	push	r0
 988:	0f 92       	push	r0
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 990:	fe 01       	movw	r30, r28
 992:	31 96       	adiw	r30, 0x01	; 1
 994:	25 e0       	ldi	r18, 0x05	; 5
 996:	df 01       	movw	r26, r30
 998:	1d 92       	st	X+, r1
 99a:	2a 95       	dec	r18
 99c:	e9 f7       	brne	.-6      	; 0x998 <LCDWriteInt+0x20>
	int i=4,j=0;
 99e:	24 e0       	ldi	r18, 0x04	; 4
 9a0:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 9a2:	0f c0       	rjmp	.+30     	; 0x9c2 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 9a4:	6a e0       	ldi	r22, 0x0A	; 10
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divmodhi4>
 9ac:	e1 e0       	ldi	r30, 0x01	; 1
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	ec 0f       	add	r30, r28
 9b2:	fd 1f       	adc	r31, r29
 9b4:	e2 0f       	add	r30, r18
 9b6:	f3 1f       	adc	r31, r19
 9b8:	80 83       	st	Z, r24
	val=val/10;
 9ba:	86 2f       	mov	r24, r22
 9bc:	97 2f       	mov	r25, r23
	i--;
 9be:	21 50       	subi	r18, 0x01	; 1
 9c0:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	79 f7       	brne	.-34     	; 0x9a4 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 9c6:	bf ef       	ldi	r27, 0xFF	; 255
 9c8:	eb 16       	cp	r14, r27
 9ca:	fb 06       	cpc	r15, r27
 9cc:	81 f4       	brne	.+32     	; 0x9ee <LCDWriteInt+0x76>
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 9d0:	0f 5f       	subi	r16, 0xFF	; 255
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <LCDWriteInt+0x62>
 9d6:	00 e0       	ldi	r16, 0x00	; 0
 9d8:	10 e0       	ldi	r17, 0x00	; 0
 9da:	e1 e0       	ldi	r30, 0x01	; 1
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	ec 0f       	add	r30, r28
 9e0:	fd 1f       	adc	r31, r29
 9e2:	e0 0f       	add	r30, r16
 9e4:	f1 1f       	adc	r31, r17
 9e6:	20 81       	ld	r18, Z
 9e8:	22 23       	and	r18, r18
 9ea:	91 f3       	breq	.-28     	; 0x9d0 <LCDWriteInt+0x58>
 9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 9ee:	05 e0       	ldi	r16, 0x05	; 5
 9f0:	10 e0       	ldi	r17, 0x00	; 0
 9f2:	0e 19       	sub	r16, r14
 9f4:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 9f6:	99 23       	and	r25, r25
 9f8:	94 f4       	brge	.+36     	; 0xa1e <LCDWriteInt+0xa6>
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	8d e2       	ldi	r24, 0x2D	; 45
 9fe:	0e 94 21 06 	call	0xc42	; 0xc42 <LCDByte>
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 a04:	e1 e0       	ldi	r30, 0x01	; 1
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	ec 0f       	add	r30, r28
 a0a:	fd 1f       	adc	r31, r29
 a0c:	e0 0f       	add	r30, r16
 a0e:	f1 1f       	adc	r31, r17
 a10:	80 81       	ld	r24, Z
 a12:	61 e0       	ldi	r22, 0x01	; 1
 a14:	80 5d       	subi	r24, 0xD0	; 208
 a16:	0e 94 21 06 	call	0xc42	; 0xc42 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 a1a:	0f 5f       	subi	r16, 0xFF	; 255
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
 a1e:	05 30       	cpi	r16, 0x05	; 5
 a20:	11 05       	cpc	r17, r1
 a22:	84 f3       	brlt	.-32     	; 0xa04 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	0f 90       	pop	r0
 a2a:	0f 90       	pop	r0
 a2c:	0f 90       	pop	r0
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	ff 90       	pop	r15
 a38:	ef 90       	pop	r14
 a3a:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

000010a8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
    10a8:	88 32       	cpi	r24, 0x28	; 40
    10aa:	30 f4       	brcc	.+12     	; 0x10b8 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
    10ac:	61 11       	cpse	r22, r1
    10ae:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	80 68       	ori	r24, 0x80	; 128
    10b4:	0e 94 21 06 	call	0xc42	; 0xc42 <LCDByte>
    10b8:	08 95       	ret

Disassembly of section .text.setup:

000010ca <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
    10ca:	fc 01       	movw	r30, r24
    10cc:	11 82       	std	Z+1, r1	; 0x01
    10ce:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
    10d0:	fb 01       	movw	r30, r22
    10d2:	11 82       	std	Z+1, r1	; 0x01
    10d4:	10 82       	st	Z, r1
    10d6:	08 95       	ret

Disassembly of section .text.initLink:

0000103c <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	ec 01       	movw	r28, r24
	//link *l;
	*newLink = malloc(sizeof(link));
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 4f 04 	call	0x89e	; 0x89e <__simple_malloc>
    104a:	99 83       	std	Y+1, r25	; 0x01
    104c:	88 83       	st	Y, r24
	(*newLink)->next = NULL;
    104e:	fc 01       	movw	r30, r24
    1050:	12 82       	std	Z+2, r1	; 0x02
    1052:	11 82       	std	Z+1, r1	; 0x01
	return;
}/*initLink*/
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

Disassembly of section .text.enqueue:

00000e22 <enqueue>:
* RETURNS: The element contained within the queue
*/
/* This simply allows you to peek at the head element of the queue and returns a NULL pointer if empty */
element firstValue(link **h){
	return((*h)->e);
}/*firstValue*/
 e22:	db 01       	movw	r26, r22
 e24:	ed 91       	ld	r30, X+
 e26:	fc 91       	ld	r31, X
 e28:	30 97       	sbiw	r30, 0x00	; 0
 e2a:	61 f0       	breq	.+24     	; 0xe44 <enqueue+0x22>
 e2c:	da 01       	movw	r26, r20
 e2e:	8d 91       	ld	r24, X+
 e30:	9c 91       	ld	r25, X
 e32:	11 97       	sbiw	r26, 0x01	; 1
 e34:	92 83       	std	Z+2, r25	; 0x02
 e36:	81 83       	std	Z+1, r24	; 0x01
 e38:	8d 91       	ld	r24, X+
 e3a:	9c 91       	ld	r25, X
 e3c:	fb 01       	movw	r30, r22
 e3e:	91 83       	std	Z+1, r25	; 0x01
 e40:	80 83       	st	Z, r24
 e42:	08 95       	ret
 e44:	da 01       	movw	r26, r20
 e46:	2d 91       	ld	r18, X+
 e48:	3c 91       	ld	r19, X
 e4a:	11 97       	sbiw	r26, 0x01	; 1
 e4c:	fc 01       	movw	r30, r24
 e4e:	31 83       	std	Z+1, r19	; 0x01
 e50:	20 83       	st	Z, r18
 e52:	8d 91       	ld	r24, X+
 e54:	9c 91       	ld	r25, X
 e56:	db 01       	movw	r26, r22
 e58:	8d 93       	st	X+, r24
 e5a:	9c 93       	st	X, r25
 e5c:	08 95       	ret

Disassembly of section .text.dequeue:

00000f00 <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **t, link **deQueuedLink){
 f00:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 f02:	80 81       	ld	r24, Z
 f04:	91 81       	ldd	r25, Z+1	; 0x01
 f06:	da 01       	movw	r26, r20
 f08:	8d 93       	st	X+, r24
 f0a:	9c 93       	st	X, r25
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 f0c:	a0 81       	ld	r26, Z
 f0e:	b1 81       	ldd	r27, Z+1	; 0x01
 f10:	10 97       	sbiw	r26, 0x00	; 0
 f12:	31 f0       	breq	.+12     	; 0xf20 <dequeue+0x20>
		*h = (*h)->next; // NULL when there's only 1 thing in the list	
 f14:	11 96       	adiw	r26, 0x01	; 1
 f16:	8d 91       	ld	r24, X+
 f18:	9c 91       	ld	r25, X
 f1a:	12 97       	sbiw	r26, 0x02	; 2
 f1c:	91 83       	std	Z+1, r25	; 0x01
 f1e:	80 83       	st	Z, r24
	}/*if*/
	if (*h == NULL){
 f20:	80 81       	ld	r24, Z
 f22:	91 81       	ldd	r25, Z+1	; 0x01
 f24:	89 2b       	or	r24, r25
 f26:	19 f4       	brne	.+6      	; 0xf2e <dequeue+0x2e>
		*t = NULL;
 f28:	fb 01       	movw	r30, r22
 f2a:	11 82       	std	Z+1, r1	; 0x01
 f2c:	10 82       	st	Z, r1
 f2e:	08 95       	ret

Disassembly of section .text.clearQueue:

00000ecc <clearQueue>:
/**************************************************************************************
* DESC: deallocates (frees) all the memory consumed by the Queue
* INPUT: the pointers to the head and the tail
*/
/* This clears the queue */
void clearQueue(link **h, link **t){
 ecc:	0f 93       	push	r16
 ece:	1f 93       	push	r17
 ed0:	cf 93       	push	r28
 ed2:	df 93       	push	r29
 ed4:	ec 01       	movw	r28, r24
 ed6:	8b 01       	movw	r16, r22

	link *temp;

	while (*h != NULL){
 ed8:	07 c0       	rjmp	.+14     	; 0xee8 <clearQueue+0x1c>
		temp = *h;
		*h=(*h)->next;
 eda:	fc 01       	movw	r30, r24
 edc:	21 81       	ldd	r18, Z+1	; 0x01
 ede:	32 81       	ldd	r19, Z+2	; 0x02
 ee0:	39 83       	std	Y+1, r19	; 0x01
 ee2:	28 83       	st	Y, r18
		free(temp);
 ee4:	0e 94 e5 05 	call	0xbca	; 0xbca <__simple_free>
/* This clears the queue */
void clearQueue(link **h, link **t){

	link *temp;

	while (*h != NULL){
 ee8:	88 81       	ld	r24, Y
 eea:	99 81       	ldd	r25, Y+1	; 0x01
 eec:	00 97       	sbiw	r24, 0x00	; 0
 eee:	a9 f7       	brne	.-22     	; 0xeda <clearQueue+0xe>
		*h=(*h)->next;
		free(temp);
	}/*while*/
	
	/* Last but not least set the tail to NULL */
	*t = NULL;		
 ef0:	f8 01       	movw	r30, r16
 ef2:	11 82       	std	Z+1, r1	; 0x01
 ef4:	10 82       	st	Z, r1

	return;
}/*clearQueue*/
 ef6:	df 91       	pop	r29
 ef8:	cf 91       	pop	r28
 efa:	1f 91       	pop	r17
 efc:	0f 91       	pop	r16
 efe:	08 95       	ret

Disassembly of section .text.main:

00000172 <main>:
link *rtnLink;		/* same as the above */
element eTest;		/* A variable to hold the aggregate data type known as element */			
/* End of Glabal Variables*/


int main(int argc, char *argv[]){
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
	CLKPR = 0x80;
 17a:	e1 e6       	ldi	r30, 0x61	; 97
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 e8       	ldi	r24, 0x80	; 128
 180:	80 83       	st	Z, r24
	CLKPR = 0x01;		//  sets system clock to 8MHz
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 83       	st	Z, r24

	STATE = 0;
 186:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <STATE>

	cli();		// Disables all interrupts
 18a:	f8 94       	cli
	
	DDRL = 0xF0; // for LED
 18c:	80 ef       	ldi	r24, 0xF0	; 240
 18e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>

	/* Initialize LCD */
	InitLCD(LS_BLINK|LS_ULINE);
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	0e 94 1e 05 	call	0xa3c	; 0xa3c <InitLCD>
	LCDClear();
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 21 06 	call	0xc42	; 0xc42 <LCDByte>
	
	/* Sensor */
	init_sensors();
 1a0:	0e 94 fb 07 	call	0xff6	; 0xff6 <init_sensors>

	/* Initialize ADC */
	init_adc();
 1a4:	0e 94 2d 08 	call	0x105a	; 0x105a <init_adc>
	free_running_adc();
 1a8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <free_running_adc>

	/* Initialize DC Motor */
	init_pwm(70);
 1ac:	86 e4       	ldi	r24, 0x46	; 70
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <init_pwm>
	init_dc_motor();
 1b4:	0e 94 0d 08 	call	0x101a	; 0x101a <init_dc_motor>

	/* Initialize Stepper Motor and Plate Position */
	init_stepper_motor();
 1b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <init_stepper_motor>
	current_plate = BLACK;
 1bc:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <current_plate>

	setup(&head, &tail);
 1c0:	6b e0       	ldi	r22, 0x0B	; 11
 1c2:	72 e0       	ldi	r23, 0x02	; 2
 1c4:	8d e0       	ldi	r24, 0x0D	; 13
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	0e 94 65 08 	call	0x10ca	; 0x10ca <setup>
	// LCDWriteStringXY(0, 0, "A");
	// LCDWriteStringXY(3, 0, "S");
	// LCDWriteStringXY(6, 0, "W");
	// LCDWriteStringXY(9, 0, "B");

	sei();
 1cc:	78 94       	sei

	goto POLLING_STAGE; // STATE = 0

	// POLLING STATE
	POLLING_STAGE:
		PORTL = 0x10;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		run_dc_motor();
 1d4:	0e 94 8a 08 	call	0x1114	; 0x1114 <run_dc_motor>

		LCDWriteIntXY(8,0,INT1_counter,2);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
 1e0:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <INT1_counter>
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 bc 04 	call	0x978	; 0x978 <LCDWriteInt>
		// LCDWriteIntXY(0, 1, aluminum_counter, 2);
		// LCDWriteIntXY(3, 1, steel_counter, 2);
		// LCDWriteIntXY(6, 1, white_counter, 2);
		// LCDWriteIntXY(9, 1, black_counter, 2);

		if(!OR && in_OR_flag){
 1ee:	1c 99       	sbic	0x03, 4	; 3
 1f0:	53 c0       	rjmp	.+166    	; 0x298 <main+0x126>
 1f2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <in_OR_flag>
 1f6:	88 23       	and	r24, r24
 1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0x8a>
 1fa:	4e c0       	rjmp	.+156    	; 0x298 <main+0x126>
			PORTL = 0x70;
 1fc:	80 e7       	ldi	r24, 0x70	; 112
 1fe:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			disable_adc();
 202:	0e 94 7e 08 	call	0x10fc	; 0x10fc <disable_adc>
			stop_conversion();
 206:	0e 94 72 08 	call	0x10e4	; 0x10e4 <stop_conversion>
			
			initLink(&newLink);
 20a:	84 e1       	ldi	r24, 0x14	; 20
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	0e 94 1e 08 	call	0x103c	; 0x103c <initLink>

			if(ADC_curr_min >= WHITE_BLACK_BOUND){
 212:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <ADC_curr_min>
 216:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ADC_curr_min+0x1>
 21a:	83 39       	cpi	r24, 0x93	; 147
 21c:	93 40       	sbci	r25, 0x03	; 3
 21e:	30 f0       	brcs	.+12     	; 0x22c <main+0xba>
				newLink->e.itemMaterial = BLACK; // 1
 220:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <newLink>
 224:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <newLink+0x1>
 228:	10 82       	st	Z, r1
 22a:	22 c0       	rjmp	.+68     	; 0x270 <main+0xfe>
				// LCDWriteStringXY(pos2, 0, "B");
			} else if(ADC_curr_min >= STEEL_WHITE_BOUND){
 22c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <ADC_curr_min>
 230:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ADC_curr_min+0x1>
 234:	8c 3b       	cpi	r24, 0xBC	; 188
 236:	92 40       	sbci	r25, 0x02	; 2
 238:	38 f0       	brcs	.+14     	; 0x248 <main+0xd6>
				newLink->e.itemMaterial = WHITE; // 3
 23a:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <newLink>
 23e:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <newLink+0x1>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 83       	st	Z, r24
 246:	14 c0       	rjmp	.+40     	; 0x270 <main+0xfe>
				// LCDWriteStringXY(pos2, 0, "W");
			} else if(ADC_curr_min >= ALUMINUM_STEEL_BOUND){
 248:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <ADC_curr_min>
 24c:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ADC_curr_min+0x1>
 250:	88 3c       	cpi	r24, 0xC8	; 200
 252:	91 05       	cpc	r25, r1
 254:	38 f0       	brcs	.+14     	; 0x264 <main+0xf2>
				newLink->e.itemMaterial = STEEL; // 2
 256:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <newLink>
 25a:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <newLink+0x1>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
 262:	06 c0       	rjmp	.+12     	; 0x270 <main+0xfe>
				// LCDWriteStringXY(pos2, 0, "S");
			} else {
				newLink->e.itemMaterial = ALUMINUM; // 4
 264:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <newLink>
 268:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <newLink+0x1>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	80 83       	st	Z, r24
				// LCDWriteStringXY(pos2, 0, "A");
			}
			
			enqueue(&head, &tail, &newLink);
 270:	44 e1       	ldi	r20, 0x14	; 20
 272:	52 e0       	ldi	r21, 0x02	; 2
 274:	6b e0       	ldi	r22, 0x0B	; 11
 276:	72 e0       	ldi	r23, 0x02	; 2
 278:	8d e0       	ldi	r24, 0x0D	; 13
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	0e 94 11 07 	call	0xe22	; 0xe22 <enqueue>

			// LCDWriteIntXY(10,1,ADC_counter,5);
			// LCDWriteIntXY(5,0,ADC_curr_min,4);

			ADC_curr_min = 1023;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	93 e0       	ldi	r25, 0x03	; 3
 284:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <ADC_curr_min+0x1>
 288:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <ADC_curr_min>
			ADC_counter = 0;
 28c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <ADC_counter+0x1>
 290:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <ADC_counter>
			in_OR_flag = 0;
 294:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <in_OR_flag>
		}

		if(item_counter == TOTAL_ITEM){
 298:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <item_counter>
 29c:	80 33       	cpi	r24, 0x30	; 48
 29e:	41 f4       	brne	.+16     	; 0x2b0 <main+0x13e>
			mTimer(200);
 2a0:	88 ec       	ldi	r24, 0xC8	; 200
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
			STATE = 5;
 2a8:	85 e0       	ldi	r24, 0x05	; 5
 2aa:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
			goto END;
 2ae:	79 c1       	rjmp	.+754    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
		}

		switch(STATE){
 2b0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <STATE>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	01 f1       	breq	.+64     	; 0x2f8 <main+0x186>
 2b8:	18 f4       	brcc	.+6      	; 0x2c0 <main+0x14e>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	41 f0       	breq	.+16     	; 0x2ce <main+0x15c>
 2be:	87 cf       	rjmp	.-242    	; 0x1ce <main+0x5c>
 2c0:	84 30       	cpi	r24, 0x04	; 4
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0x154>
 2c4:	47 c1       	rjmp	.+654    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 2c6:	85 30       	cpi	r24, 0x05	; 5
 2c8:	09 f4       	brne	.+2      	; 0x2cc <main+0x15a>
 2ca:	6b c1       	rjmp	.+726    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 2cc:	80 cf       	rjmp	.-256    	; 0x1ce <main+0x5c>
				goto POLLING_STAGE;
		}//switch STATE


	REFLECTIVE_STAGE: // STATE = 1
		PORTL = 0x20;
 2ce:	80 e2       	ldi	r24, 0x20	; 32
 2d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		LCDWriteIntXY(10,0,INT0_counter,2);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	8a e0       	ldi	r24, 0x0A	; 10
 2d8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
 2dc:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <INT0_counter>
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 bc 04 	call	0x978	; 0x978 <LCDWriteInt>

		enable_adc();
 2ea:	0e 94 84 08 	call	0x1108	; 0x1108 <enable_adc>
		start_conversion();
 2ee:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <start_conversion>
		
		//Reset the state variable
		STATE = 0;
 2f2:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <STATE>
		goto POLLING_STAGE;
 2f6:	6b cf       	rjmp	.-298    	; 0x1ce <main+0x5c>
	

	BUCKET_STAGE:  // STATE = 2
		PORTL = 0x40;
 2f8:	80 e4       	ldi	r24, 0x40	; 64
 2fa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		LCDWriteIntXY(14,0,INT1_counter,2);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	8e e0       	ldi	r24, 0x0E	; 14
 302:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
 306:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <INT1_counter>
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 bc 04 	call	0x978	; 0x978 <LCDWriteInt>

		brake_dc_motor();
 314:	0e 94 8f 08 	call	0x111e	; 0x111e <brake_dc_motor>

		LCDWriteIntXY(0,0,head->e.itemMaterial,1);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
 320:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <head>
 324:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <head+0x1>
 328:	80 81       	ld	r24, Z
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 bc 04 	call	0x978	; 0x978 <LCDWriteInt>
		LCDWriteIntXY(0,1,head->next->e.itemMaterial,1);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LCDGotoXY>
 33c:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <head>
 340:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <head+0x1>
 344:	01 80       	ldd	r0, Z+1	; 0x01
 346:	f2 81       	ldd	r31, Z+2	; 0x02
 348:	e0 2d       	mov	r30, r0
 34a:	80 81       	ld	r24, Z
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 bc 04 	call	0x978	; 0x978 <LCDWriteInt>

		extra_steps = 0;
 356:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <extra_steps>
		extra_plate = 0;
 35a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <extra_plate>
		extra_piece = 0;
 35e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <extra_piece>
// volatile signed char rotations[4][4] = {{0, DEG90, DEG180, NEG_DEG90}, 	// current plate black
// 																				{NEG_DEG90, 0, DEG90, DEG180}, 	// current plate aluminum
// 																			 	{DEG180, NEG_DEG90, 0 ,DEG90}, 	// current plate white
// 																			 	{DEG90, DEG180, NEG_DEG90, 0}}; // current plate steel

		if((head->e.itemMaterial-1) == head->next->e.itemMaterial){
 362:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <head>
 366:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <head+0x1>
 36a:	80 81       	ld	r24, Z
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	41 50       	subi	r20, 0x01	; 1
 372:	51 09       	sbc	r21, r1
 374:	a1 81       	ldd	r26, Z+1	; 0x01
 376:	b2 81       	ldd	r27, Z+2	; 0x02
 378:	2c 91       	ld	r18, X
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	42 17       	cp	r20, r18
 37e:	53 07       	cpc	r21, r19
 380:	59 f4       	brne	.+22     	; 0x398 <main+0x226>
			same_dir_flag = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <same_dir_flag>
			same_cw_flag = 1;
 388:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <same_cw_flag>
			extra_steps = NEG_DEG90;
 38c:	9e ec       	ldi	r25, 0xCE	; 206
 38e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <extra_steps>
			extra_piece = 1;
 392:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <extra_piece>
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <main+0x242>
		} else if ((head->e.itemMaterial+1) == head->next->e.itemMaterial){
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	28 17       	cp	r18, r24
 39c:	39 07       	cpc	r19, r25
 39e:	51 f4       	brne	.+20     	; 0x3b4 <main+0x242>
			same_dir_flag = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <same_dir_flag>
			same_ccw_flag = 1;
 3a6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <same_ccw_flag>
			extra_steps = DEG90;
 3aa:	92 e3       	ldi	r25, 0x32	; 50
 3ac:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <extra_steps>
			extra_piece = 1;
 3b0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <extra_piece>
		}

		switch(head->e.itemMaterial){
 3b4:	80 81       	ld	r24, Z
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	61 f1       	breq	.+88     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ba:	08 f4       	brcc	.+2      	; 0x3be <main+0x24c>
 3bc:	72 c0       	rjmp	.+228    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <main+0x252>
 3c2:	4b c0       	rjmp	.+150    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3c4:	83 30       	cpi	r24, 0x03	; 3
 3c6:	09 f0       	breq	.+2      	; 0x3ca <main+0x258>
 3c8:	8a c0       	rjmp	.+276    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			case(ALUMINUM):
				StepperMotor_Rotate(rotations[current_plate][ALUMINUM] + extra_steps);
 3ca:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <current_plate>
 3ce:	24 e0       	ldi	r18, 0x04	; 4
 3d0:	e2 9f       	mul	r30, r18
 3d2:	f0 01       	movw	r30, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	e0 5d       	subi	r30, 0xD0	; 208
 3d8:	fd 4f       	sbci	r31, 0xFD	; 253
 3da:	23 81       	ldd	r18, Z+3	; 0x03
 3dc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <extra_steps>
 3e0:	08 2e       	mov	r0, r24
 3e2:	00 0c       	add	r0, r0
 3e4:	99 0b       	sbc	r25, r25
 3e6:	82 0f       	add	r24, r18
 3e8:	91 1d       	adc	r25, r1
 3ea:	27 fd       	sbrc	r18, 7
 3ec:	9a 95       	dec	r25
 3ee:	0e 94 3b 08 	call	0x1076	; 0x1076 <StepperMotor_Rotate>
				aluminum_counter += 1;
 3f2:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <aluminum_counter>
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <aluminum_counter>
				current_plate = (ALUMINUM + extra_plate) % 4;
 3fc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <extra_plate>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	03 96       	adiw	r24, 0x03	; 3
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divmodhi4>
 40c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_plate>
				break;
 410:	66 c0       	rjmp	.+204    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			
			case(STEEL):
				StepperMotor_Rotate(rotations[current_plate][STEEL] + extra_steps);
 412:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <current_plate>
 416:	84 e0       	ldi	r24, 0x04	; 4
 418:	e8 9f       	mul	r30, r24
 41a:	f0 01       	movw	r30, r0
 41c:	11 24       	eor	r1, r1
 41e:	e0 5d       	subi	r30, 0xD0	; 208
 420:	fd 4f       	sbci	r31, 0xFD	; 253
 422:	21 81       	ldd	r18, Z+1	; 0x01
 424:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <extra_steps>
 428:	08 2e       	mov	r0, r24
 42a:	00 0c       	add	r0, r0
 42c:	99 0b       	sbc	r25, r25
 42e:	82 0f       	add	r24, r18
 430:	91 1d       	adc	r25, r1
 432:	27 fd       	sbrc	r18, 7
 434:	9a 95       	dec	r25
 436:	0e 94 3b 08 	call	0x1076	; 0x1076 <StepperMotor_Rotate>
				steel_counter += 1;
 43a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <steel_counter>
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <steel_counter>
				current_plate = (STEEL + extra_plate) % 4;
 444:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <extra_plate>
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	64 e0       	ldi	r22, 0x04	; 4
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divmodhi4>
 454:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_plate>
				break;
 458:	42 c0       	rjmp	.+132    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			
			case(WHITE):
				StepperMotor_Rotate(rotations[current_plate][WHITE] + extra_steps);
 45a:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <current_plate>
 45e:	24 e0       	ldi	r18, 0x04	; 4
 460:	e2 9f       	mul	r30, r18
 462:	f0 01       	movw	r30, r0
 464:	11 24       	eor	r1, r1
 466:	e0 5d       	subi	r30, 0xD0	; 208
 468:	fd 4f       	sbci	r31, 0xFD	; 253
 46a:	22 81       	ldd	r18, Z+2	; 0x02
 46c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <extra_steps>
 470:	08 2e       	mov	r0, r24
 472:	00 0c       	add	r0, r0
 474:	99 0b       	sbc	r25, r25
 476:	82 0f       	add	r24, r18
 478:	91 1d       	adc	r25, r1
 47a:	27 fd       	sbrc	r18, 7
 47c:	9a 95       	dec	r25
 47e:	0e 94 3b 08 	call	0x1076	; 0x1076 <StepperMotor_Rotate>
				white_counter += 1;
 482:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <white_counter>
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <white_counter>
				current_plate = (WHITE + extra_plate) % 4;
 48c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <extra_plate>
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 96       	adiw	r24, 0x02	; 2
 494:	64 e0       	ldi	r22, 0x04	; 4
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divmodhi4>
 49c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_plate>
				break;
 4a0:	1e c0       	rjmp	.+60     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			
			case(BLACK):
				StepperMotor_Rotate(rotations[current_plate][BLACK] + extra_steps);
 4a2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <current_plate>
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	e8 9f       	mul	r30, r24
 4aa:	f0 01       	movw	r30, r0
 4ac:	11 24       	eor	r1, r1
 4ae:	e0 5d       	subi	r30, 0xD0	; 208
 4b0:	fd 4f       	sbci	r31, 0xFD	; 253
 4b2:	20 81       	ld	r18, Z
 4b4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <extra_steps>
 4b8:	08 2e       	mov	r0, r24
 4ba:	00 0c       	add	r0, r0
 4bc:	99 0b       	sbc	r25, r25
 4be:	82 0f       	add	r24, r18
 4c0:	91 1d       	adc	r25, r1
 4c2:	27 fd       	sbrc	r18, 7
 4c4:	9a 95       	dec	r25
 4c6:	0e 94 3b 08 	call	0x1076	; 0x1076 <StepperMotor_Rotate>
				black_counter += 1;
 4ca:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <black_counter>
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <black_counter>
				current_plate = (BLACK + extra_plate) % 4;
 4d4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <extra_plate>
 4d8:	83 70       	andi	r24, 0x03	; 3
 4da:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <current_plate>
				break;
		}

		run_dc_motor();
 4de:	0e 94 8a 08 	call	0x1114	; 0x1114 <run_dc_motor>

		// LCDWriteIntXY(0,0,STATE, 1);
		
		dequeue(&head, &tail, &rtnLink);
 4e2:	47 e0       	ldi	r20, 0x07	; 7
 4e4:	52 e0       	ldi	r21, 0x02	; 2
 4e6:	6b e0       	ldi	r22, 0x0B	; 11
 4e8:	72 e0       	ldi	r23, 0x02	; 2
 4ea:	8d e0       	ldi	r24, 0x0D	; 13
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	0e 94 80 07 	call	0xf00	; 0xf00 <dequeue>
		free(rtnLink);
 4f2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <rtnLink>
 4f6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <rtnLink+0x1>
 4fa:	0e 94 e5 05 	call	0xbca	; 0xbca <__simple_free>

		if(same_dir_flag){
 4fe:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <same_dir_flag>
 502:	88 23       	and	r24, r24
 504:	a9 f0       	breq	.+42     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
			dequeue(&head, &tail, &rtnLink);
 506:	47 e0       	ldi	r20, 0x07	; 7
 508:	52 e0       	ldi	r21, 0x02	; 2
 50a:	6b e0       	ldi	r22, 0x0B	; 11
 50c:	72 e0       	ldi	r23, 0x02	; 2
 50e:	8d e0       	ldi	r24, 0x0D	; 13
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	0e 94 80 07 	call	0xf00	; 0xf00 <dequeue>
			free(rtnLink);
 516:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <rtnLink>
 51a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <rtnLink+0x1>
 51e:	0e 94 e5 05 	call	0xbca	; 0xbca <__simple_free>
			PORTL = 0xC0;
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			mTimer(1000);
 528:	88 ee       	ldi	r24, 0xE8	; 232
 52a:	93 e0       	ldi	r25, 0x03	; 3
 52c:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
		}

		item_counter += extra_piece + 1;
 530:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <extra_piece>
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <item_counter>
 53c:	89 0f       	add	r24, r25
 53e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <item_counter>
		same_dir_flag = 0;
 542:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <same_dir_flag>
		same_cw_flag = 0;
 546:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <same_cw_flag>
		same_ccw_flag = 0;
 54a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <same_ccw_flag>

		//Reset the state variable
		STATE = 0;
 54e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <STATE>
		goto POLLING_STAGE;
 552:	3d ce       	rjmp	.-902    	; 0x1ce <main+0x5c>


	

	RESET: // STATE = 4
		PORTL = 0xF0;
 554:	80 ef       	ldi	r24, 0xF0	; 240
 556:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		brake_dc_motor();
 55a:	0e 94 8f 08 	call	0x111e	; 0x111e <brake_dc_motor>

		/* Resetting all counters */
		clearQueue(&head, &tail);
 55e:	6b e0       	ldi	r22, 0x0B	; 11
 560:	72 e0       	ldi	r23, 0x02	; 2
 562:	8d e0       	ldi	r24, 0x0D	; 13
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	0e 94 66 07 	call	0xecc	; 0xecc <clearQueue>
		setup(&head, &tail);
 56a:	6b e0       	ldi	r22, 0x0B	; 11
 56c:	72 e0       	ldi	r23, 0x02	; 2
 56e:	8d e0       	ldi	r24, 0x0D	; 13
 570:	92 e0       	ldi	r25, 0x02	; 2
 572:	0e 94 65 08 	call	0x10ca	; 0x10ca <setup>
		ADC_curr_min = 1023;
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	93 e0       	ldi	r25, 0x03	; 3
 57a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <ADC_curr_min+0x1>
 57e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <ADC_curr_min>
		ADC_counter = 0;
 582:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <ADC_counter+0x1>
 586:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <ADC_counter>
		aluminum_counter = 0;
 58a:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <aluminum_counter>
		steel_counter = 0;
 58e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <steel_counter>
		black_counter = 0;
 592:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <black_counter>
		white_counter = 0;
 596:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <white_counter>
		INT1_counter = 0;
 59a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <INT1_counter>
		INT0_counter = 0;
 59e:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <INT0_counter>


	END: // STATE = 5
		disable_adc();
 5a2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <disable_adc>
		disable_dc_motor();
 5a6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <disable_dc_motor>
		cli();
 5aa:	f8 94       	cli

		for(int i = 0; i < 10; i++){
 5ac:	c0 e0       	ldi	r28, 0x00	; 0
 5ae:	d0 e0       	ldi	r29, 0x00	; 0
 5b0:	10 c0       	rjmp	.+32     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
			PORTL = 0xF0;
 5b2:	0b e0       	ldi	r16, 0x0B	; 11
 5b4:	11 e0       	ldi	r17, 0x01	; 1
 5b6:	80 ef       	ldi	r24, 0xF0	; 240
 5b8:	f8 01       	movw	r30, r16
 5ba:	80 83       	st	Z, r24
			mTimer(500);
 5bc:	84 ef       	ldi	r24, 0xF4	; 244
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
			PORTL = 0x00;
 5c4:	f8 01       	movw	r30, r16
 5c6:	10 82       	st	Z, r1
			mTimer(500);
 5c8:	84 ef       	ldi	r24, 0xF4	; 244
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
	END: // STATE = 5
		disable_adc();
		disable_dc_motor();
		cli();

		for(int i = 0; i < 10; i++){
 5d0:	21 96       	adiw	r28, 0x01	; 1
 5d2:	ca 30       	cpi	r28, 0x0A	; 10
 5d4:	d1 05       	cpc	r29, r1
 5d6:	6c f3       	brlt	.-38     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			mTimer(500);
		}

	return(0);

}
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	08 95       	ret

Disassembly of section .text.__vector_default:

0000112e <__vector_default>:

/* Interrupt Service Routine*/
EMPTY_INTERRUPT(BADISR_vect);
    112e:	18 95       	reti

Disassembly of section .text.__vector_29:

00000ac4 <__vector_29>:

ISR(ADC_vect){ //ADC conversion done
 ac4:	1f 92       	push	r1
 ac6:	0f 92       	push	r0
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	0f 92       	push	r0
 acc:	11 24       	eor	r1, r1
 ace:	2f 93       	push	r18
 ad0:	3f 93       	push	r19
 ad2:	8f 93       	push	r24
 ad4:	9f 93       	push	r25
	ADC_result = (ADCL >> 6) + (ADCH << 2);
 ad6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 ada:	22 95       	swap	r18
 adc:	26 95       	lsr	r18
 ade:	26 95       	lsr	r18
 ae0:	23 70       	andi	r18, 0x03	; 3
 ae2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	88 0f       	add	r24, r24
 aea:	99 1f       	adc	r25, r25
 aec:	88 0f       	add	r24, r24
 aee:	99 1f       	adc	r25, r25
 af0:	82 0f       	add	r24, r18
 af2:	91 1d       	adc	r25, r1
 af4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ADC_result+0x1>
 af8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_result>
	if(ADC_result < ADC_curr_min){
 afc:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <ADC_result>
 b00:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <ADC_result+0x1>
 b04:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <ADC_curr_min>
 b08:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ADC_curr_min+0x1>
 b0c:	28 17       	cp	r18, r24
 b0e:	39 07       	cpc	r19, r25
 b10:	40 f4       	brcc	.+16     	; 0xb22 <__vector_29+0x5e>
		ADC_curr_min = ADC_result;
 b12:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
 b16:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 b1a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <ADC_curr_min+0x1>
 b1e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <ADC_curr_min>
	}

	ADC_counter += 1;
 b22:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <ADC_counter>
 b26:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <ADC_counter+0x1>
 b2a:	01 96       	adiw	r24, 0x01	; 1
 b2c:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <ADC_counter+0x1>
 b30:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <ADC_counter>
	in_OR_flag = 1;
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <in_OR_flag>
}
 b3a:	9f 91       	pop	r25
 b3c:	8f 91       	pop	r24
 b3e:	3f 91       	pop	r19
 b40:	2f 91       	pop	r18
 b42:	0f 90       	pop	r0
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	0f 90       	pop	r0
 b48:	1f 90       	pop	r1
 b4a:	18 95       	reti

Disassembly of section .text.__vector_1:

00000f30 <__vector_1>:

/* Sensor INT */
ISR(INT0_vect){ // OR sensor is logic high when object in
 f30:	1f 92       	push	r1
 f32:	0f 92       	push	r0
 f34:	0f b6       	in	r0, 0x3f	; 63
 f36:	0f 92       	push	r0
 f38:	11 24       	eor	r1, r1
 f3a:	8f 93       	push	r24
	INT0_counter += 1;
 f3c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <INT0_counter>
 f40:	8f 5f       	subi	r24, 0xFF	; 255
 f42:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <INT0_counter>
	STATE = 1;
 f46:	81 e0       	ldi	r24, 0x01	; 1
 f48:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
}
 f4c:	8f 91       	pop	r24
 f4e:	0f 90       	pop	r0
 f50:	0f be       	out	0x3f, r0	; 63
 f52:	0f 90       	pop	r0
 f54:	1f 90       	pop	r1
 f56:	18 95       	reti

Disassembly of section .text.__vector_2:

00000f58 <__vector_2>:

ISR(INT1_vect){ //catch EX falling edge
 f58:	1f 92       	push	r1
 f5a:	0f 92       	push	r0
 f5c:	0f b6       	in	r0, 0x3f	; 63
 f5e:	0f 92       	push	r0
 f60:	11 24       	eor	r1, r1
 f62:	8f 93       	push	r24
	INT1_counter += 1;
 f64:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <INT1_counter>
 f68:	8f 5f       	subi	r24, 0xFF	; 255
 f6a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <INT1_counter>
	STATE = 2; // bucket stage
 f6e:	82 e0       	ldi	r24, 0x02	; 2
 f70:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
}
 f74:	8f 91       	pop	r24
 f76:	0f 90       	pop	r0
 f78:	0f be       	out	0x3f, r0	; 63
 f7a:	0f 90       	pop	r0
 f7c:	1f 90       	pop	r1
 f7e:	18 95       	reti

Disassembly of section .text.__vector_5:

00000d20 <__vector_5>:

/* Switches INT */
ISR(INT4_vect){
 d20:	1f 92       	push	r1
 d22:	0f 92       	push	r0
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	0f 92       	push	r0
 d28:	11 24       	eor	r1, r1
 d2a:	0b b6       	in	r0, 0x3b	; 59
 d2c:	0f 92       	push	r0
 d2e:	2f 93       	push	r18
 d30:	3f 93       	push	r19
 d32:	4f 93       	push	r20
 d34:	5f 93       	push	r21
 d36:	6f 93       	push	r22
 d38:	7f 93       	push	r23
 d3a:	8f 93       	push	r24
 d3c:	9f 93       	push	r25
 d3e:	af 93       	push	r26
 d40:	bf 93       	push	r27
 d42:	ef 93       	push	r30
 d44:	ff 93       	push	r31
	mTimer(25);
 d46:	89 e1       	ldi	r24, 0x19	; 25
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
	while(!SWITCH1);
 d4e:	60 9b       	sbis	0x0c, 0	; 12
 d50:	fe cf       	rjmp	.-4      	; 0xd4e <__vector_5+0x2e>
	mTimer(25);
 d52:	89 e1       	ldi	r24, 0x19	; 25
 d54:	90 e0       	ldi	r25, 0x00	; 0
 d56:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
	STATE = 4; // reset
 d5a:	84 e0       	ldi	r24, 0x04	; 4
 d5c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
}
 d60:	ff 91       	pop	r31
 d62:	ef 91       	pop	r30
 d64:	bf 91       	pop	r27
 d66:	af 91       	pop	r26
 d68:	9f 91       	pop	r25
 d6a:	8f 91       	pop	r24
 d6c:	7f 91       	pop	r23
 d6e:	6f 91       	pop	r22
 d70:	5f 91       	pop	r21
 d72:	4f 91       	pop	r20
 d74:	3f 91       	pop	r19
 d76:	2f 91       	pop	r18
 d78:	0f 90       	pop	r0
 d7a:	0b be       	out	0x3b, r0	; 59
 d7c:	0f 90       	pop	r0
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	0f 90       	pop	r0
 d82:	1f 90       	pop	r1
 d84:	18 95       	reti

Disassembly of section .text.init_pwm:

00000fd0 <init_pwm>:

/****** PWM ******/

void init_pwm(int num){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
 fd0:	94 b5       	in	r25, 0x24	; 36
 fd2:	93 60       	ori	r25, 0x03	; 3
 fd4:	94 bd       	out	0x24, r25	; 36
	
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
 fd6:	ee e6       	ldi	r30, 0x6E	; 110
 fd8:	f0 e0       	ldi	r31, 0x00	; 0
 fda:	90 81       	ld	r25, Z
 fdc:	92 60       	ori	r25, 0x02	; 2
 fde:	90 83       	st	Z, r25
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
 fe0:	94 b5       	in	r25, 0x24	; 36
 fe2:	90 68       	ori	r25, 0x80	; 128
 fe4:	94 bd       	out	0x24, r25	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
 fe6:	95 b5       	in	r25, 0x25	; 37
 fe8:	92 60       	ori	r25, 0x02	; 2
 fea:	95 bd       	out	0x25, r25	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = num;
 fec:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
 fee:	84 b1       	in	r24, 0x04	; 4
 ff0:	80 68       	ori	r24, 0x80	; 128
 ff2:	84 b9       	out	0x04, r24	; 4
 ff4:	08 95       	ret

Disassembly of section .text.init_sensors:

00000ff6 <init_sensors>:
#include "sensor.h"
#include "timer.h"

void init_sensors(){
  // OR
  EIMSK |= (_BV(INT0));
     ff6:	8d b3       	in	r24, 0x1d	; 29
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	8d bb       	out	0x1d, r24	; 29
  EICRA |= (_BV(ISC01) | _BV(ISC00)); // rising edge
     ffc:	e9 e6       	ldi	r30, 0x69	; 105
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	83 60       	ori	r24, 0x03	; 3
    1004:	80 83       	st	Z, r24

  // EX
  EIMSK |= (_BV(INT1));		
    1006:	8d b3       	in	r24, 0x1d	; 29
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC11));  // falling edge
    100c:	80 81       	ld	r24, Z
    100e:	88 60       	ori	r24, 0x08	; 8
    1010:	80 83       	st	Z, r24

  // GPIO
  DDRB &= ~(_BV(DDB6) | _BV(DDB5) | _BV(DDB4));
    1012:	84 b1       	in	r24, 0x04	; 4
    1014:	8f 78       	andi	r24, 0x8F	; 143
    1016:	84 b9       	out	0x04, r24	; 4
    1018:	08 95       	ret

Disassembly of section .text.init_stepper_motor:

00000d86 <init_stepper_motor>:
																												15, 14, 13, 12, 11, 10};
volatile unsigned int decel_speed[DECCEL_TOTAL_STEPS] = {11, 12, 13, 14, 16, 17, 18, 20};


/* Initialize Stepper Motor to Black */
void init_stepper_motor(){
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
 d8a:	81 b1       	in	r24, 0x01	; 1
 d8c:	8f 63       	ori	r24, 0x3F	; 63
 d8e:	81 b9       	out	0x01, r24	; 1
	PORTL = 0xF0;
 d90:	80 ef       	ldi	r24, 0xF0	; 240
 d92:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	int i = 0;
 d96:	c0 e0       	ldi	r28, 0x00	; 0
 d98:	d0 e0       	ldi	r29, 0x00	; 0

	while(HE){ // HE: active low
 d9a:	1a c0       	rjmp	.+52     	; 0xdd0 <init_stepper_motor+0x4a>
		temp_step = i % 4;
 d9c:	ce 01       	movw	r24, r28
 d9e:	83 70       	andi	r24, 0x03	; 3
 da0:	90 78       	andi	r25, 0x80	; 128
 da2:	99 23       	and	r25, r25
 da4:	24 f4       	brge	.+8      	; 0xdae <init_stepper_motor+0x28>
 da6:	01 97       	sbiw	r24, 0x01	; 1
 da8:	8c 6f       	ori	r24, 0xFC	; 252
 daa:	9f 6f       	ori	r25, 0xFF	; 255
 dac:	01 96       	adiw	r24, 0x01	; 1
 dae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 db2:	82 b1       	in	r24, 0x02	; 2
 db4:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <temp_step>
 db8:	f0 e0       	ldi	r31, 0x00	; 0
 dba:	e0 5b       	subi	r30, 0xB0	; 176
 dbc:	fd 4f       	sbci	r31, 0xFD	; 253
 dbe:	90 81       	ld	r25, Z
 dc0:	80 7c       	andi	r24, 0xC0	; 192
 dc2:	89 2b       	or	r24, r25
 dc4:	82 b9       	out	0x02, r24	; 2
		mTimer(18);
 dc6:	82 e1       	ldi	r24, 0x12	; 18
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
		i += 1;
 dce:	21 96       	adiw	r28, 0x01	; 1
void init_stepper_motor(){
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
	PORTL = 0xF0;
	int i = 0;

	while(HE){ // HE: active low
 dd0:	1e 99       	sbic	0x03, 6	; 3
 dd2:	e4 cf       	rjmp	.-56     	; 0xd9c <init_stepper_motor+0x16>
		temp_step = i % 4;
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
		mTimer(18);
		i += 1;
	}
	current_step = temp_step;
 dd4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <temp_step>
 dd8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <current_step>
}
 ddc:	df 91       	pop	r29
 dde:	cf 91       	pop	r28
 de0:	08 95       	ret

Disassembly of section .text.StepperMotor_CW:

000006d4 <StepperMotor_CW>:
		StepperMotor_CW(-num_steps);
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
 6d4:	cf 92       	push	r12
 6d6:	df 92       	push	r13
 6d8:	ef 92       	push	r14
 6da:	ff 92       	push	r15
 6dc:	0f 93       	push	r16
 6de:	1f 93       	push	r17
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 1; i < (num_steps+1); i++){
 6e6:	c1 e0       	ldi	r28, 0x01	; 1
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
 6ea:	00 e0       	ldi	r16, 0x00	; 0
 6ec:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 1; i < (num_steps+1); i++){
 6ee:	54 c0       	rjmp	.+168    	; 0x798 <StepperMotor_CW+0xc4>
		temp_step = (current_step + i) % 4;
 6f0:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <current_step>
 6f4:	9e 01       	movw	r18, r28
 6f6:	28 0f       	add	r18, r24
 6f8:	31 1d       	adc	r19, r1
 6fa:	c9 01       	movw	r24, r18
 6fc:	83 70       	andi	r24, 0x03	; 3
 6fe:	90 78       	andi	r25, 0x80	; 128
 700:	99 23       	and	r25, r25
 702:	24 f4       	brge	.+8      	; 0x70c <StepperMotor_CW+0x38>
 704:	01 97       	sbiw	r24, 0x01	; 1
 706:	8c 6f       	ori	r24, 0xFC	; 252
 708:	9f 6f       	ori	r25, 0xFF	; 255
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 710:	82 b1       	in	r24, 0x02	; 2
 712:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <temp_step>
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	e0 5b       	subi	r30, 0xB0	; 176
 71a:	fd 4f       	sbci	r31, 0xFD	; 253
 71c:	90 81       	ld	r25, Z
 71e:	80 7c       	andi	r24, 0xC0	; 192
 720:	89 2b       	or	r24, r25
 722:	82 b9       	out	0x02, r24	; 2

		// mTimer(18);

		/* Acceleration and Deceleration Profile */
		if((i-1) < ACCEL_TOTAL_STEPS){ 
 724:	6e 01       	movw	r12, r28
 726:	31 e0       	ldi	r19, 0x01	; 1
 728:	c3 1a       	sub	r12, r19
 72a:	d1 08       	sbc	r13, r1
 72c:	8b e0       	ldi	r24, 0x0B	; 11
 72e:	c8 16       	cp	r12, r24
 730:	d1 04       	cpc	r13, r1
 732:	54 f4       	brge	.+20     	; 0x748 <StepperMotor_CW+0x74>
			mTimer(accel_speed[i-1]);
 734:	f6 01       	movw	r30, r12
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	e6 5e       	subi	r30, 0xE6	; 230
 73c:	fd 4f       	sbci	r31, 0xFD	; 253
 73e:	80 81       	ld	r24, Z
 740:	91 81       	ldd	r25, Z+1	; 0x01
 742:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
 746:	17 c0       	rjmp	.+46     	; 0x776 <StepperMotor_CW+0xa2>
		} else if (((i-1) > (num_steps - DECCEL_TOTAL_STEPS - 1))) {
 748:	c7 01       	movw	r24, r14
 74a:	09 97       	sbiw	r24, 0x09	; 9
 74c:	8c 15       	cp	r24, r12
 74e:	9d 05       	cpc	r25, r13
 750:	64 f4       	brge	.+24     	; 0x76a <StepperMotor_CW+0x96>
			mTimer(decel_speed[j]);
 752:	f8 01       	movw	r30, r16
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	e0 5c       	subi	r30, 0xC0	; 192
 75a:	fd 4f       	sbci	r31, 0xFD	; 253
 75c:	80 81       	ld	r24, Z
 75e:	91 81       	ldd	r25, Z+1	; 0x01
 760:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
			j += 1;
 764:	0f 5f       	subi	r16, 0xFF	; 255
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	06 c0       	rjmp	.+12     	; 0x776 <StepperMotor_CW+0xa2>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 76a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <accel_speed+0x14>
 76e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <accel_speed+0x15>
 772:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
		}

		if (same_dir_flag && ((i-1) > (num_steps/2 - 15))){
 776:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <same_dir_flag>
 77a:	88 23       	and	r24, r24
 77c:	61 f0       	breq	.+24     	; 0x796 <StepperMotor_CW+0xc2>
 77e:	c7 01       	movw	r24, r14
 780:	ff 20       	and	r15, r15
 782:	0c f4       	brge	.+2      	; 0x786 <StepperMotor_CW+0xb2>
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	95 95       	asr	r25
 788:	87 95       	ror	r24
 78a:	0f 97       	sbiw	r24, 0x0f	; 15
 78c:	8c 15       	cp	r24, r12
 78e:	9d 05       	cpc	r25, r13
 790:	14 f4       	brge	.+4      	; 0x796 <StepperMotor_CW+0xc2>
			run_dc_motor();
 792:	0e 94 8a 08 	call	0x1114	; 0x1114 <run_dc_motor>
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
	for(int i = 1; i < (num_steps+1); i++){
 796:	21 96       	adiw	r28, 0x01	; 1
 798:	c7 01       	movw	r24, r14
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	c8 17       	cp	r28, r24
 79e:	d9 07       	cpc	r29, r25
 7a0:	0c f4       	brge	.+2      	; 0x7a4 <StepperMotor_CW+0xd0>
 7a2:	a6 cf       	rjmp	.-180    	; 0x6f0 <StepperMotor_CW+0x1c>

		/* End of Accel/Deccel Profile */

	}
	
	current_step = temp_step;
 7a4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <temp_step>
 7a8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <current_step>

}
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	cf 90       	pop	r12
 7bc:	08 95       	ret

Disassembly of section .text.StepperMotor_CCW:

000005e6 <StepperMotor_CCW>:

void StepperMotor_CCW(int num_steps){
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 2; i < (num_steps + 2); i++){
 5f8:	c2 e0       	ldi	r28, 0x02	; 2
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
 5fc:	00 e0       	ldi	r16, 0x00	; 0
 5fe:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 2; i < (num_steps + 2); i++){
 600:	56 c0       	rjmp	.+172    	; 0x6ae <StepperMotor_CCW+0xc8>
		temp_step = 3 - (current_step+i)%4;
 602:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <current_step>
 606:	9e 01       	movw	r18, r28
 608:	28 0f       	add	r18, r24
 60a:	31 1d       	adc	r19, r1
 60c:	c9 01       	movw	r24, r18
 60e:	83 70       	andi	r24, 0x03	; 3
 610:	90 78       	andi	r25, 0x80	; 128
 612:	99 23       	and	r25, r25
 614:	24 f4       	brge	.+8      	; 0x61e <StepperMotor_CCW+0x38>
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	8c 6f       	ori	r24, 0xFC	; 252
 61a:	9f 6f       	ori	r25, 0xFF	; 255
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	93 e0       	ldi	r25, 0x03	; 3
 620:	98 1b       	sub	r25, r24
 622:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 626:	82 b1       	in	r24, 0x02	; 2
 628:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <temp_step>
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	e0 5b       	subi	r30, 0xB0	; 176
 630:	fd 4f       	sbci	r31, 0xFD	; 253
 632:	90 81       	ld	r25, Z
 634:	80 7c       	andi	r24, 0xC0	; 192
 636:	89 2b       	or	r24, r25
 638:	82 b9       	out	0x02, r24	; 2
		
		// mTimer(18);

		// /* Acceleration and Deceleration Profile */
		if((i-2) < ACCEL_TOTAL_STEPS){ 
 63a:	6e 01       	movw	r12, r28
 63c:	32 e0       	ldi	r19, 0x02	; 2
 63e:	c3 1a       	sub	r12, r19
 640:	d1 08       	sbc	r13, r1
 642:	8b e0       	ldi	r24, 0x0B	; 11
 644:	c8 16       	cp	r12, r24
 646:	d1 04       	cpc	r13, r1
 648:	54 f4       	brge	.+20     	; 0x65e <StepperMotor_CCW+0x78>
			mTimer(accel_speed[i-2]);
 64a:	f6 01       	movw	r30, r12
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	e6 5e       	subi	r30, 0xE6	; 230
 652:	fd 4f       	sbci	r31, 0xFD	; 253
 654:	80 81       	ld	r24, Z
 656:	91 81       	ldd	r25, Z+1	; 0x01
 658:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
 65c:	17 c0       	rjmp	.+46     	; 0x68c <StepperMotor_CCW+0xa6>
		} else if ((i-2) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 65e:	c7 01       	movw	r24, r14
 660:	09 97       	sbiw	r24, 0x09	; 9
 662:	8c 15       	cp	r24, r12
 664:	9d 05       	cpc	r25, r13
 666:	64 f4       	brge	.+24     	; 0x680 <StepperMotor_CCW+0x9a>
			mTimer(decel_speed[j]);
 668:	f8 01       	movw	r30, r16
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	e0 5c       	subi	r30, 0xC0	; 192
 670:	fd 4f       	sbci	r31, 0xFD	; 253
 672:	80 81       	ld	r24, Z
 674:	91 81       	ldd	r25, Z+1	; 0x01
 676:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
			j += 1;
 67a:	0f 5f       	subi	r16, 0xFF	; 255
 67c:	1f 4f       	sbci	r17, 0xFF	; 255
 67e:	06 c0       	rjmp	.+12     	; 0x68c <StepperMotor_CCW+0xa6>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 680:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <accel_speed+0x14>
 684:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <accel_speed+0x15>
 688:	0e 94 f1 06 	call	0xde2	; 0xde2 <mTimer>
		}

		if (same_dir_flag && ((i-2) > (num_steps/2 - 30))){
 68c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <same_dir_flag>
 690:	88 23       	and	r24, r24
 692:	61 f0       	breq	.+24     	; 0x6ac <StepperMotor_CCW+0xc6>
 694:	c7 01       	movw	r24, r14
 696:	ff 20       	and	r15, r15
 698:	0c f4       	brge	.+2      	; 0x69c <StepperMotor_CCW+0xb6>
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	95 95       	asr	r25
 69e:	87 95       	ror	r24
 6a0:	4e 97       	sbiw	r24, 0x1e	; 30
 6a2:	8c 15       	cp	r24, r12
 6a4:	9d 05       	cpc	r25, r13
 6a6:	14 f4       	brge	.+4      	; 0x6ac <StepperMotor_CCW+0xc6>
			run_dc_motor();
 6a8:	0e 94 8a 08 	call	0x1114	; 0x1114 <run_dc_motor>

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
	for(int i = 2; i < (num_steps + 2); i++){
 6ac:	21 96       	adiw	r28, 0x01	; 1
 6ae:	c7 01       	movw	r24, r14
 6b0:	02 96       	adiw	r24, 0x02	; 2
 6b2:	c8 17       	cp	r28, r24
 6b4:	d9 07       	cpc	r29, r25
 6b6:	0c f4       	brge	.+2      	; 0x6ba <StepperMotor_CCW+0xd4>
 6b8:	a4 cf       	rjmp	.-184    	; 0x602 <StepperMotor_CCW+0x1c>

		/* End of Accel/Deccel Profile */			

	}

	current_step = temp_step;
 6ba:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <temp_step>
 6be:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <current_step>

 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	08 95       	ret

Disassembly of section .text.StepperMotor_Rotate:

00001076 <StepperMotor_Rotate>:
	current_step = temp_step;
}


void StepperMotor_Rotate(int num_steps){
	if(num_steps > 0){
    1076:	18 16       	cp	r1, r24
    1078:	19 06       	cpc	r1, r25
    107a:	1c f4       	brge	.+6      	; 0x1082 <StepperMotor_Rotate+0xc>
		StepperMotor_CCW(num_steps);
    107c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <StepperMotor_CCW>
    1080:	08 95       	ret
	} else if (num_steps < 0) {
    1082:	99 23       	and	r25, r25
    1084:	2c f4       	brge	.+10     	; 0x1090 <StepperMotor_Rotate+0x1a>
		StepperMotor_CW(-num_steps);
    1086:	91 95       	neg	r25
    1088:	81 95       	neg	r24
    108a:	91 09       	sbc	r25, r1
    108c:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <StepperMotor_CW>
    1090:	08 95       	ret

Disassembly of section .text.mTimer:

00000de2 <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 de2:	e1 e8       	ldi	r30, 0x81	; 129
 de4:	f0 e0       	ldi	r31, 0x00	; 0
 de6:	20 81       	ld	r18, Z
 de8:	2a 60       	ori	r18, 0x0A	; 10
 dea:	20 83       	st	Z, r18
	OCR1A = 0x03E8; // Set output compare register for 1000 ticks which equals to 1ms
 dec:	28 ee       	ldi	r18, 0xE8	; 232
 dee:	33 e0       	ldi	r19, 0x03	; 3
 df0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 df4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
 df8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 dfc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 e00:	26 b3       	in	r18, 0x16	; 22
 e02:	22 60       	ori	r18, 0x02	; 2
 e04:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 e06:	20 e0       	ldi	r18, 0x00	; 0
 e08:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 e0a:	07 c0       	rjmp	.+14     	; 0xe1a <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 e0c:	b1 9b       	sbis	0x16, 1	; 22
 e0e:	05 c0       	rjmp	.+10     	; 0xe1a <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 e10:	46 b3       	in	r20, 0x16	; 22
 e12:	42 60       	ori	r20, 0x02	; 2
 e14:	46 bb       	out	0x16, r20	; 22
			i++;
 e16:	2f 5f       	subi	r18, 0xFF	; 255
 e18:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 e1a:	28 17       	cp	r18, r24
 e1c:	39 07       	cpc	r19, r25
 e1e:	b4 f3       	brlt	.-20     	; 0xe0c <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
}
 e20:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000f80 <__divmodhi4>:
 f80:	97 fb       	bst	r25, 7
 f82:	07 2e       	mov	r0, r23
 f84:	16 f4       	brtc	.+4      	; 0xf8a <__divmodhi4+0xa>
 f86:	00 94       	com	r0
 f88:	07 d0       	rcall	.+14     	; 0xf98 <__divmodhi4_neg1>
 f8a:	77 fd       	sbrc	r23, 7
 f8c:	09 d0       	rcall	.+18     	; 0xfa0 <__divmodhi4_neg2>
 f8e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__udivmodhi4>
 f92:	07 fc       	sbrc	r0, 7
 f94:	05 d0       	rcall	.+10     	; 0xfa0 <__divmodhi4_neg2>
 f96:	3e f4       	brtc	.+14     	; 0xfa6 <__divmodhi4_exit>

00000f98 <__divmodhi4_neg1>:
 f98:	90 95       	com	r25
 f9a:	81 95       	neg	r24
 f9c:	9f 4f       	sbci	r25, 0xFF	; 255
 f9e:	08 95       	ret

00000fa0 <__divmodhi4_neg2>:
 fa0:	70 95       	com	r23
 fa2:	61 95       	neg	r22
 fa4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fa6 <__divmodhi4_exit>:
 fa6:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000fa8 <__udivmodhi4>:
 fa8:	aa 1b       	sub	r26, r26
 faa:	bb 1b       	sub	r27, r27
 fac:	51 e1       	ldi	r21, 0x11	; 17
 fae:	07 c0       	rjmp	.+14     	; 0xfbe <__udivmodhi4_ep>

00000fb0 <__udivmodhi4_loop>:
 fb0:	aa 1f       	adc	r26, r26
 fb2:	bb 1f       	adc	r27, r27
 fb4:	a6 17       	cp	r26, r22
 fb6:	b7 07       	cpc	r27, r23
 fb8:	10 f0       	brcs	.+4      	; 0xfbe <__udivmodhi4_ep>
 fba:	a6 1b       	sub	r26, r22
 fbc:	b7 0b       	sbc	r27, r23

00000fbe <__udivmodhi4_ep>:
 fbe:	88 1f       	adc	r24, r24
 fc0:	99 1f       	adc	r25, r25
 fc2:	5a 95       	dec	r21
 fc4:	a9 f7       	brne	.-22     	; 0xfb0 <__udivmodhi4_loop>
 fc6:	80 95       	com	r24
 fc8:	90 95       	com	r25
 fca:	bc 01       	movw	r22, r24
 fcc:	cd 01       	movw	r24, r26
 fce:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001130 <_fini>:
    1130:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001132 <__funcs_on_exit>:
    1132:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001134 <__simulator_exit>:
    1134:	08 95       	ret

Disassembly of section .text.exit:

00001092 <exit>:
    1092:	ec 01       	movw	r28, r24
    1094:	0e 94 99 08 	call	0x1132	; 0x1132 <__funcs_on_exit>
    1098:	0e 94 98 08 	call	0x1130	; 0x1130 <_fini>
    109c:	ce 01       	movw	r24, r28
    109e:	0e 94 9a 08 	call	0x1134	; 0x1134 <__simulator_exit>
    10a2:	ce 01       	movw	r24, r28
    10a4:	0e 94 95 08 	call	0x112a	; 0x112a <_Exit>

Disassembly of section .text.__simple_search_fl:

000007be <__simple_search_fl>:
 7be:	ef 92       	push	r14
 7c0:	ff 92       	push	r15
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <__freelist>
 7ce:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <__freelist+0x1>
 7d2:	61 15       	cp	r22, r1
 7d4:	71 05       	cpc	r23, r1
 7d6:	09 f4       	brne	.+2      	; 0x7da <__simple_search_fl+0x1c>
 7d8:	5b c0       	rjmp	.+182    	; 0x890 <__simple_search_fl+0xd2>
 7da:	fb 01       	movw	r30, r22
 7dc:	a0 e0       	ldi	r26, 0x00	; 0
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	40 e0       	ldi	r20, 0x00	; 0
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	c0 e0       	ldi	r28, 0x00	; 0
 7e6:	d0 e0       	ldi	r29, 0x00	; 0
 7e8:	00 81       	ld	r16, Z
 7ea:	11 81       	ldd	r17, Z+1	; 0x01
 7ec:	22 81       	ldd	r18, Z+2	; 0x02
 7ee:	33 81       	ldd	r19, Z+3	; 0x03
 7f0:	08 17       	cp	r16, r24
 7f2:	19 07       	cpc	r17, r25
 7f4:	71 f4       	brne	.+28     	; 0x812 <__simple_search_fl+0x54>
 7f6:	10 97       	sbiw	r26, 0x00	; 0
 7f8:	29 f0       	breq	.+10     	; 0x804 <__simple_search_fl+0x46>
 7fa:	13 96       	adiw	r26, 0x03	; 3
 7fc:	3c 93       	st	X, r19
 7fe:	2e 93       	st	-X, r18
 800:	12 97       	sbiw	r26, 0x02	; 2
 802:	04 c0       	rjmp	.+8      	; 0x80c <__simple_search_fl+0x4e>
 804:	30 93 59 02 	sts	0x0259, r19	; 0x800259 <__freelist+0x1>
 808:	20 93 58 02 	sts	0x0258, r18	; 0x800258 <__freelist>
 80c:	cf 01       	movw	r24, r30
 80e:	02 96       	adiw	r24, 0x02	; 2
 810:	41 c0       	rjmp	.+130    	; 0x894 <__simple_search_fl+0xd6>
 812:	80 17       	cp	r24, r16
 814:	91 07       	cpc	r25, r17
 816:	48 f4       	brcc	.+18     	; 0x82a <__simple_search_fl+0x6c>
 818:	20 97       	sbiw	r28, 0x00	; 0
 81a:	29 f0       	breq	.+10     	; 0x826 <__simple_search_fl+0x68>
 81c:	e8 80       	ld	r14, Y
 81e:	f9 80       	ldd	r15, Y+1	; 0x01
 820:	0e 15       	cp	r16, r14
 822:	1f 05       	cpc	r17, r15
 824:	10 f4       	brcc	.+4      	; 0x82a <__simple_search_fl+0x6c>
 826:	ad 01       	movw	r20, r26
 828:	ef 01       	movw	r28, r30
 82a:	df 01       	movw	r26, r30
 82c:	21 15       	cp	r18, r1
 82e:	31 05       	cpc	r19, r1
 830:	11 f0       	breq	.+4      	; 0x836 <__simple_search_fl+0x78>
 832:	f9 01       	movw	r30, r18
 834:	d9 cf       	rjmp	.-78     	; 0x7e8 <__simple_search_fl+0x2a>
 836:	20 97       	sbiw	r28, 0x00	; 0
 838:	59 f1       	breq	.+86     	; 0x890 <__simple_search_fl+0xd2>
 83a:	0a 81       	ldd	r16, Y+2	; 0x02
 83c:	1b 81       	ldd	r17, Y+3	; 0x03
 83e:	fe 01       	movw	r30, r28
 840:	21 91       	ld	r18, Z+
 842:	31 91       	ld	r19, Z+
 844:	28 1b       	sub	r18, r24
 846:	39 0b       	sbc	r19, r25
 848:	25 30       	cpi	r18, 0x05	; 5
 84a:	31 05       	cpc	r19, r1
 84c:	88 f0       	brcs	.+34     	; 0x870 <__simple_search_fl+0xb2>
 84e:	99 83       	std	Y+1, r25	; 0x01
 850:	88 83       	st	Y, r24
 852:	df 01       	movw	r26, r30
 854:	a8 0f       	add	r26, r24
 856:	b9 1f       	adc	r27, r25
 858:	22 50       	subi	r18, 0x02	; 2
 85a:	31 09       	sbc	r19, r1
 85c:	11 96       	adiw	r26, 0x01	; 1
 85e:	3c 93       	st	X, r19
 860:	2e 93       	st	-X, r18
 862:	12 96       	adiw	r26, 0x02	; 2
 864:	0c 93       	st	X, r16
 866:	12 97       	sbiw	r26, 0x02	; 2
 868:	13 96       	adiw	r26, 0x03	; 3
 86a:	1c 93       	st	X, r17
 86c:	13 97       	sbiw	r26, 0x03	; 3
 86e:	8d 01       	movw	r16, r26
 870:	c6 17       	cp	r28, r22
 872:	d7 07       	cpc	r29, r23
 874:	29 f4       	brne	.+10     	; 0x880 <__simple_search_fl+0xc2>
 876:	00 93 58 02 	sts	0x0258, r16	; 0x800258 <__freelist>
 87a:	10 93 59 02 	sts	0x0259, r17	; 0x800259 <__freelist+0x1>
 87e:	06 c0       	rjmp	.+12     	; 0x88c <__simple_search_fl+0xce>
 880:	da 01       	movw	r26, r20
 882:	12 96       	adiw	r26, 0x02	; 2
 884:	0c 93       	st	X, r16
 886:	12 97       	sbiw	r26, 0x02	; 2
 888:	13 96       	adiw	r26, 0x03	; 3
 88a:	1c 93       	st	X, r17
 88c:	cf 01       	movw	r24, r30
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__simple_search_fl+0xd6>
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	e6 e0       	ldi	r30, 0x06	; 6
 89a:	0c 94 57 07 	jmp	0xeae	; 0xeae <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00000bca <__simple_free>:
 bca:	00 97       	sbiw	r24, 0x00	; 0
 bcc:	c9 f1       	breq	.+114    	; 0xc40 <__simple_free+0x76>
 bce:	fc 01       	movw	r30, r24
 bd0:	32 97       	sbiw	r30, 0x02	; 2
 bd2:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <__freelist>
 bd6:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <__freelist+0x1>
 bda:	10 97       	sbiw	r26, 0x00	; 0
 bdc:	59 f1       	breq	.+86     	; 0xc34 <__simple_free+0x6a>
 bde:	40 81       	ld	r20, Z
 be0:	51 81       	ldd	r21, Z+1	; 0x01
 be2:	9c 01       	movw	r18, r24
 be4:	24 0f       	add	r18, r20
 be6:	35 1f       	adc	r19, r21
 be8:	a2 17       	cp	r26, r18
 bea:	b3 07       	cpc	r27, r19
 bec:	79 f4       	brne	.+30     	; 0xc0c <__simple_free+0x42>
 bee:	12 96       	adiw	r26, 0x02	; 2
 bf0:	8d 91       	ld	r24, X+
 bf2:	9c 91       	ld	r25, X
 bf4:	13 97       	sbiw	r26, 0x03	; 3
 bf6:	93 83       	std	Z+3, r25	; 0x03
 bf8:	82 83       	std	Z+2, r24	; 0x02
 bfa:	2d 91       	ld	r18, X+
 bfc:	3c 91       	ld	r19, X
 bfe:	ca 01       	movw	r24, r20
 c00:	82 0f       	add	r24, r18
 c02:	93 1f       	adc	r25, r19
 c04:	02 96       	adiw	r24, 0x02	; 2
 c06:	91 83       	std	Z+1, r25	; 0x01
 c08:	80 83       	st	Z, r24
 c0a:	16 c0       	rjmp	.+44     	; 0xc38 <__simple_free+0x6e>
 c0c:	8d 91       	ld	r24, X+
 c0e:	9c 91       	ld	r25, X
 c10:	11 97       	sbiw	r26, 0x01	; 1
 c12:	9c 01       	movw	r18, r24
 c14:	2e 5f       	subi	r18, 0xFE	; 254
 c16:	3f 4f       	sbci	r19, 0xFF	; 255
 c18:	2a 0f       	add	r18, r26
 c1a:	3b 1f       	adc	r19, r27
 c1c:	e2 17       	cp	r30, r18
 c1e:	f3 07       	cpc	r31, r19
 c20:	31 f4       	brne	.+12     	; 0xc2e <__simple_free+0x64>
 c22:	84 0f       	add	r24, r20
 c24:	95 1f       	adc	r25, r21
 c26:	02 96       	adiw	r24, 0x02	; 2
 c28:	8d 93       	st	X+, r24
 c2a:	9c 93       	st	X, r25
 c2c:	08 95       	ret
 c2e:	b3 83       	std	Z+3, r27	; 0x03
 c30:	a2 83       	std	Z+2, r26	; 0x02
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <__simple_free+0x6e>
 c34:	13 82       	std	Z+3, r1	; 0x03
 c36:	12 82       	std	Z+2, r1	; 0x02
 c38:	f0 93 59 02 	sts	0x0259, r31	; 0x800259 <__freelist+0x1>
 c3c:	e0 93 58 02 	sts	0x0258, r30	; 0x800258 <__freelist>
 c40:	08 95       	ret

Disassembly of section .text.__simple_malloc:

0000089e <__simple_malloc>:
 89e:	a2 e0       	ldi	r26, 0x02	; 2
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e5 e5       	ldi	r30, 0x55	; 85
 8a4:	f4 e0       	ldi	r31, 0x04	; 4
 8a6:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__prologue_saves__+0x14>
 8aa:	8c 01       	movw	r16, r24
 8ac:	85 ee       	ldi	r24, 0xE5	; 229
 8ae:	95 e0       	ldi	r25, 0x05	; 5
 8b0:	01 15       	cp	r16, r1
 8b2:	11 05       	cpc	r17, r1
 8b4:	09 f4       	brne	.+2      	; 0x8b8 <__simple_malloc+0x1a>
 8b6:	55 c0       	rjmp	.+170    	; 0x962 <__simple_malloc+0xc4>
 8b8:	89 2b       	or	r24, r25
 8ba:	79 f0       	breq	.+30     	; 0x8da <__simple_malloc+0x3c>
 8bc:	02 30       	cpi	r16, 0x02	; 2
 8be:	11 05       	cpc	r17, r1
 8c0:	10 f4       	brcc	.+4      	; 0x8c6 <__simple_malloc+0x28>
 8c2:	02 e0       	ldi	r16, 0x02	; 2
 8c4:	10 e0       	ldi	r17, 0x00	; 0
 8c6:	c8 01       	movw	r24, r16
 8c8:	0e 94 df 03 	call	0x7be	; 0x7be <__simple_search_fl>
 8cc:	00 97       	sbiw	r24, 0x00	; 0
 8ce:	09 f0       	breq	.+2      	; 0x8d2 <__simple_malloc+0x34>
 8d0:	4f c0       	rjmp	.+158    	; 0x970 <__simple_malloc+0xd2>
 8d2:	92 e0       	ldi	r25, 0x02	; 2
 8d4:	e9 2e       	mov	r14, r25
 8d6:	f1 2c       	mov	r15, r1
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__simple_malloc+0x44>
 8da:	85 ee       	ldi	r24, 0xE5	; 229
 8dc:	e8 2e       	mov	r14, r24
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	f8 2e       	mov	r15, r24
 8e2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <end.1483>
 8e6:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <end.1483+0x1>
 8ea:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <cur.1482>
 8ee:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <cur.1482+0x1>
 8f2:	82 1b       	sub	r24, r18
 8f4:	93 0b       	sbc	r25, r19
 8f6:	67 01       	movw	r12, r14
 8f8:	c0 0e       	add	r12, r16
 8fa:	d1 1e       	adc	r13, r17
 8fc:	80 17       	cp	r24, r16
 8fe:	91 07       	cpc	r25, r17
 900:	f0 f4       	brcc	.+60     	; 0x93e <__simple_malloc+0xa0>
 902:	da 82       	std	Y+2, r13	; 0x02
 904:	c9 82       	std	Y+1, r12	; 0x01
 906:	ce 01       	movw	r24, r28
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__expand_heap>
 90e:	00 97       	sbiw	r24, 0x00	; 0
 910:	19 f4       	brne	.+6      	; 0x918 <__simple_malloc+0x7a>
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	2c c0       	rjmp	.+88     	; 0x970 <__simple_malloc+0xd2>
 918:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <end.1483>
 91c:	30 91 5b 02 	lds	r19, 0x025B	; 0x80025b <end.1483+0x1>
 920:	82 17       	cp	r24, r18
 922:	93 07       	cpc	r25, r19
 924:	21 f0       	breq	.+8      	; 0x92e <__simple_malloc+0x90>
 926:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <cur.1482+0x1>
 92a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <cur.1482>
 92e:	29 81       	ldd	r18, Y+1	; 0x01
 930:	3a 81       	ldd	r19, Y+2	; 0x02
 932:	82 0f       	add	r24, r18
 934:	93 1f       	adc	r25, r19
 936:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <end.1483+0x1>
 93a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <end.1483>
 93e:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <cur.1482>
 942:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <cur.1482+0x1>
 946:	cf 01       	movw	r24, r30
 948:	e1 14       	cp	r14, r1
 94a:	f1 04       	cpc	r15, r1
 94c:	19 f0       	breq	.+6      	; 0x954 <__simple_malloc+0xb6>
 94e:	02 96       	adiw	r24, 0x02	; 2
 950:	11 83       	std	Z+1, r17	; 0x01
 952:	00 83       	st	Z, r16
 954:	ce 0e       	add	r12, r30
 956:	df 1e       	adc	r13, r31
 958:	d0 92 5d 02 	sts	0x025D, r13	; 0x80025d <cur.1482+0x1>
 95c:	c0 92 5c 02 	sts	0x025C, r12	; 0x80025c <cur.1482>
 960:	07 c0       	rjmp	.+14     	; 0x970 <__simple_malloc+0xd2>
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	09 f0       	breq	.+2      	; 0x968 <__simple_malloc+0xca>
 966:	ad cf       	rjmp	.-166    	; 0x8c2 <__simple_malloc+0x24>
 968:	7c 01       	movw	r14, r24
 96a:	01 e0       	ldi	r16, 0x01	; 1
 96c:	10 e0       	ldi	r17, 0x00	; 0
 96e:	b9 cf       	rjmp	.-142    	; 0x8e2 <__simple_malloc+0x44>
 970:	22 96       	adiw	r28, 0x02	; 2
 972:	e8 e0       	ldi	r30, 0x08	; 8
 974:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

0000112a <_Exit>:
    112a:	0e 94 b7 00 	call	0x16e	; 0x16e <_exit>

Disassembly of section .text.__expand_heap:

00000cb2 <__expand_heap>:
 cb2:	fc 01       	movw	r30, r24
 cb4:	40 81       	ld	r20, Z
 cb6:	51 81       	ldd	r21, Z+1	; 0x01
 cb8:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <__brkval>
 cbc:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <__brkval+0x1>
 cc0:	89 2b       	or	r24, r25
 cc2:	41 f4       	brne	.+16     	; 0xcd4 <__expand_heap+0x22>
 cc4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__malloc_heap_start>
 cc8:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__malloc_heap_start+0x1>
 ccc:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <__brkval+0x1>
 cd0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <__brkval>
 cd4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__malloc_heap_end>
 cd8:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <__malloc_heap_end+0x1>
 cdc:	00 97       	sbiw	r24, 0x00	; 0
 cde:	19 f4       	brne	.+6      	; 0xce6 <__expand_heap+0x34>
 ce0:	8d b7       	in	r24, 0x3d	; 61
 ce2:	9e b7       	in	r25, 0x3e	; 62
 ce4:	80 97       	sbiw	r24, 0x20	; 32
 ce6:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <__brkval>
 cea:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <__brkval+0x1>
 cee:	28 17       	cp	r18, r24
 cf0:	39 07       	cpc	r19, r25
 cf2:	48 f0       	brcs	.+18     	; 0xd06 <__expand_heap+0x54>
 cf4:	8c e0       	ldi	r24, 0x0C	; 12
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__errno_val+0x1>
 cfc:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__errno_val>
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	08 95       	ret
 d06:	82 1b       	sub	r24, r18
 d08:	93 0b       	sbc	r25, r19
 d0a:	84 17       	cp	r24, r20
 d0c:	95 07       	cpc	r25, r21
 d0e:	90 f3       	brcs	.-28     	; 0xcf4 <__expand_heap+0x42>
 d10:	42 0f       	add	r20, r18
 d12:	53 1f       	adc	r21, r19
 d14:	50 93 5f 02 	sts	0x025F, r21	; 0x80025f <__brkval+0x1>
 d18:	40 93 5e 02 	sts	0x025E, r20	; 0x80025e <__brkval>
 d1c:	c9 01       	movw	r24, r18
 d1e:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000e5e <__prologue_saves__>:
 e5e:	2f 92       	push	r2
 e60:	3f 92       	push	r3
 e62:	4f 92       	push	r4
 e64:	5f 92       	push	r5
 e66:	6f 92       	push	r6
 e68:	7f 92       	push	r7
 e6a:	8f 92       	push	r8
 e6c:	9f 92       	push	r9
 e6e:	af 92       	push	r10
 e70:	bf 92       	push	r11
 e72:	cf 92       	push	r12
 e74:	df 92       	push	r13
 e76:	ef 92       	push	r14
 e78:	ff 92       	push	r15
 e7a:	0f 93       	push	r16
 e7c:	1f 93       	push	r17
 e7e:	cf 93       	push	r28
 e80:	df 93       	push	r29
 e82:	cd b7       	in	r28, 0x3d	; 61
 e84:	de b7       	in	r29, 0x3e	; 62
 e86:	ca 1b       	sub	r28, r26
 e88:	db 0b       	sbc	r29, r27
 e8a:	0f b6       	in	r0, 0x3f	; 63
 e8c:	f8 94       	cli
 e8e:	de bf       	out	0x3e, r29	; 62
 e90:	0f be       	out	0x3f, r0	; 63
 e92:	cd bf       	out	0x3d, r28	; 61
 e94:	19 94       	eijmp

Disassembly of section .text.libgcc.prologue:

00000e96 <__epilogue_restores__>:
 e96:	2a 88       	ldd	r2, Y+18	; 0x12
 e98:	39 88       	ldd	r3, Y+17	; 0x11
 e9a:	48 88       	ldd	r4, Y+16	; 0x10
 e9c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e9e:	6e 84       	ldd	r6, Y+14	; 0x0e
 ea0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ea2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ea4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ea6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ea8:	b9 84       	ldd	r11, Y+9	; 0x09
 eaa:	c8 84       	ldd	r12, Y+8	; 0x08
 eac:	df 80       	ldd	r13, Y+7	; 0x07
 eae:	ee 80       	ldd	r14, Y+6	; 0x06
 eb0:	fd 80       	ldd	r15, Y+5	; 0x05
 eb2:	0c 81       	ldd	r16, Y+4	; 0x04
 eb4:	1b 81       	ldd	r17, Y+3	; 0x03
 eb6:	aa 81       	ldd	r26, Y+2	; 0x02
 eb8:	b9 81       	ldd	r27, Y+1	; 0x01
 eba:	ce 0f       	add	r28, r30
 ebc:	d1 1d       	adc	r29, r1
 ebe:	0f b6       	in	r0, 0x3f	; 63
 ec0:	f8 94       	cli
 ec2:	de bf       	out	0x3e, r29	; 62
 ec4:	0f be       	out	0x3f, r0	; 63
 ec6:	cd bf       	out	0x3d, r28	; 61
 ec8:	ed 01       	movw	r28, r26
 eca:	08 95       	ret
