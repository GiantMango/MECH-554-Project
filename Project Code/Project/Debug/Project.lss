
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000010d0  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800200  00800200  000010d0  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001129  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034cb  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000123a  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114c  00000000  00000000  00005a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000488  00000000  00000000  00006b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee0  00000000  00000000  000074d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  000083b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000f4c  00000f4c  000010a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008528  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000002c  00000dd2  00000dd2  00000f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000e  00000efa  00000efa  0000104e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.free_running_adc 0000000c  00000f16  00000f16  0000106a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.disable_adc 0000000c  00000f22  00000f22  00001076  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.enable_adc 0000000c  00000f2e  00000f2e  00001082  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.run_dc_motor 0000000a  00000f3a  00000f3a  0000108e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.brake_dc_motor 00000008  00000f44  00000f44  00001098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_dc_motor 00000022  00000e76  00000e76  00000fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCDBusyLoop 0000007e  000008b2  000008b2  00000a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCDByte 00000070  000009a8  000009a8  00000afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.InitLCD 00000088  000007a2  000007a2  000008f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDWriteInt 000000c4  000006de  000006de  00000832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCDGotoXY 00000012  00000ee8  00000ee8  0000103c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.setup   0000000e  00000f08  00000f08  0000105c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.initLink 0000001e  00000e98  00000e98  00000fec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.enqueue 0000003c  00000cf8  00000cf8  00000e4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.dequeue 00000030  00000da2  00000da2  00000ef6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.main    000003b2  00000172  00000172  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_default 00000002  00000f58  00000f58  000010ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__vector_29 00000088  0000082a  0000082a  0000097e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_5 0000006c  00000a86  00000a86  00000bda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_6 00000066  00000af2  00000af2  00000c46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_3 00000054  00000c10  00000c10  00000d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .data.rotations 00000010  0080021d  00000f60  000010b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 39 .bss.ADC_result_flag 00000001  00800243  00800243  000010d0  2**0
                  ALLOC
 40 .data.ADC_curr_min 00000002  00800231  00000f74  000010c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 41 .bss.ADC_max_min 00000002  00800233  00800233  000010d0  2**0
                  ALLOC
 42 .data.ADC_min_min 00000002  00800235  00000f76  000010ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 43 .text.mTimer  00000040  00000cb8  00000cb8  00000e0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.init_pwm 00000028  00000dfe  00000dfe  00000f52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.change_pwm_speed 00000004  00000f50  00000f50  000010a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.init_stepper_motor 00000054  00000c64  00000c64  00000db8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.StepperMotor_CW 00000058  00000bb8  00000bb8  00000d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.StepperMotor_CCW 00000060  00000b58  00000b58  00000cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.StepperMotor_Rotate 0000001c  00000eb6  00000eb6  0000100a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .data.steps   00000004  0080022d  00000f70  000010c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 51 .text.libgcc.div 00000028  00000e26  00000e26  00000f7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.libgcc.div 00000028  00000e4e  00000e4e  00000fa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.__dummy_fini 00000002  00000f5a  00000f5a  000010ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__dummy_funcs_on_exit 00000002  00000f5c  00000f5c  000010b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_simulator_exit 00000002  00000f5e  00000f5e  000010b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.exit    00000016  00000ed2  00000ed2  00001026  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__simple_search_fl 000000e0  00000524  00000524  00000678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.__simple_free 00000078  00000930  00000930  00000a84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .bss.__freelist 00000002  00800237  00800237  000010d0  2**0
                  ALLOC
 60 .text.__simple_malloc 000000da  00000604  00000604  00000758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .bss.end.1483 00000002  00800239  00800239  000010d0  2**0
                  ALLOC
 62 .bss.cur.1482 00000002  0080023b  0080023b  000010d0  2**0
                  ALLOC
 63 .text._Exit   00000004  00000f54  00000f54  000010a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__expand_heap 0000006e  00000a18  00000a18  00000b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .bss.__brkval 00000002  0080023d  0080023d  000010d0  2**0
                  ALLOC
 66 .data.__malloc_heap_end 00000002  0080023f  00000f78  000010cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 67 .data.__malloc_heap_start 00000002  00800241  00000f7a  000010ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 68 .text.libgcc.prologue 00000038  00000d34  00000d34  00000e88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.libgcc.prologue 00000036  00000d6c  00000d6c  00000ec0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
   4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
   8:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
   c:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_3>
  10:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  14:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_5>
  18:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_6>
  1c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  20:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  24:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  28:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  2c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  30:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  34:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  38:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  3c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  40:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  44:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  48:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  4c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  50:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  54:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  58:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  5c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  60:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  64:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  68:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  6c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  70:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  74:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_29>
  78:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  7c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  80:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  84:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  88:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  8c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  90:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  94:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  98:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  9c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  a0:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  a4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  a8:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  ac:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  b0:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  b4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  b8:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  bc:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  c0:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  c4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  c8:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  cc:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  d0:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  d4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  d8:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  dc:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>
  e0:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 1d       	adc	r16, r2
  e8:	80 02       	muls	r24, r16
  ea:	1d 02       	muls	r17, r29
  ec:	33 00       	.word	0x0033	; ????
  ee:	0f 60       	ori	r16, 0x0F	; 15
  f0:	02 33       	cpi	r16, 0x32	; 50
  f2:	02 35       	cpi	r16, 0x52	; 82
  f4:	80 02       	muls	r24, r16
  f6:	35 02       	muls	r19, r21
  f8:	37 00       	.word	0x0037	; ????
  fa:	0f 76       	andi	r16, 0x6F	; 111
  fc:	02 37       	cpi	r16, 0x72	; 114
  fe:	02 3f       	cpi	r16, 0xF2	; 242
 100:	80 02       	muls	r24, r16
 102:	3f 02       	muls	r19, r31
 104:	43 00       	.word	0x0043	; ????
 106:	0f 78       	andi	r16, 0x8F	; 143
 108:	02 43       	sbci	r16, 0x32	; 50
 10a:	02 44       	sbci	r16, 0x42	; 66
 10c:	80 00       	.word	0x0080	; ????

0000010e <__trampolines_start>:
 10e:	0c 94 08 03 	jmp	0x610	; 0x610 <__simple_malloc+0xc>
 112:	0c 94 98 04 	jmp	0x930	; 0x930 <__simple_free>

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d1 e2       	ldi	r29, 0x21	; 33
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
 126:	e4 ee       	ldi	r30, 0xE4	; 228
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	19 c0       	rjmp	.+50     	; 0x160 <__do_clear_bss+0x8>
 12e:	b7 91       	elpm	r27, Z+
 130:	a7 91       	elpm	r26, Z+
 132:	37 91       	elpm	r19, Z+
 134:	27 91       	elpm	r18, Z+
 136:	07 91       	elpm	r16, Z+
 138:	07 fd       	sbrc	r16, 7
 13a:	0e c0       	rjmp	.+28     	; 0x158 <__do_clear_bss>
 13c:	97 91       	elpm	r25, Z+
 13e:	87 91       	elpm	r24, Z+
 140:	ef 01       	movw	r28, r30
 142:	f9 2f       	mov	r31, r25
 144:	e8 2f       	mov	r30, r24
 146:	0b bf       	out	0x3b, r16	; 59
 148:	07 90       	elpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x22>
 152:	fe 01       	movw	r30, r28
 154:	1b be       	out	0x3b, r1	; 59
 156:	04 c0       	rjmp	.+8      	; 0x160 <__do_clear_bss+0x8>

00000158 <__do_clear_bss>:
 158:	1d 92       	st	X+, r1
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e1 f7       	brne	.-8      	; 0x158 <__do_clear_bss>
 160:	ed 30       	cpi	r30, 0x0D	; 13
 162:	f4 07       	cpc	r31, r20
 164:	21 f7       	brne	.-56     	; 0x12e <__do_copy_data+0x8>
 166:	0e 94 b9 00 	call	0x172	; 0x172 <_etext>
 16a:	0c 94 69 07 	jmp	0xed2	; 0xed2 <exit>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

Disassembly of section .text:

00000f4c <__bad_interrupt>:
 f4c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_default>

Disassembly of section .text.init_adc:

00000dd2 <init_adc>:
} // end start_adc

/* Stop ADC Conversion */
void stop_conversion(){
	ADCSRA &= ~(_BV(ADSC));		// clear ADSC
	cli();
 dd2:	8d b3       	in	r24, 0x1d	; 29
 dd4:	84 60       	ori	r24, 0x04	; 4
 dd6:	8d bb       	out	0x1d, r24	; 29
 dd8:	e9 e6       	ldi	r30, 0x69	; 105
 dda:	f0 e0       	ldi	r31, 0x00	; 0
 ddc:	80 81       	ld	r24, Z
 dde:	80 63       	ori	r24, 0x30	; 48
 de0:	80 83       	st	Z, r24
 de2:	ea e7       	ldi	r30, 0x7A	; 122
 de4:	f0 e0       	ldi	r31, 0x00	; 0
 de6:	80 81       	ld	r24, Z
 de8:	80 68       	ori	r24, 0x80	; 128
 dea:	80 83       	st	Z, r24
 dec:	80 81       	ld	r24, Z
 dee:	88 60       	ori	r24, 0x08	; 8
 df0:	80 83       	st	Z, r24
 df2:	ec e7       	ldi	r30, 0x7C	; 124
 df4:	f0 e0       	ldi	r31, 0x00	; 0
 df6:	80 81       	ld	r24, Z
 df8:	80 66       	ori	r24, 0x60	; 96
 dfa:	80 83       	st	Z, r24
 dfc:	08 95       	ret

Disassembly of section .text.start_conversion:

00000efa <start_conversion>:
 efa:	78 94       	sei
 efc:	ea e7       	ldi	r30, 0x7A	; 122
 efe:	f0 e0       	ldi	r31, 0x00	; 0
 f00:	80 81       	ld	r24, Z
 f02:	80 64       	ori	r24, 0x40	; 64
 f04:	80 83       	st	Z, r24
 f06:	08 95       	ret

Disassembly of section .text.free_running_adc:

00000f16 <free_running_adc>:
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
 f16:	ea e7       	ldi	r30, 0x7A	; 122
 f18:	f0 e0       	ldi	r31, 0x00	; 0
 f1a:	80 81       	ld	r24, Z
 f1c:	80 62       	ori	r24, 0x20	; 32
 f1e:	80 83       	st	Z, r24
 f20:	08 95       	ret

Disassembly of section .text.disable_adc:

00000f22 <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
 f22:	ea e7       	ldi	r30, 0x7A	; 122
 f24:	f0 e0       	ldi	r31, 0x00	; 0
 f26:	80 81       	ld	r24, Z
 f28:	8f 77       	andi	r24, 0x7F	; 127
 f2a:	80 83       	st	Z, r24
 f2c:	08 95       	ret

Disassembly of section .text.enable_adc:

00000f2e <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
 f2e:	ea e7       	ldi	r30, 0x7A	; 122
 f30:	f0 e0       	ldi	r31, 0x00	; 0
 f32:	80 81       	ld	r24, Z
 f34:	80 68       	ori	r24, 0x80	; 128
 f36:	80 83       	st	Z, r24
 f38:	08 95       	ret

Disassembly of section .text.run_dc_motor:

00000f3a <run_dc_motor>:
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
 f3a:	85 b1       	in	r24, 0x05	; 5
 f3c:	80 7f       	andi	r24, 0xF0	; 240
 f3e:	8b 60       	ori	r24, 0x0B	; 11
 f40:	85 b9       	out	0x05, r24	; 5
 f42:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

00000f44 <brake_dc_motor>:
	//PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
 f44:	85 b1       	in	r24, 0x05	; 5
 f46:	8f 60       	ori	r24, 0x0F	; 15
 f48:	85 b9       	out	0x05, r24	; 5
 f4a:	08 95       	ret

Disassembly of section .text.init_dc_motor:

00000e76 <init_dc_motor>:

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
 e76:	8d b3       	in	r24, 0x1d	; 29
 e78:	80 63       	ori	r24, 0x30	; 48
 e7a:	8d bb       	out	0x1d, r24	; 29
 e7c:	ea e6       	ldi	r30, 0x6A	; 106
 e7e:	f0 e0       	ldi	r31, 0x00	; 0
 e80:	80 81       	ld	r24, Z
 e82:	8a 60       	ori	r24, 0x0A	; 10
 e84:	80 83       	st	Z, r24
 e86:	84 b1       	in	r24, 0x04	; 4
 e88:	8f 60       	ori	r24, 0x0F	; 15
 e8a:	84 b9       	out	0x04, r24	; 4
 e8c:	8d b1       	in	r24, 0x0d	; 13
 e8e:	8c 7f       	andi	r24, 0xFC	; 252
 e90:	8d b9       	out	0x0d, r24	; 13
 e92:	0e 94 a2 07 	call	0xf44	; 0xf44 <brake_dc_motor>
 e96:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

000008b2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 8b2:	87 b1       	in	r24, 0x07	; 7
 8b4:	80 7f       	andi	r24, 0xF0	; 240
 8b6:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 8b8:	88 b1       	in	r24, 0x08	; 8
 8ba:	80 62       	ori	r24, 0x20	; 32
 8bc:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 8be:	88 b1       	in	r24, 0x08	; 8
 8c0:	8f 7b       	andi	r24, 0xBF	; 191
 8c2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8c4:	82 e0       	ldi	r24, 0x02	; 2
 8c6:	8a 95       	dec	r24
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <LCDBusyLoop+0x14>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 8cc:	88 b1       	in	r24, 0x08	; 8
 8ce:	80 68       	ori	r24, 0x80	; 128
 8d0:	88 b9       	out	0x08, r24	; 8
 8d2:	92 e0       	ldi	r25, 0x02	; 2
 8d4:	9a 95       	dec	r25
 8d6:	f1 f7       	brne	.-4      	; 0x8d4 <LCDBusyLoop+0x22>
 8d8:	00 c0       	rjmp	.+0      	; 0x8da <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 8da:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 8dc:	82 95       	swap	r24
 8de:	80 7f       	andi	r24, 0xF0	; 240
 8e0:	92 e0       	ldi	r25, 0x02	; 2
 8e2:	9a 95       	dec	r25
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <LCDBusyLoop+0x30>
 8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 8e8:	98 b1       	in	r25, 0x08	; 8
 8ea:	9f 77       	andi	r25, 0x7F	; 127
 8ec:	98 b9       	out	0x08, r25	; 8
 8ee:	95 e0       	ldi	r25, 0x05	; 5
 8f0:	9a 95       	dec	r25
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <LCDBusyLoop+0x3e>
 8f4:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 8f6:	98 b1       	in	r25, 0x08	; 8
 8f8:	90 68       	ori	r25, 0x80	; 128
 8fa:	98 b9       	out	0x08, r25	; 8
 8fc:	92 e0       	ldi	r25, 0x02	; 2
 8fe:	9a 95       	dec	r25
 900:	f1 f7       	brne	.-4      	; 0x8fe <LCDBusyLoop+0x4c>
 902:	00 c0       	rjmp	.+0      	; 0x904 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 904:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 906:	80 78       	andi	r24, 0x80	; 128
 908:	92 e0       	ldi	r25, 0x02	; 2
 90a:	9a 95       	dec	r25
 90c:	f1 f7       	brne	.-4      	; 0x90a <LCDBusyLoop+0x58>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 910:	98 b1       	in	r25, 0x08	; 8
 912:	9f 77       	andi	r25, 0x7F	; 127
 914:	98 b9       	out	0x08, r25	; 8
 916:	95 e0       	ldi	r25, 0x05	; 5
 918:	9a 95       	dec	r25
 91a:	f1 f7       	brne	.-4      	; 0x918 <LCDBusyLoop+0x66>
 91c:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 91e:	81 11       	cpse	r24, r1
 920:	d5 cf       	rjmp	.-86     	; 0x8cc <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 922:	88 b1       	in	r24, 0x08	; 8
 924:	8f 7d       	andi	r24, 0xDF	; 223
 926:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 928:	87 b1       	in	r24, 0x07	; 7
 92a:	8f 60       	ori	r24, 0x0F	; 15
 92c:	87 b9       	out	0x07, r24	; 7
 92e:	08 95       	ret

Disassembly of section .text.LCDByte:

000009a8 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 9a8:	28 2f       	mov	r18, r24
 9aa:	22 95       	swap	r18
 9ac:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 9ae:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 9b0:	61 11       	cpse	r22, r1
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <LCDByte+0x14>
	CLEAR_RS();
 9b4:	98 b1       	in	r25, 0x08	; 8
 9b6:	9f 7b       	andi	r25, 0xBF	; 191
 9b8:	98 b9       	out	0x08, r25	; 8
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <LCDByte+0x1a>
else
	SET_RS();
 9bc:	98 b1       	in	r25, 0x08	; 8
 9be:	90 64       	ori	r25, 0x40	; 64
 9c0:	98 b9       	out	0x08, r25	; 8
 9c2:	92 e0       	ldi	r25, 0x02	; 2
 9c4:	9a 95       	dec	r25
 9c6:	f1 f7       	brne	.-4      	; 0x9c4 <LCDByte+0x1c>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 9ca:	98 b1       	in	r25, 0x08	; 8
 9cc:	90 68       	ori	r25, 0x80	; 128
 9ce:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 9d0:	98 b1       	in	r25, 0x08	; 8
 9d2:	90 7f       	andi	r25, 0xF0	; 240
 9d4:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 9d6:	98 b9       	out	0x08, r25	; 8
 9d8:	95 e0       	ldi	r25, 0x05	; 5
 9da:	9a 95       	dec	r25
 9dc:	f1 f7       	brne	.-4      	; 0x9da <LCDByte+0x32>
 9de:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 9e0:	98 b1       	in	r25, 0x08	; 8
 9e2:	9f 77       	andi	r25, 0x7F	; 127
 9e4:	98 b9       	out	0x08, r25	; 8
 9e6:	95 e0       	ldi	r25, 0x05	; 5
 9e8:	9a 95       	dec	r25
 9ea:	f1 f7       	brne	.-4      	; 0x9e8 <LCDByte+0x40>
 9ec:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 9ee:	98 b1       	in	r25, 0x08	; 8
 9f0:	90 68       	ori	r25, 0x80	; 128
 9f2:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 9f4:	98 b1       	in	r25, 0x08	; 8
 9f6:	90 7f       	andi	r25, 0xF0	; 240
 9f8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 9fa:	88 b9       	out	0x08, r24	; 8
 9fc:	85 e0       	ldi	r24, 0x05	; 5
 9fe:	8a 95       	dec	r24
 a00:	f1 f7       	brne	.-4      	; 0x9fe <LCDByte+0x56>
 a02:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 a04:	88 b1       	in	r24, 0x08	; 8
 a06:	8f 77       	andi	r24, 0x7F	; 127
 a08:	88 b9       	out	0x08, r24	; 8
 a0a:	95 e0       	ldi	r25, 0x05	; 5
 a0c:	9a 95       	dec	r25
 a0e:	f1 f7       	brne	.-4      	; 0xa0c <LCDByte+0x64>
 a10:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 a12:	0e 94 59 04 	call	0x8b2	; 0x8b2 <LCDBusyLoop>
 a16:	08 95       	ret

Disassembly of section .text.InitLCD:

000007a2 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 7a2:	cf 93       	push	r28
 7a4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a6:	2f ef       	ldi	r18, 0xFF	; 255
 7a8:	86 e7       	ldi	r24, 0x76	; 118
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	21 50       	subi	r18, 0x01	; 1
 7ae:	80 40       	sbci	r24, 0x00	; 0
 7b0:	90 40       	sbci	r25, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <InitLCD+0xa>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <InitLCD+0x14>
 7b6:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 7b8:	87 b1       	in	r24, 0x07	; 7
 7ba:	8f 60       	ori	r24, 0x0F	; 15
 7bc:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 7be:	87 b1       	in	r24, 0x07	; 7
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 7c4:	87 b1       	in	r24, 0x07	; 7
 7c6:	80 64       	ori	r24, 0x40	; 64
 7c8:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 7ca:	87 b1       	in	r24, 0x07	; 7
 7cc:	80 62       	ori	r24, 0x20	; 32
 7ce:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 7d0:	88 b1       	in	r24, 0x08	; 8
 7d2:	80 7f       	andi	r24, 0xF0	; 240
 7d4:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 7d6:	88 b1       	in	r24, 0x08	; 8
 7d8:	8f 77       	andi	r24, 0x7F	; 127
 7da:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 7dc:	88 b1       	in	r24, 0x08	; 8
 7de:	8f 7d       	andi	r24, 0xDF	; 223
 7e0:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 7e2:	88 b1       	in	r24, 0x08	; 8
 7e4:	8f 7b       	andi	r24, 0xBF	; 191
 7e6:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <InitLCD+0x48>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <InitLCD+0x4a>
 7ec:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 7ee:	88 b1       	in	r24, 0x08	; 8
 7f0:	80 68       	ori	r24, 0x80	; 128
 7f2:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 7f4:	88 b1       	in	r24, 0x08	; 8
 7f6:	82 60       	ori	r24, 0x02	; 2
 7f8:	88 b9       	out	0x08, r24	; 8
 7fa:	25 e0       	ldi	r18, 0x05	; 5
 7fc:	2a 95       	dec	r18
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <InitLCD+0x5a>
 800:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 802:	88 b1       	in	r24, 0x08	; 8
 804:	8f 77       	andi	r24, 0x7F	; 127
 806:	88 b9       	out	0x08, r24	; 8
 808:	85 e0       	ldi	r24, 0x05	; 5
 80a:	8a 95       	dec	r24
 80c:	f1 f7       	brne	.-4      	; 0x80a <InitLCD+0x68>
 80e:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 810:	0e 94 59 04 	call	0x8b2	; 0x8b2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	8c 2f       	mov	r24, r28
 818:	8c 60       	ori	r24, 0x0C	; 12
 81a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	88 e2       	ldi	r24, 0x28	; 40
 822:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDByte>
}
 826:	cf 91       	pop	r28
 828:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

000006de <LCDWriteInt>:
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
{
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	00 d0       	rcall	.+0      	; 0x6ec <LCDWriteInt+0xe>
 6ec:	0f 92       	push	r0
 6ee:	0f 92       	push	r0
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 6f6:	fe 01       	movw	r30, r28
 6f8:	31 96       	adiw	r30, 0x01	; 1
 6fa:	25 e0       	ldi	r18, 0x05	; 5
 6fc:	df 01       	movw	r26, r30
 6fe:	1d 92       	st	X+, r1
 700:	2a 95       	dec	r18
 702:	e9 f7       	brne	.-6      	; 0x6fe <LCDWriteInt+0x20>
	int i=4,j=0;
 704:	24 e0       	ldi	r18, 0x04	; 4
 706:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 708:	0f c0       	rjmp	.+30     	; 0x728 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 70a:	6a e0       	ldi	r22, 0x0A	; 10
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
 712:	e1 e0       	ldi	r30, 0x01	; 1
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	ec 0f       	add	r30, r28
 718:	fd 1f       	adc	r31, r29
 71a:	e2 0f       	add	r30, r18
 71c:	f3 1f       	adc	r31, r19
 71e:	80 83       	st	Z, r24
	val=val/10;
 720:	86 2f       	mov	r24, r22
 722:	97 2f       	mov	r25, r23
	i--;
 724:	21 50       	subi	r18, 0x01	; 1
 726:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	79 f7       	brne	.-34     	; 0x70a <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 72c:	bf ef       	ldi	r27, 0xFF	; 255
 72e:	eb 16       	cp	r14, r27
 730:	fb 06       	cpc	r15, r27
 732:	81 f4       	brne	.+32     	; 0x754 <LCDWriteInt+0x76>
 734:	03 c0       	rjmp	.+6      	; 0x73c <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 736:	0f 5f       	subi	r16, 0xFF	; 255
 738:	1f 4f       	sbci	r17, 0xFF	; 255
 73a:	02 c0       	rjmp	.+4      	; 0x740 <LCDWriteInt+0x62>
 73c:	00 e0       	ldi	r16, 0x00	; 0
 73e:	10 e0       	ldi	r17, 0x00	; 0
 740:	e1 e0       	ldi	r30, 0x01	; 1
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	ec 0f       	add	r30, r28
 746:	fd 1f       	adc	r31, r29
 748:	e0 0f       	add	r30, r16
 74a:	f1 1f       	adc	r31, r17
 74c:	20 81       	ld	r18, Z
 74e:	22 23       	and	r18, r18
 750:	91 f3       	breq	.-28     	; 0x736 <LCDWriteInt+0x58>
 752:	04 c0       	rjmp	.+8      	; 0x75c <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 754:	05 e0       	ldi	r16, 0x05	; 5
 756:	10 e0       	ldi	r17, 0x00	; 0
 758:	0e 19       	sub	r16, r14
 75a:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 75c:	99 23       	and	r25, r25
 75e:	94 f4       	brge	.+36     	; 0x784 <LCDWriteInt+0xa6>
 760:	61 e0       	ldi	r22, 0x01	; 1
 762:	8d e2       	ldi	r24, 0x2D	; 45
 764:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDByte>
 768:	0d c0       	rjmp	.+26     	; 0x784 <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 76a:	e1 e0       	ldi	r30, 0x01	; 1
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	ec 0f       	add	r30, r28
 770:	fd 1f       	adc	r31, r29
 772:	e0 0f       	add	r30, r16
 774:	f1 1f       	adc	r31, r17
 776:	80 81       	ld	r24, Z
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	80 5d       	subi	r24, 0xD0	; 208
 77c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 780:	0f 5f       	subi	r16, 0xFF	; 255
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	05 30       	cpi	r16, 0x05	; 5
 786:	11 05       	cpc	r17, r1
 788:	84 f3       	brlt	.-32     	; 0x76a <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

00000ee8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 ee8:	88 32       	cpi	r24, 0x28	; 40
 eea:	30 f4       	brcc	.+12     	; 0xef8 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 eec:	61 11       	cpse	r22, r1
 eee:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 ef0:	60 e0       	ldi	r22, 0x00	; 0
 ef2:	80 68       	ori	r24, 0x80	; 128
 ef4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDByte>
 ef8:	08 95       	ret

Disassembly of section .text.setup:

00000f08 <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
 f08:	fc 01       	movw	r30, r24
 f0a:	11 82       	std	Z+1, r1	; 0x01
 f0c:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
 f0e:	fb 01       	movw	r30, r22
 f10:	11 82       	std	Z+1, r1	; 0x01
 f12:	10 82       	st	Z, r1
 f14:	08 95       	ret

Disassembly of section .text.initLink:

00000e98 <initLink>:

/**************************************************************************************
* DESC: This initializes a link and returns the pointer to the new link or NULL if error 
* INPUT: the head and tail pointers by reference
*/
void initLink(link **newLink){
 e98:	cf 93       	push	r28
 e9a:	df 93       	push	r29
 e9c:	ec 01       	movw	r28, r24
	//link *l;
	*newLink = malloc(sizeof(link));
 e9e:	83 e0       	ldi	r24, 0x03	; 3
 ea0:	90 e0       	ldi	r25, 0x00	; 0
 ea2:	0e 94 02 03 	call	0x604	; 0x604 <__simple_malloc>
 ea6:	99 83       	std	Y+1, r25	; 0x01
 ea8:	88 83       	st	Y, r24
	(*newLink)->next = NULL;
 eaa:	fc 01       	movw	r30, r24
 eac:	12 82       	std	Z+2, r1	; 0x02
 eae:	11 82       	std	Z+1, r1	; 0x01
	return;
}/*initLink*/
 eb0:	df 91       	pop	r29
 eb2:	cf 91       	pop	r28
 eb4:	08 95       	ret

Disassembly of section .text.enqueue:

00000cf8 <enqueue>:
*  INPUT: the head and tail pointers, and a pointer to the new link that was created 
*/
/* will put an item at the tail of the queue */
void enqueue(link **h, link **t, link **nL){

	if (*t != NULL){
 cf8:	db 01       	movw	r26, r22
 cfa:	ed 91       	ld	r30, X+
 cfc:	fc 91       	ld	r31, X
 cfe:	30 97       	sbiw	r30, 0x00	; 0
 d00:	61 f0       	breq	.+24     	; 0xd1a <enqueue+0x22>
		/* Not an empty queue */
		(*t)->next = *nL;
 d02:	da 01       	movw	r26, r20
 d04:	8d 91       	ld	r24, X+
 d06:	9c 91       	ld	r25, X
 d08:	11 97       	sbiw	r26, 0x01	; 1
 d0a:	92 83       	std	Z+2, r25	; 0x02
 d0c:	81 83       	std	Z+1, r24	; 0x01
		*t = *nL; //(*t)->next;
 d0e:	8d 91       	ld	r24, X+
 d10:	9c 91       	ld	r25, X
 d12:	fb 01       	movw	r30, r22
 d14:	91 83       	std	Z+1, r25	; 0x01
 d16:	80 83       	st	Z, r24
 d18:	08 95       	ret
	}/*if*/
	else{
		/* It's an empty Queue */
		//(*h)->next = *nL;
		//should be this
		*h = *nL;
 d1a:	da 01       	movw	r26, r20
 d1c:	2d 91       	ld	r18, X+
 d1e:	3c 91       	ld	r19, X
 d20:	11 97       	sbiw	r26, 0x01	; 1
 d22:	fc 01       	movw	r30, r24
 d24:	31 83       	std	Z+1, r19	; 0x01
 d26:	20 83       	st	Z, r18
		*t = *nL;
 d28:	8d 91       	ld	r24, X+
 d2a:	9c 91       	ld	r25, X
 d2c:	db 01       	movw	r26, r22
 d2e:	8d 93       	st	X+, r24
 d30:	9c 93       	st	X, r25
 d32:	08 95       	ret

Disassembly of section .text.dequeue:

00000da2 <dequeue>:
* DESC : Removes the link from the head of the list and assigns it to deQueuedLink
* INPUT: The head and tail pointers, and a ptr 'deQueuedLink' 
* 		 which the removed link will be assigned to
*/
/* This will remove the link and element within the link from the head of the queue */
void dequeue(link **h, link **t, link **deQueuedLink){
 da2:	fc 01       	movw	r30, r24
	*deQueuedLink = *h;	// Will set to NULL if Head points to NULL
 da4:	80 81       	ld	r24, Z
 da6:	91 81       	ldd	r25, Z+1	; 0x01
 da8:	da 01       	movw	r26, r20
 daa:	8d 93       	st	X+, r24
 dac:	9c 93       	st	X, r25
	/* Ensure it is not an empty queue */
	if (*h != NULL){
 dae:	a0 81       	ld	r26, Z
 db0:	b1 81       	ldd	r27, Z+1	; 0x01
 db2:	10 97       	sbiw	r26, 0x00	; 0
 db4:	31 f0       	breq	.+12     	; 0xdc2 <dequeue+0x20>
		*h = (*h)->next; // NULL when there's only 1 thing in the list	
 db6:	11 96       	adiw	r26, 0x01	; 1
 db8:	8d 91       	ld	r24, X+
 dba:	9c 91       	ld	r25, X
 dbc:	12 97       	sbiw	r26, 0x02	; 2
 dbe:	91 83       	std	Z+1, r25	; 0x01
 dc0:	80 83       	st	Z, r24
	}/*if*/
	if (*h == NULL){
 dc2:	80 81       	ld	r24, Z
 dc4:	91 81       	ldd	r25, Z+1	; 0x01
 dc6:	89 2b       	or	r24, r25
 dc8:	19 f4       	brne	.+6      	; 0xdd0 <dequeue+0x2e>
		*t = NULL;
 dca:	fb 01       	movw	r30, r22
 dcc:	11 82       	std	Z+1, r1	; 0x01
 dce:	10 82       	st	Z, r1
 dd0:	08 95       	ret

Disassembly of section .text.main:

00000172 <main>:


int main(void)
{
	/* Disable global interrupt */
	cli();
 172:	f8 94       	cli
		
	/* Initialize main clock: 8 MHz */
	CLKPR = 0x80;
 174:	e1 e6       	ldi	r30, 0x61	; 97
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	80 83       	st	Z, r24
	CLKPR = 0x01;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
	
	/* Set PORTC as output to display ADC result */
	DDRL = 0xF0;
 180:	80 ef       	ldi	r24, 0xF0	; 240
 182:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRA &= ~(_BV(PA6) | _BV(PA7)); // external switch interrupts
 186:	81 b1       	in	r24, 0x01	; 1
 188:	8f 73       	andi	r24, 0x3F	; 63
 18a:	81 b9       	out	0x01, r24	; 1

	
	/* Initialize LCD */
	InitLCD(LS_BLINK|LS_ULINE);
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <InitLCD>
	LCDClear();
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCDByte>
	
	/* Initialize ADC */
	init_adc();
 19a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <init_adc>
	free_running_adc();
 19e:	0e 94 8b 07 	call	0xf16	; 0xf16 <free_running_adc>

	/* Initialize DC Motor */
	init_pwm();
 1a2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <init_pwm>
	change_pwm_speed(60);
 1a6:	8c e3       	ldi	r24, 0x3C	; 60
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 a8 07 	call	0xf50	; 0xf50 <change_pwm_speed>
	init_dc_motor();
 1ae:	0e 94 3b 07 	call	0xe76	; 0xe76 <init_dc_motor>
	
	sei();
 1b2:	78 94       	sei

	/* Initialize Stepper Motor and Plate Position */
	init_stepper_motor();
 1b4:	0e 94 32 06 	call	0xc64	; 0xc64 <init_stepper_motor>
	current_plate = BLACK;
 1b8:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <current_plate>

	setup(&head, &tail);
 1bc:	68 e0       	ldi	r22, 0x08	; 8
 1be:	72 e0       	ldi	r23, 0x02	; 2
 1c0:	8a e0       	ldi	r24, 0x0A	; 10
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	0e 94 84 07 	call	0xf08	; 0xf08 <setup>

	run_dc_motor();
 1c8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <run_dc_motor>

	while(1){			

		PORTL = 0x10;
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>

		/* EX HIGH: object not at exit */
		while(!EX){ // when something at the exit stop
 1d2:	70 c0       	rjmp	.+224    	; 0x2b4 <main+0x142>
			PORTL = 0x20;
 1d4:	80 e2       	ldi	r24, 0x20	; 32
 1d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			brake_dc_motor();			
 1da:	0e 94 a2 07 	call	0xf44	; 0xf44 <brake_dc_motor>

			switch(head->e.itemMaterial){
 1de:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <head>
 1e2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <head+0x1>
 1e6:	80 81       	ld	r24, Z
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	c9 f0       	breq	.+50     	; 0x21e <main+0xac>
 1ec:	f0 f1       	brcs	.+124    	; 0x26a <main+0xf8>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	49 f1       	breq	.+82     	; 0x244 <main+0xd2>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <main+0x86>
 1f6:	4a c0       	rjmp	.+148    	; 0x28c <main+0x11a>
				case(ALUMINUM):
					StepperMotor_Rotate(rotations[current_plate][ALUMINUM]);
 1f8:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e3 5e       	subi	r30, 0xE3	; 227
 208:	fd 4f       	sbci	r31, 0xFD	; 253
 20a:	83 81       	ldd	r24, Z+3	; 0x03
 20c:	08 2e       	mov	r0, r24
 20e:	00 0c       	add	r0, r0
 210:	99 0b       	sbc	r25, r25
 212:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <StepperMotor_Rotate>
					current_plate = ALUMINUM;
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <current_plate>
					break;
 21c:	37 c0       	rjmp	.+110    	; 0x28c <main+0x11a>
				
				case(STEEL):
					StepperMotor_Rotate(rotations[current_plate][STEEL]);
 21e:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e3 5e       	subi	r30, 0xE3	; 227
 22e:	fd 4f       	sbci	r31, 0xFD	; 253
 230:	81 81       	ldd	r24, Z+1	; 0x01
 232:	08 2e       	mov	r0, r24
 234:	00 0c       	add	r0, r0
 236:	99 0b       	sbc	r25, r25
 238:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <StepperMotor_Rotate>
					current_plate = STEEL;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <current_plate>
					break;
 242:	24 c0       	rjmp	.+72     	; 0x28c <main+0x11a>
				
				case(WHITE):
					StepperMotor_Rotate(rotations[current_plate][WHITE]);
 244:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	e3 5e       	subi	r30, 0xE3	; 227
 254:	fd 4f       	sbci	r31, 0xFD	; 253
 256:	82 81       	ldd	r24, Z+2	; 0x02
 258:	08 2e       	mov	r0, r24
 25a:	00 0c       	add	r0, r0
 25c:	99 0b       	sbc	r25, r25
 25e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <StepperMotor_Rotate>
					current_plate = WHITE;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <current_plate>
					break;
 268:	11 c0       	rjmp	.+34     	; 0x28c <main+0x11a>
				
				case(BLACK):
					StepperMotor_Rotate(rotations[current_plate][BLACK]);
 26a:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e3 5e       	subi	r30, 0xE3	; 227
 27a:	fd 4f       	sbci	r31, 0xFD	; 253
 27c:	80 81       	ld	r24, Z
 27e:	08 2e       	mov	r0, r24
 280:	00 0c       	add	r0, r0
 282:	99 0b       	sbc	r25, r25
 284:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <StepperMotor_Rotate>
					current_plate = BLACK;
 288:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <current_plate>
					break;
			}

			run_dc_motor();
 28c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <run_dc_motor>
			mTimer(500);
 290:	84 ef       	ldi	r24, 0xF4	; 244
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>

			dequeue(&head, &tail, &rtnLink);
 298:	46 e0       	ldi	r20, 0x06	; 6
 29a:	52 e0       	ldi	r21, 0x02	; 2
 29c:	68 e0       	ldi	r22, 0x08	; 8
 29e:	72 e0       	ldi	r23, 0x02	; 2
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	0e 94 d1 06 	call	0xda2	; 0xda2 <dequeue>
			free(rtnLink);
 2a8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rtnLink>
 2ac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <rtnLink+0x1>
 2b0:	0e 94 98 04 	call	0x930	; 0x930 <__simple_free>
	while(1){			

		PORTL = 0x10;

		/* EX HIGH: object not at exit */
		while(!EX){ // when something at the exit stop
 2b4:	1d 9b       	sbis	0x03, 5	; 3
 2b6:	8e cf       	rjmp	.-228    	; 0x1d4 <main+0x62>
 2b8:	21 c0       	rjmp	.+66     	; 0x2fc <main+0x18a>
			free(rtnLink);
		}
		

		while(OR){ // when object is at the reflective sensor
			start_conversion();
 2ba:	0e 94 7d 07 	call	0xefa	; 0xefa <start_conversion>
			PORTL = 0xF0;
 2be:	80 ef       	ldi	r24, 0xF0	; 240
 2c0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	
			if(ADC_result_flag){
 2c4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <ADC_result_flag>
 2c8:	88 23       	and	r24, r24
 2ca:	99 f0       	breq	.+38     	; 0x2f2 <main+0x180>
				if(ADC_result < ADC_curr_min){
 2cc:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <ADC_result>
 2d0:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <ADC_result+0x1>
 2d4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 2d8:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 2dc:	28 17       	cp	r18, r24
 2de:	39 07       	cpc	r19, r25
 2e0:	40 f4       	brcc	.+16     	; 0x2f2 <main+0x180>
					ADC_curr_min = ADC_result;
 2e2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
 2e6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 2ea:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ADC_curr_min+0x1>
 2ee:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ADC_curr_min>
				}
				//ADCSRA |= _BV(ADSC);
			}
			
			ADC_result_flag = 0;
 2f2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <ADC_result_flag>
			item_adc_ready = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <item_adc_ready>
			dequeue(&head, &tail, &rtnLink);
			free(rtnLink);
		}
		

		while(OR){ // when object is at the reflective sensor
 2fc:	1c 99       	sbic	0x03, 4	; 3
 2fe:	dd cf       	rjmp	.-70     	; 0x2ba <main+0x148>
			
			ADC_result_flag = 0;
			item_adc_ready = 1;
		}

		if(item_adc_ready){
 300:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <item_adc_ready>
 304:	88 23       	and	r24, r24
 306:	09 f4       	brne	.+2      	; 0x30a <main+0x198>
 308:	e6 c0       	rjmp	.+460    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			initLink(&newLink); // creating a new link in the linked list
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	0e 94 4c 07 	call	0xe98	; 0xe98 <initLink>

			disable_adc();
 312:	0e 94 91 07 	call	0xf22	; 0xf22 <disable_adc>
			item_counter += 1;
 316:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <item_counter>
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <item_counter>

			if(item_counter == 1){
 320:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <item_counter>
 324:	81 30       	cpi	r24, 0x01	; 1
 326:	89 f4       	brne	.+34     	; 0x34a <main+0x1d8>
				ADC_min_min = ADC_curr_min;
 328:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 32c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 330:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <ADC_min_min+0x1>
 334:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <ADC_min_min>
				ADC_max_min = ADC_curr_min;
 338:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 33c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 340:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <ADC_max_min+0x1>
 344:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ADC_max_min>
 348:	26 c0       	rjmp	.+76     	; 0x396 <main+0x224>
			} else {
				if(ADC_min_min > ADC_curr_min){
 34a:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <ADC_min_min>
 34e:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <ADC_min_min+0x1>
 352:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 356:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 35a:	82 17       	cp	r24, r18
 35c:	93 07       	cpc	r25, r19
 35e:	40 f4       	brcc	.+16     	; 0x370 <main+0x1fe>
					ADC_min_min = ADC_curr_min;
 360:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 364:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 368:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <ADC_min_min+0x1>
 36c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <ADC_min_min>
				}
				if(ADC_max_min < ADC_curr_min){
 370:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <ADC_max_min>
 374:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <ADC_max_min+0x1>
 378:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 37c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	40 f4       	brcc	.+16     	; 0x396 <main+0x224>
					ADC_max_min = ADC_curr_min;
 386:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 38a:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 38e:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <ADC_max_min+0x1>
 392:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ADC_max_min>
				}
			}

			if(ADC_curr_min >= WHITE_BLACK_BOUND){
 396:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 39a:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 39e:	88 39       	cpi	r24, 0x98	; 152
 3a0:	93 40       	sbci	r25, 0x03	; 3
 3a2:	58 f0       	brcs	.+22     	; 0x3ba <main+0x248>
				newLink->e.itemMaterial = BLACK; // 1
 3a4:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 3a8:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 3ac:	10 82       	st	Z, r1
				black_counter += 1;
 3ae:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <black_counter>
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <black_counter>
 3b8:	31 c0       	rjmp	.+98     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

			} else if(ADC_curr_min >= STEEL_WHITE_BOUND){
 3ba:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 3be:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 3c2:	80 32       	cpi	r24, 0x20	; 32
 3c4:	93 40       	sbci	r25, 0x03	; 3
 3c6:	60 f0       	brcs	.+24     	; 0x3e0 <main+0x26e>
				newLink->e.itemMaterial = WHITE; // 3
 3c8:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 3cc:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 83       	st	Z, r24
				white_counter += 1;
 3d4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <white_counter>
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <white_counter>
 3de:	1e c0       	rjmp	.+60     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

			} else if(ADC_curr_min >= ALUMINUM_STEEL_BOUND){
 3e0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 3e4:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 3e8:	84 36       	cpi	r24, 0x64	; 100
 3ea:	91 05       	cpc	r25, r1
 3ec:	60 f0       	brcs	.+24     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				newLink->e.itemMaterial = STEEL; // 2
 3ee:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 3f2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 83       	st	Z, r24
				steel_counter += 1;
 3fa:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <steel_counter>
 3fe:	8f 5f       	subi	r24, 0xFF	; 255
 400:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <steel_counter>
 404:	0b c0       	rjmp	.+22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

			} else {
				newLink->e.itemMaterial = ALUMINUM; // 4
 406:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 40a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 40e:	83 e0       	ldi	r24, 0x03	; 3
 410:	80 83       	st	Z, r24
				aluminum_counter += 1;
 412:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <aluminum_counter>
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <aluminum_counter>
			}


			enqueue(&head, &tail, &newLink);
 41c:	40 e1       	ldi	r20, 0x10	; 16
 41e:	52 e0       	ldi	r21, 0x02	; 2
 420:	68 e0       	ldi	r22, 0x08	; 8
 422:	72 e0       	ldi	r23, 0x02	; 2
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	92 e0       	ldi	r25, 0x02	; 2
 428:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <enqueue>

			
			LCDWriteIntXY(0,0,item_counter,3);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 74 07 	call	0xee8	; 0xee8 <LCDGotoXY>
 434:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <item_counter>
 438:	63 e0       	ldi	r22, 0x03	; 3
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 6f 03 	call	0x6de	; 0x6de <LCDWriteInt>
			LCDWriteIntXY(5,0,ADC_counter,5);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	85 e0       	ldi	r24, 0x05	; 5
 446:	0e 94 74 07 	call	0xee8	; 0xee8 <LCDGotoXY>
 44a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ADC_counter>
 44e:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ADC_counter+0x1>
 452:	65 e0       	ldi	r22, 0x05	; 5
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	0e 94 6f 03 	call	0x6de	; 0x6de <LCDWriteInt>
			LCDWriteIntXY(12,0,newLink->e.itemMaterial, 1);
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	0e 94 74 07 	call	0xee8	; 0xee8 <LCDGotoXY>
 462:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 466:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 46a:	80 81       	ld	r24, Z
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 6f 03 	call	0x6de	; 0x6de <LCDWriteInt>
			LCDWriteIntXY(0,1,ADC_min_min,4);
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 74 07 	call	0xee8	; 0xee8 <LCDGotoXY>
 47e:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <ADC_min_min>
 482:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <ADC_min_min+0x1>
 486:	64 e0       	ldi	r22, 0x04	; 4
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	0e 94 6f 03 	call	0x6de	; 0x6de <LCDWriteInt>
			LCDWriteIntXY(5,1,ADC_max_min,4);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	85 e0       	ldi	r24, 0x05	; 5
 492:	0e 94 74 07 	call	0xee8	; 0xee8 <LCDGotoXY>
 496:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ADC_max_min>
 49a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <ADC_max_min+0x1>
 49e:	64 e0       	ldi	r22, 0x04	; 4
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	0e 94 6f 03 	call	0x6de	; 0x6de <LCDWriteInt>
			LCDWriteIntXY(10,1,ADC_curr_min,4);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	8a e0       	ldi	r24, 0x0A	; 10
 4aa:	0e 94 74 07 	call	0xee8	; 0xee8 <LCDGotoXY>
 4ae:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 4b2:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 4b6:	64 e0       	ldi	r22, 0x04	; 4
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	0e 94 6f 03 	call	0x6de	; 0x6de <LCDWriteInt>
			
			item_adc_ready = 0;
 4be:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <item_adc_ready>
			ADC_counter = 0;
 4c2:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ADC_counter+0x1>
 4c6:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ADC_counter>
			ADC_curr_min = 1023;
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	93 e0       	ldi	r25, 0x03	; 3
 4ce:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ADC_curr_min+0x1>
 4d2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ADC_curr_min>

		// TODO: dequeue while dropping
		

		// TODO: create new link and add to queue
		if(ADC_result_flag){
 4d6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <ADC_result_flag>
 4da:	81 11       	cpse	r24, r1
			ADC_result_flag = 0;
 4dc:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <ADC_result_flag>
			
		}

		/* Stop dc motor */
		if(kill_flag){
 4e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 4e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4e8:	89 2b       	or	r24, r25
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			brake_dc_motor();
 4ec:	0e 94 a2 07 	call	0xf44	; 0xf44 <brake_dc_motor>
		}

		/* reset numbers */		
		if(reset_flag){
 4f0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <reset_flag>
 4f4:	88 23       	and	r24, r24
 4f6:	09 f4       	brne	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4f8:	69 ce       	rjmp	.-814    	; 0x1cc <main+0x5a>
			ADC_max_min = 0;
 4fa:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <ADC_max_min+0x1>
 4fe:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ADC_max_min>
			ADC_min_min = 1023;
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	93 e0       	ldi	r25, 0x03	; 3
 506:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <ADC_min_min+0x1>
 50a:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <ADC_min_min>
			ADC_curr_min = 1023;
 50e:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ADC_curr_min+0x1>
 512:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ADC_curr_min>
			item_counter = 0;
 516:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <item_counter>
			ADC_counter = 0;
 51a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ADC_counter+0x1>
 51e:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ADC_counter>
 522:	54 ce       	rjmp	.-856    	; 0x1cc <main+0x5a>

Disassembly of section .text.__vector_default:

00000f58 <__vector_default>:

}


/***** Interrupt Service Routines *****/
EMPTY_INTERRUPT(BADISR_vect);
 f58:	18 95       	reti

Disassembly of section .text.__vector_29:

0000082a <__vector_29>:


ISR(ADC_vect){ //ADC conversion done
 82a:	1f 92       	push	r1
 82c:	0f 92       	push	r0
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	0f 92       	push	r0
 832:	11 24       	eor	r1, r1
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	8f 93       	push	r24
 83a:	9f 93       	push	r25
	ADC_result = (ADCL >> 6) + (ADCH << 2);
 83c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 840:	22 95       	swap	r18
 842:	26 95       	lsr	r18
 844:	26 95       	lsr	r18
 846:	23 70       	andi	r18, 0x03	; 3
 848:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	82 0f       	add	r24, r18
 858:	91 1d       	adc	r25, r1
 85a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <ADC_result+0x1>
 85e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <ADC_result>
	if(ADC_result < ADC_curr_min){
 862:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <ADC_result>
 866:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <ADC_result+0x1>
 86a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ADC_curr_min>
 86e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <ADC_curr_min+0x1>
 872:	28 17       	cp	r18, r24
 874:	39 07       	cpc	r19, r25
 876:	40 f4       	brcc	.+16     	; 0x888 <__vector_29+0x5e>
		ADC_curr_min = ADC_result;
 878:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <ADC_result>
 87c:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result+0x1>
 880:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <ADC_curr_min+0x1>
 884:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ADC_curr_min>
	}
	ADC_result_flag = 1;
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <ADC_result_flag>
	ADC_counter += 1;
 88e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ADC_counter>
 892:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ADC_counter+0x1>
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ADC_counter+0x1>
 89c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ADC_counter>
}
 8a0:	9f 91       	pop	r25
 8a2:	8f 91       	pop	r24
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

Disassembly of section .text.__vector_5:

00000a86 <__vector_5>:


ISR(INT4_vect){ // stop motor
 a86:	1f 92       	push	r1
 a88:	0f 92       	push	r0
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	0f 92       	push	r0
 a8e:	11 24       	eor	r1, r1
 a90:	0b b6       	in	r0, 0x3b	; 59
 a92:	0f 92       	push	r0
 a94:	2f 93       	push	r18
 a96:	3f 93       	push	r19
 a98:	4f 93       	push	r20
 a9a:	5f 93       	push	r21
 a9c:	6f 93       	push	r22
 a9e:	7f 93       	push	r23
 aa0:	8f 93       	push	r24
 aa2:	9f 93       	push	r25
 aa4:	af 93       	push	r26
 aa6:	bf 93       	push	r27
 aa8:	ef 93       	push	r30
 aaa:	ff 93       	push	r31
	mTimer(25);
 aac:	89 e1       	ldi	r24, 0x19	; 25
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
	kill_flag = 1;
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 abc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	while((PINE & 0x02) == 0x00);
 ac0:	61 9b       	sbis	0x0c, 1	; 12
 ac2:	fe cf       	rjmp	.-4      	; 0xac0 <__vector_5+0x3a>
	mTimer(25);	
 ac4:	89 e1       	ldi	r24, 0x19	; 25
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
}
 acc:	ff 91       	pop	r31
 ace:	ef 91       	pop	r30
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	7f 91       	pop	r23
 ada:	6f 91       	pop	r22
 adc:	5f 91       	pop	r21
 ade:	4f 91       	pop	r20
 ae0:	3f 91       	pop	r19
 ae2:	2f 91       	pop	r18
 ae4:	0f 90       	pop	r0
 ae6:	0b be       	out	0x3b, r0	; 59
 ae8:	0f 90       	pop	r0
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	0f 90       	pop	r0
 aee:	1f 90       	pop	r1
 af0:	18 95       	reti

Disassembly of section .text.__vector_6:

00000af2 <__vector_6>:

ISR(INT5_vect){
 af2:	1f 92       	push	r1
 af4:	0f 92       	push	r0
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	0f 92       	push	r0
 afa:	11 24       	eor	r1, r1
 afc:	0b b6       	in	r0, 0x3b	; 59
 afe:	0f 92       	push	r0
 b00:	2f 93       	push	r18
 b02:	3f 93       	push	r19
 b04:	4f 93       	push	r20
 b06:	5f 93       	push	r21
 b08:	6f 93       	push	r22
 b0a:	7f 93       	push	r23
 b0c:	8f 93       	push	r24
 b0e:	9f 93       	push	r25
 b10:	af 93       	push	r26
 b12:	bf 93       	push	r27
 b14:	ef 93       	push	r30
 b16:	ff 93       	push	r31
	mTimer(25);
 b18:	89 e1       	ldi	r24, 0x19	; 25
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
	reset_flag = 1;
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <reset_flag>
	while((PINE & 0x01) == 0x00);
 b26:	60 9b       	sbis	0x0c, 0	; 12
 b28:	fe cf       	rjmp	.-4      	; 0xb26 <__vector_6+0x34>
	mTimer(25);	
 b2a:	89 e1       	ldi	r24, 0x19	; 25
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
}
 b32:	ff 91       	pop	r31
 b34:	ef 91       	pop	r30
 b36:	bf 91       	pop	r27
 b38:	af 91       	pop	r26
 b3a:	9f 91       	pop	r25
 b3c:	8f 91       	pop	r24
 b3e:	7f 91       	pop	r23
 b40:	6f 91       	pop	r22
 b42:	5f 91       	pop	r21
 b44:	4f 91       	pop	r20
 b46:	3f 91       	pop	r19
 b48:	2f 91       	pop	r18
 b4a:	0f 90       	pop	r0
 b4c:	0b be       	out	0x3b, r0	; 59
 b4e:	0f 90       	pop	r0
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	0f 90       	pop	r0
 b54:	1f 90       	pop	r1
 b56:	18 95       	reti

Disassembly of section .text.__vector_3:

00000c10 <__vector_3>:

ISR(INT2_vect){ // OR sensor is logic high when object in
 c10:	1f 92       	push	r1
 c12:	0f 92       	push	r0
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	0f 92       	push	r0
 c18:	11 24       	eor	r1, r1
 c1a:	0b b6       	in	r0, 0x3b	; 59
 c1c:	0f 92       	push	r0
 c1e:	2f 93       	push	r18
 c20:	3f 93       	push	r19
 c22:	4f 93       	push	r20
 c24:	5f 93       	push	r21
 c26:	6f 93       	push	r22
 c28:	7f 93       	push	r23
 c2a:	8f 93       	push	r24
 c2c:	9f 93       	push	r25
 c2e:	af 93       	push	r26
 c30:	bf 93       	push	r27
 c32:	ef 93       	push	r30
 c34:	ff 93       	push	r31
	enable_adc();
 c36:	0e 94 97 07 	call	0xf2e	; 0xf2e <enable_adc>
	start_conversion();
 c3a:	0e 94 7d 07 	call	0xefa	; 0xefa <start_conversion>
 c3e:	ff 91       	pop	r31
 c40:	ef 91       	pop	r30
 c42:	bf 91       	pop	r27
 c44:	af 91       	pop	r26
 c46:	9f 91       	pop	r25
 c48:	8f 91       	pop	r24
 c4a:	7f 91       	pop	r23
 c4c:	6f 91       	pop	r22
 c4e:	5f 91       	pop	r21
 c50:	4f 91       	pop	r20
 c52:	3f 91       	pop	r19
 c54:	2f 91       	pop	r18
 c56:	0f 90       	pop	r0
 c58:	0b be       	out	0x3b, r0	; 59
 c5a:	0f 90       	pop	r0
 c5c:	0f be       	out	0x3f, r0	; 63
 c5e:	0f 90       	pop	r0
 c60:	1f 90       	pop	r1
 c62:	18 95       	reti

Disassembly of section .text.mTimer:

00000cb8 <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 cb8:	e1 e8       	ldi	r30, 0x81	; 129
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	20 81       	ld	r18, Z
 cbe:	2a 60       	ori	r18, 0x0A	; 10
 cc0:	20 83       	st	Z, r18
	OCR1A = 0x03EB; // Set output compare register for 1000 ticks which equals to 1ms
 cc2:	2b ee       	ldi	r18, 0xEB	; 235
 cc4:	33 e0       	ldi	r19, 0x03	; 3
 cc6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 cca:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
 cce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 cd2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 cd6:	26 b3       	in	r18, 0x16	; 22
 cd8:	22 60       	ori	r18, 0x02	; 2
 cda:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 cdc:	20 e0       	ldi	r18, 0x00	; 0
 cde:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 ce2:	b1 9b       	sbis	0x16, 1	; 22
 ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 ce6:	46 b3       	in	r20, 0x16	; 22
 ce8:	42 60       	ori	r20, 0x02	; 2
 cea:	46 bb       	out	0x16, r20	; 22
			i++;
 cec:	2f 5f       	subi	r18, 0xFF	; 255
 cee:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 cf0:	28 17       	cp	r18, r24
 cf2:	39 07       	cpc	r19, r25
 cf4:	b4 f3       	brlt	.-20     	; 0xce2 <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
 cf6:	08 95       	ret

Disassembly of section .text.init_pwm:

00000dfe <init_pwm>:

/****** PWM ******/

void init_pwm(){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
 dfe:	84 b5       	in	r24, 0x24	; 36
 e00:	83 60       	ori	r24, 0x03	; 3
 e02:	84 bd       	out	0x24, r24	; 36
	
	/* Step 2: Enable output compare interrupt for Timer 0 */
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
 e04:	ee e6       	ldi	r30, 0x6E	; 110
 e06:	f0 e0       	ldi	r31, 0x00	; 0
 e08:	80 81       	ld	r24, Z
 e0a:	82 60       	ori	r24, 0x02	; 2
 e0c:	80 83       	st	Z, r24
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
 e0e:	84 b5       	in	r24, 0x24	; 36
 e10:	80 68       	ori	r24, 0x80	; 128
 e12:	84 bd       	out	0x24, r24	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
 e14:	85 b5       	in	r24, 0x25	; 37
 e16:	82 60       	ori	r24, 0x02	; 2
 e18:	85 bd       	out	0x25, r24	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = 127;							// 50% -----> 256 * 50% - 1 = 127
 e1a:	8f e7       	ldi	r24, 0x7F	; 127
 e1c:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
 e1e:	84 b1       	in	r24, 0x04	; 4
 e20:	80 68       	ori	r24, 0x80	; 128
 e22:	84 b9       	out	0x04, r24	; 4
 e24:	08 95       	ret

Disassembly of section .text.change_pwm_speed:

00000f50 <change_pwm_speed>:
}

void change_pwm_speed(unsigned int speed){
	OCR0A = speed;
 f50:	87 bd       	out	0x27, r24	; 39
 f52:	08 95       	ret

Disassembly of section .text.init_stepper_motor:

00000c64 <init_stepper_motor>:




/* Initialize Stepper Motor to Black */
void init_stepper_motor(){
 c64:	cf 93       	push	r28
 c66:	df 93       	push	r29

	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
 c68:	81 b1       	in	r24, 0x01	; 1
 c6a:	8f 63       	ori	r24, 0x3F	; 63
 c6c:	81 b9       	out	0x01, r24	; 1

	PORTL = 0xF0;
 c6e:	80 ef       	ldi	r24, 0xF0	; 240
 c70:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	int i = 0;
 c74:	c0 e0       	ldi	r28, 0x00	; 0
 c76:	d0 e0       	ldi	r29, 0x00	; 0

	while(HE){ // HE: active low
 c78:	17 c0       	rjmp	.+46     	; 0xca8 <init_stepper_motor+0x44>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[i % 4];
 c7a:	22 b1       	in	r18, 0x02	; 2
 c7c:	ce 01       	movw	r24, r28
 c7e:	83 70       	andi	r24, 0x03	; 3
 c80:	90 78       	andi	r25, 0x80	; 128
 c82:	99 23       	and	r25, r25
 c84:	24 f4       	brge	.+8      	; 0xc8e <init_stepper_motor+0x2a>
 c86:	01 97       	sbiw	r24, 0x01	; 1
 c88:	8c 6f       	ori	r24, 0xFC	; 252
 c8a:	9f 6f       	ori	r25, 0xFF	; 255
 c8c:	01 96       	adiw	r24, 0x01	; 1
 c8e:	fc 01       	movw	r30, r24
 c90:	e3 5d       	subi	r30, 0xD3	; 211
 c92:	fd 4f       	sbci	r31, 0xFD	; 253
 c94:	90 81       	ld	r25, Z
 c96:	82 2f       	mov	r24, r18
 c98:	80 7c       	andi	r24, 0xC0	; 192
 c9a:	89 2b       	or	r24, r25
 c9c:	82 b9       	out	0x02, r24	; 2
		mTimer(20);
 c9e:	84 e1       	ldi	r24, 0x14	; 20
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
		i += 1;
 ca6:	21 96       	adiw	r28, 0x01	; 1
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));

	PORTL = 0xF0;
	int i = 0;

	while(HE){ // HE: active low
 ca8:	1e 99       	sbic	0x03, 6	; 3
 caa:	e7 cf       	rjmp	.-50     	; 0xc7a <init_stepper_motor+0x16>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[i % 4];
		mTimer(20);
		i += 1;
	}

	current_step = INIT_STEP;
 cac:	82 e0       	ldi	r24, 0x02	; 2
 cae:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <current_step>
}
 cb2:	df 91       	pop	r29
 cb4:	cf 91       	pop	r28
 cb6:	08 95       	ret

Disassembly of section .text.StepperMotor_CW:

00000bb8 <StepperMotor_CW>:
			StepperMotor_CW(-num_steps);
		} // do nothing if num_steps = 0
}


void StepperMotor_CW (int num_steps){
 bb8:	0f 93       	push	r16
 bba:	1f 93       	push	r17
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
 bc0:	8c 01       	movw	r16, r24
    int i = 0;
 bc2:	c0 e0       	ldi	r28, 0x00	; 0
 bc4:	d0 e0       	ldi	r29, 0x00	; 0
    while(i < num_steps){
 bc6:	1c c0       	rjmp	.+56     	; 0xc00 <StepperMotor_CW+0x48>
        STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[(current_step+i)%4];
 bc8:	22 b1       	in	r18, 0x02	; 2
 bca:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <current_step>
 bce:	ae 01       	movw	r20, r28
 bd0:	48 0f       	add	r20, r24
 bd2:	51 1d       	adc	r21, r1
 bd4:	ca 01       	movw	r24, r20
 bd6:	83 70       	andi	r24, 0x03	; 3
 bd8:	90 78       	andi	r25, 0x80	; 128
 bda:	99 23       	and	r25, r25
 bdc:	24 f4       	brge	.+8      	; 0xbe6 <StepperMotor_CW+0x2e>
 bde:	01 97       	sbiw	r24, 0x01	; 1
 be0:	8c 6f       	ori	r24, 0xFC	; 252
 be2:	9f 6f       	ori	r25, 0xFF	; 255
 be4:	01 96       	adiw	r24, 0x01	; 1
 be6:	fc 01       	movw	r30, r24
 be8:	e3 5d       	subi	r30, 0xD3	; 211
 bea:	fd 4f       	sbci	r31, 0xFD	; 253
 bec:	90 81       	ld	r25, Z
 bee:	82 2f       	mov	r24, r18
 bf0:	80 7c       	andi	r24, 0xC0	; 192
 bf2:	89 2b       	or	r24, r25
 bf4:	82 b9       	out	0x02, r24	; 2
        i += 1;
 bf6:	21 96       	adiw	r28, 0x01	; 1
				mTimer(20);
 bf8:	84 e1       	ldi	r24, 0x14	; 20
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
}


void StepperMotor_CW (int num_steps){
    int i = 0;
    while(i < num_steps){
 c00:	c0 17       	cp	r28, r16
 c02:	d1 07       	cpc	r29, r17
 c04:	0c f3       	brlt	.-62     	; 0xbc8 <StepperMotor_CW+0x10>
        STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[(current_step+i)%4];
        i += 1;
				mTimer(20);
    }
}
 c06:	df 91       	pop	r29
 c08:	cf 91       	pop	r28
 c0a:	1f 91       	pop	r17
 c0c:	0f 91       	pop	r16
 c0e:	08 95       	ret

Disassembly of section .text.StepperMotor_CCW:

00000b58 <StepperMotor_CCW>:


void StepperMotor_CCW(int num_steps){
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	ec 01       	movw	r28, r24
    int i = 0;
 b62:	00 e0       	ldi	r16, 0x00	; 0
 b64:	10 e0       	ldi	r17, 0x00	; 0
    while(i < num_steps){
 b66:	20 c0       	rjmp	.+64     	; 0xba8 <StepperMotor_CCW+0x50>
        STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[3 - (current_step+i)%4];
 b68:	22 b1       	in	r18, 0x02	; 2
 b6a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <current_step>
 b6e:	a8 01       	movw	r20, r16
 b70:	48 0f       	add	r20, r24
 b72:	51 1d       	adc	r21, r1
 b74:	ca 01       	movw	r24, r20
 b76:	83 70       	andi	r24, 0x03	; 3
 b78:	90 78       	andi	r25, 0x80	; 128
 b7a:	99 23       	and	r25, r25
 b7c:	24 f4       	brge	.+8      	; 0xb86 <StepperMotor_CCW+0x2e>
 b7e:	01 97       	sbiw	r24, 0x01	; 1
 b80:	8c 6f       	ori	r24, 0xFC	; 252
 b82:	9f 6f       	ori	r25, 0xFF	; 255
 b84:	01 96       	adiw	r24, 0x01	; 1
 b86:	e3 e0       	ldi	r30, 0x03	; 3
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	e8 1b       	sub	r30, r24
 b8c:	f9 0b       	sbc	r31, r25
 b8e:	e3 5d       	subi	r30, 0xD3	; 211
 b90:	fd 4f       	sbci	r31, 0xFD	; 253
 b92:	90 81       	ld	r25, Z
 b94:	82 2f       	mov	r24, r18
 b96:	80 7c       	andi	r24, 0xC0	; 192
 b98:	89 2b       	or	r24, r25
 b9a:	82 b9       	out	0x02, r24	; 2
        i += 1;
 b9c:	0f 5f       	subi	r16, 0xFF	; 255
 b9e:	1f 4f       	sbci	r17, 0xFF	; 255
				mTimer(20);
 ba0:	84 e1       	ldi	r24, 0x14	; 20
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <mTimer>
}


void StepperMotor_CCW(int num_steps){
    int i = 0;
    while(i < num_steps){
 ba8:	0c 17       	cp	r16, r28
 baa:	1d 07       	cpc	r17, r29
 bac:	ec f2       	brlt	.-70     	; 0xb68 <StepperMotor_CCW+0x10>
        STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[3 - (current_step+i)%4];
        i += 1;
				mTimer(20);
		}
}
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	1f 91       	pop	r17
 bb4:	0f 91       	pop	r16
 bb6:	08 95       	ret

Disassembly of section .text.StepperMotor_Rotate:

00000eb6 <StepperMotor_Rotate>:
	current_step = INIT_STEP;
}


void StepperMotor_Rotate (int num_steps){
		if(num_steps > 0){
 eb6:	18 16       	cp	r1, r24
 eb8:	19 06       	cpc	r1, r25
 eba:	1c f4       	brge	.+6      	; 0xec2 <StepperMotor_Rotate+0xc>
			StepperMotor_CCW(num_steps);
 ebc:	0e 94 ac 05 	call	0xb58	; 0xb58 <StepperMotor_CCW>
 ec0:	08 95       	ret
		} else if (num_steps < 0) {
 ec2:	99 23       	and	r25, r25
 ec4:	2c f4       	brge	.+10     	; 0xed0 <StepperMotor_Rotate+0x1a>
			StepperMotor_CW(-num_steps);
 ec6:	91 95       	neg	r25
 ec8:	81 95       	neg	r24
 eca:	91 09       	sbc	r25, r1
 ecc:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <StepperMotor_CW>
 ed0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000e26 <__divmodhi4>:
 e26:	97 fb       	bst	r25, 7
 e28:	07 2e       	mov	r0, r23
 e2a:	16 f4       	brtc	.+4      	; 0xe30 <__divmodhi4+0xa>
 e2c:	00 94       	com	r0
 e2e:	07 d0       	rcall	.+14     	; 0xe3e <__divmodhi4_neg1>
 e30:	77 fd       	sbrc	r23, 7
 e32:	09 d0       	rcall	.+18     	; 0xe46 <__divmodhi4_neg2>
 e34:	0e 94 27 07 	call	0xe4e	; 0xe4e <__udivmodhi4>
 e38:	07 fc       	sbrc	r0, 7
 e3a:	05 d0       	rcall	.+10     	; 0xe46 <__divmodhi4_neg2>
 e3c:	3e f4       	brtc	.+14     	; 0xe4c <__divmodhi4_exit>

00000e3e <__divmodhi4_neg1>:
 e3e:	90 95       	com	r25
 e40:	81 95       	neg	r24
 e42:	9f 4f       	sbci	r25, 0xFF	; 255
 e44:	08 95       	ret

00000e46 <__divmodhi4_neg2>:
 e46:	70 95       	com	r23
 e48:	61 95       	neg	r22
 e4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e4c <__divmodhi4_exit>:
 e4c:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000e4e <__udivmodhi4>:
 e4e:	aa 1b       	sub	r26, r26
 e50:	bb 1b       	sub	r27, r27
 e52:	51 e1       	ldi	r21, 0x11	; 17
 e54:	07 c0       	rjmp	.+14     	; 0xe64 <__udivmodhi4_ep>

00000e56 <__udivmodhi4_loop>:
 e56:	aa 1f       	adc	r26, r26
 e58:	bb 1f       	adc	r27, r27
 e5a:	a6 17       	cp	r26, r22
 e5c:	b7 07       	cpc	r27, r23
 e5e:	10 f0       	brcs	.+4      	; 0xe64 <__udivmodhi4_ep>
 e60:	a6 1b       	sub	r26, r22
 e62:	b7 0b       	sbc	r27, r23

00000e64 <__udivmodhi4_ep>:
 e64:	88 1f       	adc	r24, r24
 e66:	99 1f       	adc	r25, r25
 e68:	5a 95       	dec	r21
 e6a:	a9 f7       	brne	.-22     	; 0xe56 <__udivmodhi4_loop>
 e6c:	80 95       	com	r24
 e6e:	90 95       	com	r25
 e70:	bc 01       	movw	r22, r24
 e72:	cd 01       	movw	r24, r26
 e74:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000f5a <_fini>:
 f5a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000f5c <__funcs_on_exit>:
 f5c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000f5e <__simulator_exit>:
 f5e:	08 95       	ret

Disassembly of section .text.exit:

00000ed2 <exit>:
 ed2:	ec 01       	movw	r28, r24
 ed4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__funcs_on_exit>
 ed8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_fini>
 edc:	ce 01       	movw	r24, r28
 ede:	0e 94 af 07 	call	0xf5e	; 0xf5e <__simulator_exit>
 ee2:	ce 01       	movw	r24, r28
 ee4:	0e 94 aa 07 	call	0xf54	; 0xf54 <_Exit>

Disassembly of section .text.__simple_search_fl:

00000524 <__simple_search_fl>:
 524:	ef 92       	push	r14
 526:	ff 92       	push	r15
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <__freelist>
 534:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <__freelist+0x1>
 538:	61 15       	cp	r22, r1
 53a:	71 05       	cpc	r23, r1
 53c:	09 f4       	brne	.+2      	; 0x540 <__simple_search_fl+0x1c>
 53e:	5b c0       	rjmp	.+182    	; 0x5f6 <__simple_search_fl+0xd2>
 540:	fb 01       	movw	r30, r22
 542:	a0 e0       	ldi	r26, 0x00	; 0
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	c0 e0       	ldi	r28, 0x00	; 0
 54c:	d0 e0       	ldi	r29, 0x00	; 0
 54e:	00 81       	ld	r16, Z
 550:	11 81       	ldd	r17, Z+1	; 0x01
 552:	22 81       	ldd	r18, Z+2	; 0x02
 554:	33 81       	ldd	r19, Z+3	; 0x03
 556:	08 17       	cp	r16, r24
 558:	19 07       	cpc	r17, r25
 55a:	71 f4       	brne	.+28     	; 0x578 <__simple_search_fl+0x54>
 55c:	10 97       	sbiw	r26, 0x00	; 0
 55e:	29 f0       	breq	.+10     	; 0x56a <__simple_search_fl+0x46>
 560:	13 96       	adiw	r26, 0x03	; 3
 562:	3c 93       	st	X, r19
 564:	2e 93       	st	-X, r18
 566:	12 97       	sbiw	r26, 0x02	; 2
 568:	04 c0       	rjmp	.+8      	; 0x572 <__simple_search_fl+0x4e>
 56a:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <__freelist+0x1>
 56e:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <__freelist>
 572:	cf 01       	movw	r24, r30
 574:	02 96       	adiw	r24, 0x02	; 2
 576:	41 c0       	rjmp	.+130    	; 0x5fa <__simple_search_fl+0xd6>
 578:	80 17       	cp	r24, r16
 57a:	91 07       	cpc	r25, r17
 57c:	48 f4       	brcc	.+18     	; 0x590 <__simple_search_fl+0x6c>
 57e:	20 97       	sbiw	r28, 0x00	; 0
 580:	29 f0       	breq	.+10     	; 0x58c <__simple_search_fl+0x68>
 582:	e8 80       	ld	r14, Y
 584:	f9 80       	ldd	r15, Y+1	; 0x01
 586:	0e 15       	cp	r16, r14
 588:	1f 05       	cpc	r17, r15
 58a:	10 f4       	brcc	.+4      	; 0x590 <__simple_search_fl+0x6c>
 58c:	ad 01       	movw	r20, r26
 58e:	ef 01       	movw	r28, r30
 590:	df 01       	movw	r26, r30
 592:	21 15       	cp	r18, r1
 594:	31 05       	cpc	r19, r1
 596:	11 f0       	breq	.+4      	; 0x59c <__simple_search_fl+0x78>
 598:	f9 01       	movw	r30, r18
 59a:	d9 cf       	rjmp	.-78     	; 0x54e <__simple_search_fl+0x2a>
 59c:	20 97       	sbiw	r28, 0x00	; 0
 59e:	59 f1       	breq	.+86     	; 0x5f6 <__simple_search_fl+0xd2>
 5a0:	0a 81       	ldd	r16, Y+2	; 0x02
 5a2:	1b 81       	ldd	r17, Y+3	; 0x03
 5a4:	fe 01       	movw	r30, r28
 5a6:	21 91       	ld	r18, Z+
 5a8:	31 91       	ld	r19, Z+
 5aa:	28 1b       	sub	r18, r24
 5ac:	39 0b       	sbc	r19, r25
 5ae:	25 30       	cpi	r18, 0x05	; 5
 5b0:	31 05       	cpc	r19, r1
 5b2:	88 f0       	brcs	.+34     	; 0x5d6 <__simple_search_fl+0xb2>
 5b4:	99 83       	std	Y+1, r25	; 0x01
 5b6:	88 83       	st	Y, r24
 5b8:	df 01       	movw	r26, r30
 5ba:	a8 0f       	add	r26, r24
 5bc:	b9 1f       	adc	r27, r25
 5be:	22 50       	subi	r18, 0x02	; 2
 5c0:	31 09       	sbc	r19, r1
 5c2:	11 96       	adiw	r26, 0x01	; 1
 5c4:	3c 93       	st	X, r19
 5c6:	2e 93       	st	-X, r18
 5c8:	12 96       	adiw	r26, 0x02	; 2
 5ca:	0c 93       	st	X, r16
 5cc:	12 97       	sbiw	r26, 0x02	; 2
 5ce:	13 96       	adiw	r26, 0x03	; 3
 5d0:	1c 93       	st	X, r17
 5d2:	13 97       	sbiw	r26, 0x03	; 3
 5d4:	8d 01       	movw	r16, r26
 5d6:	c6 17       	cp	r28, r22
 5d8:	d7 07       	cpc	r29, r23
 5da:	29 f4       	brne	.+10     	; 0x5e6 <__simple_search_fl+0xc2>
 5dc:	00 93 37 02 	sts	0x0237, r16	; 0x800237 <__freelist>
 5e0:	10 93 38 02 	sts	0x0238, r17	; 0x800238 <__freelist+0x1>
 5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <__simple_search_fl+0xce>
 5e6:	da 01       	movw	r26, r20
 5e8:	12 96       	adiw	r26, 0x02	; 2
 5ea:	0c 93       	st	X, r16
 5ec:	12 97       	sbiw	r26, 0x02	; 2
 5ee:	13 96       	adiw	r26, 0x03	; 3
 5f0:	1c 93       	st	X, r17
 5f2:	cf 01       	movw	r24, r30
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__simple_search_fl+0xd6>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	e6 e0       	ldi	r30, 0x06	; 6
 600:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00000930 <__simple_free>:
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	c9 f1       	breq	.+114    	; 0x9a6 <__simple_free+0x76>
 934:	fc 01       	movw	r30, r24
 936:	32 97       	sbiw	r30, 0x02	; 2
 938:	a0 91 37 02 	lds	r26, 0x0237	; 0x800237 <__freelist>
 93c:	b0 91 38 02 	lds	r27, 0x0238	; 0x800238 <__freelist+0x1>
 940:	10 97       	sbiw	r26, 0x00	; 0
 942:	59 f1       	breq	.+86     	; 0x99a <__simple_free+0x6a>
 944:	40 81       	ld	r20, Z
 946:	51 81       	ldd	r21, Z+1	; 0x01
 948:	9c 01       	movw	r18, r24
 94a:	24 0f       	add	r18, r20
 94c:	35 1f       	adc	r19, r21
 94e:	a2 17       	cp	r26, r18
 950:	b3 07       	cpc	r27, r19
 952:	79 f4       	brne	.+30     	; 0x972 <__simple_free+0x42>
 954:	12 96       	adiw	r26, 0x02	; 2
 956:	8d 91       	ld	r24, X+
 958:	9c 91       	ld	r25, X
 95a:	13 97       	sbiw	r26, 0x03	; 3
 95c:	93 83       	std	Z+3, r25	; 0x03
 95e:	82 83       	std	Z+2, r24	; 0x02
 960:	2d 91       	ld	r18, X+
 962:	3c 91       	ld	r19, X
 964:	ca 01       	movw	r24, r20
 966:	82 0f       	add	r24, r18
 968:	93 1f       	adc	r25, r19
 96a:	02 96       	adiw	r24, 0x02	; 2
 96c:	91 83       	std	Z+1, r25	; 0x01
 96e:	80 83       	st	Z, r24
 970:	16 c0       	rjmp	.+44     	; 0x99e <__simple_free+0x6e>
 972:	8d 91       	ld	r24, X+
 974:	9c 91       	ld	r25, X
 976:	11 97       	sbiw	r26, 0x01	; 1
 978:	9c 01       	movw	r18, r24
 97a:	2e 5f       	subi	r18, 0xFE	; 254
 97c:	3f 4f       	sbci	r19, 0xFF	; 255
 97e:	2a 0f       	add	r18, r26
 980:	3b 1f       	adc	r19, r27
 982:	e2 17       	cp	r30, r18
 984:	f3 07       	cpc	r31, r19
 986:	31 f4       	brne	.+12     	; 0x994 <__simple_free+0x64>
 988:	84 0f       	add	r24, r20
 98a:	95 1f       	adc	r25, r21
 98c:	02 96       	adiw	r24, 0x02	; 2
 98e:	8d 93       	st	X+, r24
 990:	9c 93       	st	X, r25
 992:	08 95       	ret
 994:	b3 83       	std	Z+3, r27	; 0x03
 996:	a2 83       	std	Z+2, r26	; 0x02
 998:	02 c0       	rjmp	.+4      	; 0x99e <__simple_free+0x6e>
 99a:	13 82       	std	Z+3, r1	; 0x03
 99c:	12 82       	std	Z+2, r1	; 0x02
 99e:	f0 93 38 02 	sts	0x0238, r31	; 0x800238 <__freelist+0x1>
 9a2:	e0 93 37 02 	sts	0x0237, r30	; 0x800237 <__freelist>
 9a6:	08 95       	ret

Disassembly of section .text.__simple_malloc:

00000604 <__simple_malloc>:
 604:	a2 e0       	ldi	r26, 0x02	; 2
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e8 e0       	ldi	r30, 0x08	; 8
 60a:	f3 e0       	ldi	r31, 0x03	; 3
 60c:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <__prologue_saves__+0x14>
 610:	8c 01       	movw	r16, r24
 612:	88 e9       	ldi	r24, 0x98	; 152
 614:	94 e0       	ldi	r25, 0x04	; 4
 616:	01 15       	cp	r16, r1
 618:	11 05       	cpc	r17, r1
 61a:	09 f4       	brne	.+2      	; 0x61e <__simple_malloc+0x1a>
 61c:	55 c0       	rjmp	.+170    	; 0x6c8 <__simple_malloc+0xc4>
 61e:	89 2b       	or	r24, r25
 620:	79 f0       	breq	.+30     	; 0x640 <__simple_malloc+0x3c>
 622:	02 30       	cpi	r16, 0x02	; 2
 624:	11 05       	cpc	r17, r1
 626:	10 f4       	brcc	.+4      	; 0x62c <__simple_malloc+0x28>
 628:	02 e0       	ldi	r16, 0x02	; 2
 62a:	10 e0       	ldi	r17, 0x00	; 0
 62c:	c8 01       	movw	r24, r16
 62e:	0e 94 92 02 	call	0x524	; 0x524 <__simple_search_fl>
 632:	00 97       	sbiw	r24, 0x00	; 0
 634:	09 f0       	breq	.+2      	; 0x638 <__simple_malloc+0x34>
 636:	4f c0       	rjmp	.+158    	; 0x6d6 <__simple_malloc+0xd2>
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	e9 2e       	mov	r14, r25
 63c:	f1 2c       	mov	r15, r1
 63e:	04 c0       	rjmp	.+8      	; 0x648 <__simple_malloc+0x44>
 640:	88 e9       	ldi	r24, 0x98	; 152
 642:	e8 2e       	mov	r14, r24
 644:	84 e0       	ldi	r24, 0x04	; 4
 646:	f8 2e       	mov	r15, r24
 648:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <end.1483>
 64c:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <end.1483+0x1>
 650:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <cur.1482>
 654:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <cur.1482+0x1>
 658:	82 1b       	sub	r24, r18
 65a:	93 0b       	sbc	r25, r19
 65c:	67 01       	movw	r12, r14
 65e:	c0 0e       	add	r12, r16
 660:	d1 1e       	adc	r13, r17
 662:	80 17       	cp	r24, r16
 664:	91 07       	cpc	r25, r17
 666:	f0 f4       	brcc	.+60     	; 0x6a4 <__simple_malloc+0xa0>
 668:	da 82       	std	Y+2, r13	; 0x02
 66a:	c9 82       	std	Y+1, r12	; 0x01
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	0e 94 0c 05 	call	0xa18	; 0xa18 <__expand_heap>
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	19 f4       	brne	.+6      	; 0x67e <__simple_malloc+0x7a>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	2c c0       	rjmp	.+88     	; 0x6d6 <__simple_malloc+0xd2>
 67e:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <end.1483>
 682:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <end.1483+0x1>
 686:	82 17       	cp	r24, r18
 688:	93 07       	cpc	r25, r19
 68a:	21 f0       	breq	.+8      	; 0x694 <__simple_malloc+0x90>
 68c:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <cur.1482+0x1>
 690:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <cur.1482>
 694:	29 81       	ldd	r18, Y+1	; 0x01
 696:	3a 81       	ldd	r19, Y+2	; 0x02
 698:	82 0f       	add	r24, r18
 69a:	93 1f       	adc	r25, r19
 69c:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <end.1483+0x1>
 6a0:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <end.1483>
 6a4:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <cur.1482>
 6a8:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <cur.1482+0x1>
 6ac:	cf 01       	movw	r24, r30
 6ae:	e1 14       	cp	r14, r1
 6b0:	f1 04       	cpc	r15, r1
 6b2:	19 f0       	breq	.+6      	; 0x6ba <__simple_malloc+0xb6>
 6b4:	02 96       	adiw	r24, 0x02	; 2
 6b6:	11 83       	std	Z+1, r17	; 0x01
 6b8:	00 83       	st	Z, r16
 6ba:	ce 0e       	add	r12, r30
 6bc:	df 1e       	adc	r13, r31
 6be:	d0 92 3c 02 	sts	0x023C, r13	; 0x80023c <cur.1482+0x1>
 6c2:	c0 92 3b 02 	sts	0x023B, r12	; 0x80023b <cur.1482>
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <__simple_malloc+0xd2>
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	09 f0       	breq	.+2      	; 0x6ce <__simple_malloc+0xca>
 6cc:	ad cf       	rjmp	.-166    	; 0x628 <__simple_malloc+0x24>
 6ce:	7c 01       	movw	r14, r24
 6d0:	01 e0       	ldi	r16, 0x01	; 1
 6d2:	10 e0       	ldi	r17, 0x00	; 0
 6d4:	b9 cf       	rjmp	.-142    	; 0x648 <__simple_malloc+0x44>
 6d6:	22 96       	adiw	r28, 0x02	; 2
 6d8:	e8 e0       	ldi	r30, 0x08	; 8
 6da:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

00000f54 <_Exit>:
 f54:	0e 94 b7 00 	call	0x16e	; 0x16e <_exit>

Disassembly of section .text.__expand_heap:

00000a18 <__expand_heap>:
 a18:	fc 01       	movw	r30, r24
 a1a:	40 81       	ld	r20, Z
 a1c:	51 81       	ldd	r21, Z+1	; 0x01
 a1e:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <__brkval>
 a22:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <__brkval+0x1>
 a26:	89 2b       	or	r24, r25
 a28:	41 f4       	brne	.+16     	; 0xa3a <__expand_heap+0x22>
 a2a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <__malloc_heap_start>
 a2e:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <__malloc_heap_start+0x1>
 a32:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <__brkval+0x1>
 a36:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <__brkval>
 a3a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <__malloc_heap_end>
 a3e:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <__malloc_heap_end+0x1>
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	19 f4       	brne	.+6      	; 0xa4c <__expand_heap+0x34>
 a46:	8d b7       	in	r24, 0x3d	; 61
 a48:	9e b7       	in	r25, 0x3e	; 62
 a4a:	80 97       	sbiw	r24, 0x20	; 32
 a4c:	20 91 3d 02 	lds	r18, 0x023D	; 0x80023d <__brkval>
 a50:	30 91 3e 02 	lds	r19, 0x023E	; 0x80023e <__brkval+0x1>
 a54:	28 17       	cp	r18, r24
 a56:	39 07       	cpc	r19, r25
 a58:	48 f0       	brcs	.+18     	; 0xa6c <__expand_heap+0x54>
 a5a:	8c e0       	ldi	r24, 0x0C	; 12
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <__errno_val+0x1>
 a62:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <__errno_val>
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	08 95       	ret
 a6c:	82 1b       	sub	r24, r18
 a6e:	93 0b       	sbc	r25, r19
 a70:	84 17       	cp	r24, r20
 a72:	95 07       	cpc	r25, r21
 a74:	90 f3       	brcs	.-28     	; 0xa5a <__expand_heap+0x42>
 a76:	42 0f       	add	r20, r18
 a78:	53 1f       	adc	r21, r19
 a7a:	50 93 3e 02 	sts	0x023E, r21	; 0x80023e <__brkval+0x1>
 a7e:	40 93 3d 02 	sts	0x023D, r20	; 0x80023d <__brkval>
 a82:	c9 01       	movw	r24, r18
 a84:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000d34 <__prologue_saves__>:
 d34:	2f 92       	push	r2
 d36:	3f 92       	push	r3
 d38:	4f 92       	push	r4
 d3a:	5f 92       	push	r5
 d3c:	6f 92       	push	r6
 d3e:	7f 92       	push	r7
 d40:	8f 92       	push	r8
 d42:	9f 92       	push	r9
 d44:	af 92       	push	r10
 d46:	bf 92       	push	r11
 d48:	cf 92       	push	r12
 d4a:	df 92       	push	r13
 d4c:	ef 92       	push	r14
 d4e:	ff 92       	push	r15
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
 d5c:	ca 1b       	sub	r28, r26
 d5e:	db 0b       	sbc	r29, r27
 d60:	0f b6       	in	r0, 0x3f	; 63
 d62:	f8 94       	cli
 d64:	de bf       	out	0x3e, r29	; 62
 d66:	0f be       	out	0x3f, r0	; 63
 d68:	cd bf       	out	0x3d, r28	; 61
 d6a:	19 94       	eijmp

Disassembly of section .text.libgcc.prologue:

00000d6c <__epilogue_restores__>:
 d6c:	2a 88       	ldd	r2, Y+18	; 0x12
 d6e:	39 88       	ldd	r3, Y+17	; 0x11
 d70:	48 88       	ldd	r4, Y+16	; 0x10
 d72:	5f 84       	ldd	r5, Y+15	; 0x0f
 d74:	6e 84       	ldd	r6, Y+14	; 0x0e
 d76:	7d 84       	ldd	r7, Y+13	; 0x0d
 d78:	8c 84       	ldd	r8, Y+12	; 0x0c
 d7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d7e:	b9 84       	ldd	r11, Y+9	; 0x09
 d80:	c8 84       	ldd	r12, Y+8	; 0x08
 d82:	df 80       	ldd	r13, Y+7	; 0x07
 d84:	ee 80       	ldd	r14, Y+6	; 0x06
 d86:	fd 80       	ldd	r15, Y+5	; 0x05
 d88:	0c 81       	ldd	r16, Y+4	; 0x04
 d8a:	1b 81       	ldd	r17, Y+3	; 0x03
 d8c:	aa 81       	ldd	r26, Y+2	; 0x02
 d8e:	b9 81       	ldd	r27, Y+1	; 0x01
 d90:	ce 0f       	add	r28, r30
 d92:	d1 1d       	adc	r29, r1
 d94:	0f b6       	in	r0, 0x3f	; 63
 d96:	f8 94       	cli
 d98:	de bf       	out	0x3e, r29	; 62
 d9a:	0f be       	out	0x3f, r0	; 63
 d9c:	cd bf       	out	0x3d, r28	; 61
 d9e:	ed 01       	movw	r28, r26
 da0:	08 95       	ret
