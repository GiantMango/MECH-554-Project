
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001349  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800200  00800200  00001349  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d50  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d2  00000000  00000000  00005328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000145f  00000000  00000000  000065fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00007a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00007f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f2  00000000  00000000  00008461  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00009553  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000011e4  000011e4  000012f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009724  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000001c  00001108  00001108  0000121c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000c  000011ae  000011ae  000012c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.disable_adc 0000000c  000011ba  000011ba  000012ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.enable_adc 0000000c  000011c6  000011c6  000012da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.disable_dc_motor 00000010  00001182  00001182  00001296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.run_dc_motor 0000000a  000011d2  000011d2  000012e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.brake_dc_motor 00000008  000011dc  000011dc  000012f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_dc_motor 00000022  000010c8  000010c8  000011dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCDBusyLoop 0000007e  00000b58  00000b58  00000c6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCDByte 00000070  00000c4e  00000c4e  00000d62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.InitLCD 00000088  00000a48  00000a48  00000b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDWriteString 00000030  00000fa6  00000fa6  000010ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCDWriteInt 000000c4  00000760  00000760  00000874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCDGotoXY 00000012  00001170  00001170  00001284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.setup   0000000e  00001192  00001192  000012a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.initLink 0000001e  000010ea  000010ea  000011fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.enqueue 0000003c  00000efc  00000efc  00001010  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.dequeue 00000030  00000fd6  00000fd6  000010ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.size    0000001a  00001140  00001140  00001254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.categorize 000000b8  000008e6  000008e6  000009fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 00000008  00000166  00000166  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.main    00000438  0000016e  0000016e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_default 00000002  000011ec  000011ec  00001300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_29 00000088  00000ad0  00000ad0  00000be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_1 0000005e  00000e02  00000e02  00000f16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_2 00000028  00001006  00001006  0000111a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_5 00000066  00000d9c  00000d9c  00000eb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_6 00000070  00000cbe  00000cbe  00000dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .data.rotations 00000010  0080021f  000011f4  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 44 .bss.black_counter 00000001  00800268  00800268  00001349  2**0
                  ALLOC
 45 .bss.white_counter 00000001  00800269  00800269  00001349  2**0
                  ALLOC
 46 .bss.steel_counter 00000001  0080026a  0080026a  00001349  2**0
                  ALLOC
 47 .bss.aluminum_counter 00000001  0080026b  0080026b  00001349  2**0
                  ALLOC
 48 .bss.item_counter 00000001  0080026c  0080026c  00001349  2**0
                  ALLOC
 49 .bss.ramp_down_flag 00000001  0080026d  0080026d  00001349  2**0
                  ALLOC
 50 .bss.in_OR_flag 00000001  0080026e  0080026e  00001349  2**0
                  ALLOC
 51 .bss.STATE    00000001  0080026f  0080026f  00001349  2**0
                  ALLOC
 52 .data.ADC_curr_min 00000002  0080025a  0000122f  00001343  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 53 .text.init_pwm 00000026  0000107e  0000107e  00001192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.init_sensors 00000024  000010a4  000010a4  000011b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.init_stepper_motor 0000005c  00000e60  00000e60  00000f74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.StepperMotor_CW 000000aa  0000099e  0000099e  00000ab2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.StepperMotor_CCW 000000c2  00000824  00000824  00000938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.StepperMotor_Rotate 0000001c  00001124  00001124  00001238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .data.ind     00000010  0080022f  00001204  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 60 .data.decel_speed 00000009  0080024d  00001222  00001336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 61 .data.accel_speed 0000000e  0080023f  00001214  00001328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 62 .data.steps   00000004  00800256  0000122b  0000133f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 63 .text.mTimer  00000040  00000ebc  00000ebc  00000fd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc.div 00000028  0000102e  0000102e  00001142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc  0000000e  000011a0  000011a0  000012b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.libgcc.div 00000028  00001056  00001056  0000116a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__dummy_fini 00000002  000011ee  000011ee  00001302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__dummy_funcs_on_exit 00000002  000011f0  000011f0  00001304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__dummy_simulator_exit 00000002  000011f2  000011f2  00001306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.exit    00000016  0000115a  0000115a  0000126e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.__simple_search_fl 000000e0  000005a6  000005a6  000006ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__simple_free 00000078  00000bd6  00000bd6  00000cea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .bss.__freelist 00000002  0080025c  0080025c  00001349  2**0
                  ALLOC
 74 .text.__simple_malloc 000000da  00000686  00000686  0000079a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .bss.end.1483 00000002  0080025e  0080025e  00001349  2**0
                  ALLOC
 76 .bss.cur.1482 00000002  00800260  00800260  00001349  2**0
                  ALLOC
 77 .text._Exit   00000004  000011e8  000011e8  000012fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__expand_heap 0000006e  00000d2e  00000d2e  00000e42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .bss.__brkval 00000002  00800262  00800262  00001349  2**0
                  ALLOC
 80 .data.__malloc_heap_end 00000002  00800264  00001231  00001345  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 81 .data.__malloc_heap_start 00000002  00800266  00001233  00001347  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 82 .text.libgcc.prologue 00000038  00000f38  00000f38  0000104c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.libgcc.prologue 00000036  00000f70  00000f70  00001084  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
   4:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_1>
   8:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_2>
   c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  10:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  14:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_5>
  18:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_6>
  1c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  20:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  24:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  28:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  2c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  30:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  34:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  38:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  3c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  40:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  44:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  48:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  4c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  50:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  54:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  58:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  5c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  60:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  64:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  68:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  6c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  70:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  74:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_29>
  78:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  7c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  80:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  84:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  88:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  8c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  90:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  94:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  98:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  9c:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  a0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  a4:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  a8:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  ac:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  b0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  b4:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  b8:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  bc:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  c0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  c4:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  c8:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  cc:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  d0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  d4:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  d8:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  dc:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>
  e0:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 1f       	adc	r16, r18
  e8:	80 02       	muls	r24, r16
  ea:	1f 02       	muls	r17, r31
  ec:	5c 00       	.word	0x005c	; ????
  ee:	11 f4       	brne	.+4      	; 0xf4 <.dinit+0x10>
  f0:	02 5c       	subi	r16, 0xC2	; 194
  f2:	02 64       	ori	r16, 0x42	; 66
  f4:	80 02       	muls	r24, r16
  f6:	64 02       	muls	r22, r20
  f8:	68 00       	.word	0x0068	; ????
  fa:	12 31       	cpi	r17, 0x12	; 18
  fc:	02 68       	ori	r16, 0x82	; 130
  fe:	02 70       	andi	r16, 0x02	; 2
 100:	80 00       	.word	0x0080	; ????

00000102 <__trampolines_start>:
 102:	0c 94 49 03 	jmp	0x692	; 0x692 <__simple_malloc+0xc>
 106:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__simple_free>

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d1 e2       	ldi	r29, 0x21	; 33
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	0c bf       	out	0x3c, r16	; 60

0000011a <__do_copy_data>:
 11a:	e4 ee       	ldi	r30, 0xE4	; 228
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	19 c0       	rjmp	.+50     	; 0x154 <__do_clear_bss+0x8>
 122:	b7 91       	elpm	r27, Z+
 124:	a7 91       	elpm	r26, Z+
 126:	37 91       	elpm	r19, Z+
 128:	27 91       	elpm	r18, Z+
 12a:	07 91       	elpm	r16, Z+
 12c:	07 fd       	sbrc	r16, 7
 12e:	0e c0       	rjmp	.+28     	; 0x14c <__do_clear_bss>
 130:	97 91       	elpm	r25, Z+
 132:	87 91       	elpm	r24, Z+
 134:	ef 01       	movw	r28, r30
 136:	f9 2f       	mov	r31, r25
 138:	e8 2f       	mov	r30, r24
 13a:	0b bf       	out	0x3b, r16	; 59
 13c:	07 90       	elpm	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	a2 17       	cp	r26, r18
 142:	b3 07       	cpc	r27, r19
 144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0x22>
 146:	fe 01       	movw	r30, r28
 148:	1b be       	out	0x3b, r1	; 59
 14a:	04 c0       	rjmp	.+8      	; 0x154 <__do_clear_bss+0x8>

0000014c <__do_clear_bss>:
 14c:	1d 92       	st	X+, r1
 14e:	a2 17       	cp	r26, r18
 150:	b3 07       	cpc	r27, r19
 152:	e1 f7       	brne	.-8      	; 0x14c <__do_clear_bss>
 154:	e1 30       	cpi	r30, 0x01	; 1
 156:	f4 07       	cpc	r31, r20
 158:	21 f7       	brne	.-56     	; 0x122 <__do_copy_data+0x8>
 15a:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
 15e:	0c 94 ad 08 	jmp	0x115a	; 0x115a <exit>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>

Disassembly of section .text:

000011e4 <__bad_interrupt>:
    11e4:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__vector_default>

Disassembly of section .text.init_adc:

00001108 <init_adc>:
void stop_conversion(){
	ADCSRA &= ~(_BV(ADSC));				// clear ADSC
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
    1108:	ea e7       	ldi	r30, 0x7A	; 122
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	80 83       	st	Z, r24
    1112:	80 81       	ld	r24, Z
    1114:	88 60       	ori	r24, 0x08	; 8
    1116:	80 83       	st	Z, r24
    1118:	ec e7       	ldi	r30, 0x7C	; 124
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 66       	ori	r24, 0x60	; 96
    1120:	80 83       	st	Z, r24
    1122:	08 95       	ret

Disassembly of section .text.start_conversion:

000011ae <start_conversion>:
    11ae:	ea e7       	ldi	r30, 0x7A	; 122
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 64       	ori	r24, 0x40	; 64
    11b6:	80 83       	st	Z, r24
    11b8:	08 95       	ret

Disassembly of section .text.disable_adc:

000011ba <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
    11ba:	ea e7       	ldi	r30, 0x7A	; 122
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 77       	andi	r24, 0x7F	; 127
    11c2:	80 83       	st	Z, r24
    11c4:	08 95       	ret

Disassembly of section .text.enable_adc:

000011c6 <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
    11c6:	ea e7       	ldi	r30, 0x7A	; 122
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	80 68       	ori	r24, 0x80	; 128
    11ce:	80 83       	st	Z, r24
    11d0:	08 95       	ret

Disassembly of section .text.disable_dc_motor:

00001182 <disable_dc_motor>:
	brake_dc_motor();
}

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
    1182:	85 b1       	in	r24, 0x05	; 5
    1184:	80 7f       	andi	r24, 0xF0	; 240
    1186:	85 b9       	out	0x05, r24	; 5
	//PORTB = (PORTB & 0xF0) | DC_Disable;
	mTimer(5);
    1188:	85 e0       	ldi	r24, 0x05	; 5
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
    1190:	08 95       	ret

Disassembly of section .text.run_dc_motor:

000011d2 <run_dc_motor>:
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
    11d2:	85 b1       	in	r24, 0x05	; 5
    11d4:	80 7f       	andi	r24, 0xF0	; 240
    11d6:	8b 60       	ori	r24, 0x0B	; 11
    11d8:	85 b9       	out	0x05, r24	; 5
    11da:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

000011dc <brake_dc_motor>:
	//PORTB &= ~(_BV(PB0));  										// motor driving initialize	1 1 1 0
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
    11dc:	85 b1       	in	r24, 0x05	; 5
    11de:	8f 60       	ori	r24, 0x0F	; 15
    11e0:	85 b9       	out	0x05, r24	; 5
    11e2:	08 95       	ret

Disassembly of section .text.init_dc_motor:

000010c8 <init_dc_motor>:


/* Initialize DC motor */
void init_dc_motor(){
	// Enable switch button interrupt
	EIMSK |= (_BV(INT4) | _BV(INT5));
    10c8:	8d b3       	in	r24, 0x1d	; 29
    10ca:	80 63       	ori	r24, 0x30	; 48
    10cc:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC41)| _BV(ISC51));		// falling edge trigger
    10ce:	ea e6       	ldi	r30, 0x6A	; 106
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8a 60       	ori	r24, 0x0A	; 10
    10d6:	80 83       	st	Z, r24

	// GPIO
	DDRE &= ~(_BV(PE1) | _BV(PE0)); // used as input
    10d8:	8d b1       	in	r24, 0x0d	; 13
    10da:	8c 7f       	andi	r24, 0xFC	; 252
    10dc:	8d b9       	out	0x0d, r24	; 13

	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
    10de:	84 b1       	in	r24, 0x04	; 4
    10e0:	8f 60       	ori	r24, 0x0F	; 15
    10e2:	84 b9       	out	0x04, r24	; 4
	//PORTB = (PORTB & 0xF0) | DC_Brake;							// motor driver enable pins	& brake to Vcc
	brake_dc_motor();
    10e4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <brake_dc_motor>
    10e8:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

00000b58 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 b58:	87 b1       	in	r24, 0x07	; 7
 b5a:	80 7f       	andi	r24, 0xF0	; 240
 b5c:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 b5e:	88 b1       	in	r24, 0x08	; 8
 b60:	80 62       	ori	r24, 0x20	; 32
 b62:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 b64:	88 b1       	in	r24, 0x08	; 8
 b66:	8f 7b       	andi	r24, 0xBF	; 191
 b68:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b6a:	82 e0       	ldi	r24, 0x02	; 2
 b6c:	8a 95       	dec	r24
 b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCDBusyLoop+0x14>
 b70:	00 c0       	rjmp	.+0      	; 0xb72 <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 b72:	88 b1       	in	r24, 0x08	; 8
 b74:	80 68       	ori	r24, 0x80	; 128
 b76:	88 b9       	out	0x08, r24	; 8
 b78:	92 e0       	ldi	r25, 0x02	; 2
 b7a:	9a 95       	dec	r25
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <LCDBusyLoop+0x22>
 b7e:	00 c0       	rjmp	.+0      	; 0xb80 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 b80:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 b82:	82 95       	swap	r24
 b84:	80 7f       	andi	r24, 0xF0	; 240
 b86:	92 e0       	ldi	r25, 0x02	; 2
 b88:	9a 95       	dec	r25
 b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCDBusyLoop+0x30>
 b8c:	00 c0       	rjmp	.+0      	; 0xb8e <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 b8e:	98 b1       	in	r25, 0x08	; 8
 b90:	9f 77       	andi	r25, 0x7F	; 127
 b92:	98 b9       	out	0x08, r25	; 8
 b94:	95 e0       	ldi	r25, 0x05	; 5
 b96:	9a 95       	dec	r25
 b98:	f1 f7       	brne	.-4      	; 0xb96 <LCDBusyLoop+0x3e>
 b9a:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 b9c:	98 b1       	in	r25, 0x08	; 8
 b9e:	90 68       	ori	r25, 0x80	; 128
 ba0:	98 b9       	out	0x08, r25	; 8
 ba2:	92 e0       	ldi	r25, 0x02	; 2
 ba4:	9a 95       	dec	r25
 ba6:	f1 f7       	brne	.-4      	; 0xba4 <LCDBusyLoop+0x4c>
 ba8:	00 c0       	rjmp	.+0      	; 0xbaa <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 baa:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 bac:	80 78       	andi	r24, 0x80	; 128
 bae:	92 e0       	ldi	r25, 0x02	; 2
 bb0:	9a 95       	dec	r25
 bb2:	f1 f7       	brne	.-4      	; 0xbb0 <LCDBusyLoop+0x58>
 bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 bb6:	98 b1       	in	r25, 0x08	; 8
 bb8:	9f 77       	andi	r25, 0x7F	; 127
 bba:	98 b9       	out	0x08, r25	; 8
 bbc:	95 e0       	ldi	r25, 0x05	; 5
 bbe:	9a 95       	dec	r25
 bc0:	f1 f7       	brne	.-4      	; 0xbbe <LCDBusyLoop+0x66>
 bc2:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 bc4:	81 11       	cpse	r24, r1
 bc6:	d5 cf       	rjmp	.-86     	; 0xb72 <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 bc8:	88 b1       	in	r24, 0x08	; 8
 bca:	8f 7d       	andi	r24, 0xDF	; 223
 bcc:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 bce:	87 b1       	in	r24, 0x07	; 7
 bd0:	8f 60       	ori	r24, 0x0F	; 15
 bd2:	87 b9       	out	0x07, r24	; 7
 bd4:	08 95       	ret

Disassembly of section .text.LCDByte:

00000c4e <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 c4e:	28 2f       	mov	r18, r24
 c50:	22 95       	swap	r18
 c52:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 c54:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 c56:	61 11       	cpse	r22, r1
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <LCDByte+0x14>
	CLEAR_RS();
 c5a:	98 b1       	in	r25, 0x08	; 8
 c5c:	9f 7b       	andi	r25, 0xBF	; 191
 c5e:	98 b9       	out	0x08, r25	; 8
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <LCDByte+0x1a>
else
	SET_RS();
 c62:	98 b1       	in	r25, 0x08	; 8
 c64:	90 64       	ori	r25, 0x40	; 64
 c66:	98 b9       	out	0x08, r25	; 8
 c68:	92 e0       	ldi	r25, 0x02	; 2
 c6a:	9a 95       	dec	r25
 c6c:	f1 f7       	brne	.-4      	; 0xc6a <LCDByte+0x1c>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 c70:	98 b1       	in	r25, 0x08	; 8
 c72:	90 68       	ori	r25, 0x80	; 128
 c74:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 c76:	98 b1       	in	r25, 0x08	; 8
 c78:	90 7f       	andi	r25, 0xF0	; 240
 c7a:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 c7c:	98 b9       	out	0x08, r25	; 8
 c7e:	95 e0       	ldi	r25, 0x05	; 5
 c80:	9a 95       	dec	r25
 c82:	f1 f7       	brne	.-4      	; 0xc80 <LCDByte+0x32>
 c84:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 c86:	98 b1       	in	r25, 0x08	; 8
 c88:	9f 77       	andi	r25, 0x7F	; 127
 c8a:	98 b9       	out	0x08, r25	; 8
 c8c:	95 e0       	ldi	r25, 0x05	; 5
 c8e:	9a 95       	dec	r25
 c90:	f1 f7       	brne	.-4      	; 0xc8e <LCDByte+0x40>
 c92:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 c94:	98 b1       	in	r25, 0x08	; 8
 c96:	90 68       	ori	r25, 0x80	; 128
 c98:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 c9a:	98 b1       	in	r25, 0x08	; 8
 c9c:	90 7f       	andi	r25, 0xF0	; 240
 c9e:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 ca0:	88 b9       	out	0x08, r24	; 8
 ca2:	85 e0       	ldi	r24, 0x05	; 5
 ca4:	8a 95       	dec	r24
 ca6:	f1 f7       	brne	.-4      	; 0xca4 <LCDByte+0x56>
 ca8:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 caa:	88 b1       	in	r24, 0x08	; 8
 cac:	8f 77       	andi	r24, 0x7F	; 127
 cae:	88 b9       	out	0x08, r24	; 8
 cb0:	95 e0       	ldi	r25, 0x05	; 5
 cb2:	9a 95       	dec	r25
 cb4:	f1 f7       	brne	.-4      	; 0xcb2 <LCDByte+0x64>
 cb6:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 cb8:	0e 94 ac 05 	call	0xb58	; 0xb58 <LCDBusyLoop>
 cbc:	08 95       	ret

Disassembly of section .text.InitLCD:

00000a48 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 a48:	cf 93       	push	r28
 a4a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a4c:	2f ef       	ldi	r18, 0xFF	; 255
 a4e:	86 e7       	ldi	r24, 0x76	; 118
 a50:	91 e0       	ldi	r25, 0x01	; 1
 a52:	21 50       	subi	r18, 0x01	; 1
 a54:	80 40       	sbci	r24, 0x00	; 0
 a56:	90 40       	sbci	r25, 0x00	; 0
 a58:	e1 f7       	brne	.-8      	; 0xa52 <InitLCD+0xa>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <InitLCD+0x14>
 a5c:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 a5e:	87 b1       	in	r24, 0x07	; 7
 a60:	8f 60       	ori	r24, 0x0F	; 15
 a62:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 a64:	87 b1       	in	r24, 0x07	; 7
 a66:	80 68       	ori	r24, 0x80	; 128
 a68:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 a6a:	87 b1       	in	r24, 0x07	; 7
 a6c:	80 64       	ori	r24, 0x40	; 64
 a6e:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 a70:	87 b1       	in	r24, 0x07	; 7
 a72:	80 62       	ori	r24, 0x20	; 32
 a74:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 a76:	88 b1       	in	r24, 0x08	; 8
 a78:	80 7f       	andi	r24, 0xF0	; 240
 a7a:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 a7c:	88 b1       	in	r24, 0x08	; 8
 a7e:	8f 77       	andi	r24, 0x7F	; 127
 a80:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 a82:	88 b1       	in	r24, 0x08	; 8
 a84:	8f 7d       	andi	r24, 0xDF	; 223
 a86:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 a88:	88 b1       	in	r24, 0x08	; 8
 a8a:	8f 7b       	andi	r24, 0xBF	; 191
 a8c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a8e:	00 c0       	rjmp	.+0      	; 0xa90 <InitLCD+0x48>
 a90:	00 c0       	rjmp	.+0      	; 0xa92 <InitLCD+0x4a>
 a92:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 a94:	88 b1       	in	r24, 0x08	; 8
 a96:	80 68       	ori	r24, 0x80	; 128
 a98:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 a9a:	88 b1       	in	r24, 0x08	; 8
 a9c:	82 60       	ori	r24, 0x02	; 2
 a9e:	88 b9       	out	0x08, r24	; 8
 aa0:	25 e0       	ldi	r18, 0x05	; 5
 aa2:	2a 95       	dec	r18
 aa4:	f1 f7       	brne	.-4      	; 0xaa2 <InitLCD+0x5a>
 aa6:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 aa8:	88 b1       	in	r24, 0x08	; 8
 aaa:	8f 77       	andi	r24, 0x7F	; 127
 aac:	88 b9       	out	0x08, r24	; 8
 aae:	85 e0       	ldi	r24, 0x05	; 5
 ab0:	8a 95       	dec	r24
 ab2:	f1 f7       	brne	.-4      	; 0xab0 <InitLCD+0x68>
 ab4:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 ab6:	0e 94 ac 05 	call	0xb58	; 0xb58 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 aba:	60 e0       	ldi	r22, 0x00	; 0
 abc:	8c 2f       	mov	r24, r28
 abe:	8c 60       	ori	r24, 0x0C	; 12
 ac0:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	88 e2       	ldi	r24, 0x28	; 40
 ac8:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
}
 acc:	cf 91       	pop	r28
 ace:	08 95       	ret

Disassembly of section .text.LCDWriteString:

00000fa6 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 fa6:	cf 92       	push	r12
 fa8:	df 92       	push	r13
 faa:	ef 92       	push	r14
 fac:	6b 01       	movw	r12, r22
 fae:	e8 2e       	mov	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 fb0:	07 c0       	rjmp	.+14     	; 0xfc0 <LCDWriteString+0x1a>
 {
	LCDData(*msg);
 fb2:	61 e0       	ldi	r22, 0x01	; 1
 fb4:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
	msg++;
 fb8:	8f ef       	ldi	r24, 0xFF	; 255
 fba:	c8 1a       	sub	r12, r24
 fbc:	d8 0a       	sbc	r13, r24
 fbe:	e8 0a       	sbc	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 fc0:	f6 01       	movw	r30, r12
 fc2:	5e 2d       	mov	r21, r14
 fc4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__xload_1>
 fc8:	86 2f       	mov	r24, r22
 fca:	61 11       	cpse	r22, r1
 fcc:	f2 cf       	rjmp	.-28     	; 0xfb2 <LCDWriteString+0xc>
 {
	LCDData(*msg);
	msg++;
 }
}
 fce:	ef 90       	pop	r14
 fd0:	df 90       	pop	r13
 fd2:	cf 90       	pop	r12
 fd4:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

00000760 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 760:	ef 92       	push	r14
 762:	ff 92       	push	r15
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	00 d0       	rcall	.+0      	; 0x76e <LCDWriteInt+0xe>
 76e:	0f 92       	push	r0
 770:	0f 92       	push	r0
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 778:	fe 01       	movw	r30, r28
 77a:	31 96       	adiw	r30, 0x01	; 1
 77c:	25 e0       	ldi	r18, 0x05	; 5
 77e:	df 01       	movw	r26, r30
 780:	1d 92       	st	X+, r1
 782:	2a 95       	dec	r18
 784:	e9 f7       	brne	.-6      	; 0x780 <LCDWriteInt+0x20>
	int i=4,j=0;
 786:	24 e0       	ldi	r18, 0x04	; 4
 788:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 78a:	0f c0       	rjmp	.+30     	; 0x7aa <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 78c:	6a e0       	ldi	r22, 0x0A	; 10
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
 794:	e1 e0       	ldi	r30, 0x01	; 1
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	ec 0f       	add	r30, r28
 79a:	fd 1f       	adc	r31, r29
 79c:	e2 0f       	add	r30, r18
 79e:	f3 1f       	adc	r31, r19
 7a0:	80 83       	st	Z, r24
	val=val/10;
 7a2:	86 2f       	mov	r24, r22
 7a4:	97 2f       	mov	r25, r23
	i--;
 7a6:	21 50       	subi	r18, 0x01	; 1
 7a8:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 7aa:	00 97       	sbiw	r24, 0x00	; 0
 7ac:	79 f7       	brne	.-34     	; 0x78c <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 7ae:	bf ef       	ldi	r27, 0xFF	; 255
 7b0:	eb 16       	cp	r14, r27
 7b2:	fb 06       	cpc	r15, r27
 7b4:	81 f4       	brne	.+32     	; 0x7d6 <LCDWriteInt+0x76>
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 7b8:	0f 5f       	subi	r16, 0xFF	; 255
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <LCDWriteInt+0x62>
 7be:	00 e0       	ldi	r16, 0x00	; 0
 7c0:	10 e0       	ldi	r17, 0x00	; 0
 7c2:	e1 e0       	ldi	r30, 0x01	; 1
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	ec 0f       	add	r30, r28
 7c8:	fd 1f       	adc	r31, r29
 7ca:	e0 0f       	add	r30, r16
 7cc:	f1 1f       	adc	r31, r17
 7ce:	20 81       	ld	r18, Z
 7d0:	22 23       	and	r18, r18
 7d2:	91 f3       	breq	.-28     	; 0x7b8 <LCDWriteInt+0x58>
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 7d6:	05 e0       	ldi	r16, 0x05	; 5
 7d8:	10 e0       	ldi	r17, 0x00	; 0
 7da:	0e 19       	sub	r16, r14
 7dc:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 7de:	99 23       	and	r25, r25
 7e0:	94 f4       	brge	.+36     	; 0x806 <LCDWriteInt+0xa6>
 7e2:	61 e0       	ldi	r22, 0x01	; 1
 7e4:	8d e2       	ldi	r24, 0x2D	; 45
 7e6:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
 7ea:	0d c0       	rjmp	.+26     	; 0x806 <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 7ec:	e1 e0       	ldi	r30, 0x01	; 1
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	ec 0f       	add	r30, r28
 7f2:	fd 1f       	adc	r31, r29
 7f4:	e0 0f       	add	r30, r16
 7f6:	f1 1f       	adc	r31, r17
 7f8:	80 81       	ld	r24, Z
 7fa:	61 e0       	ldi	r22, 0x01	; 1
 7fc:	80 5d       	subi	r24, 0xD0	; 208
 7fe:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 802:	0f 5f       	subi	r16, 0xFF	; 255
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	05 30       	cpi	r16, 0x05	; 5
 808:	11 05       	cpc	r17, r1
 80a:	84 f3       	brlt	.-32     	; 0x7ec <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	0f 90       	pop	r0
 814:	0f 90       	pop	r0
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

00001170 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
    1170:	88 32       	cpi	r24, 0x28	; 40
    1172:	30 f4       	brcc	.+12     	; 0x1180 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
    1174:	61 11       	cpse	r22, r1
    1176:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
    1180:	08 95       	ret

Disassembly of section .text.setup:

00001192 <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
    1192:	fc 01       	movw	r30, r24
    1194:	11 82       	std	Z+1, r1	; 0x01
    1196:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
    1198:	fb 01       	movw	r30, r22
    119a:	11 82       	std	Z+1, r1	; 0x01
    119c:	10 82       	st	Z, r1
    119e:	08 95       	ret

Disassembly of section .text.initLink:

000010ea <initLink>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
    10f0:	83 e0       	ldi	r24, 0x03	; 3
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 43 03 	call	0x686	; 0x686 <__simple_malloc>
    10f8:	99 83       	std	Y+1, r25	; 0x01
    10fa:	88 83       	st	Y, r24
    10fc:	fc 01       	movw	r30, r24
    10fe:	12 82       	std	Z+2, r1	; 0x02
    1100:	11 82       	std	Z+1, r1	; 0x01
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

Disassembly of section .text.enqueue:

00000efc <enqueue>:
 efc:	db 01       	movw	r26, r22
 efe:	ed 91       	ld	r30, X+
 f00:	fc 91       	ld	r31, X
 f02:	30 97       	sbiw	r30, 0x00	; 0
 f04:	61 f0       	breq	.+24     	; 0xf1e <enqueue+0x22>
 f06:	da 01       	movw	r26, r20
 f08:	8d 91       	ld	r24, X+
 f0a:	9c 91       	ld	r25, X
 f0c:	11 97       	sbiw	r26, 0x01	; 1
 f0e:	92 83       	std	Z+2, r25	; 0x02
 f10:	81 83       	std	Z+1, r24	; 0x01
 f12:	8d 91       	ld	r24, X+
 f14:	9c 91       	ld	r25, X
 f16:	fb 01       	movw	r30, r22
 f18:	91 83       	std	Z+1, r25	; 0x01
 f1a:	80 83       	st	Z, r24
 f1c:	08 95       	ret
 f1e:	da 01       	movw	r26, r20
 f20:	2d 91       	ld	r18, X+
 f22:	3c 91       	ld	r19, X
 f24:	11 97       	sbiw	r26, 0x01	; 1
 f26:	fc 01       	movw	r30, r24
 f28:	31 83       	std	Z+1, r19	; 0x01
 f2a:	20 83       	st	Z, r18
 f2c:	8d 91       	ld	r24, X+
 f2e:	9c 91       	ld	r25, X
 f30:	db 01       	movw	r26, r22
 f32:	8d 93       	st	X+, r24
 f34:	9c 93       	st	X, r25
 f36:	08 95       	ret

Disassembly of section .text.dequeue:

00000fd6 <dequeue>:
     fd6:	fc 01       	movw	r30, r24
     fd8:	80 81       	ld	r24, Z
     fda:	91 81       	ldd	r25, Z+1	; 0x01
     fdc:	da 01       	movw	r26, r20
     fde:	8d 93       	st	X+, r24
     fe0:	9c 93       	st	X, r25
     fe2:	a0 81       	ld	r26, Z
     fe4:	b1 81       	ldd	r27, Z+1	; 0x01
     fe6:	10 97       	sbiw	r26, 0x00	; 0
     fe8:	31 f0       	breq	.+12     	; 0xff6 <dequeue+0x20>
     fea:	11 96       	adiw	r26, 0x01	; 1
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	12 97       	sbiw	r26, 0x02	; 2
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	89 2b       	or	r24, r25
     ffc:	19 f4       	brne	.+6      	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ffe:	fb 01       	movw	r30, r22
    1000:	11 82       	std	Z+1, r1	; 0x01
    1002:	10 82       	st	Z, r1
    1004:	08 95       	ret

Disassembly of section .text.size:

00001140 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
    1140:	dc 01       	movw	r26, r24
    1142:	ed 91       	ld	r30, X+
    1144:	fc 91       	ld	r31, X
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <size+0x14>
		numElements++;
    114c:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
    114e:	01 80       	ldd	r0, Z+1	; 0x01
    1150:	f2 81       	ldd	r31, Z+2	; 0x02
    1152:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	d1 f7       	brne	.-12     	; 0x114c <size+0xc>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
    1158:	08 95       	ret

Disassembly of section .text.categorize:

000008e6 <categorize>:
	in_OR_flag = 0;
	LCDWriteIntXY(0,0,ADC_min_min,4);
	LCDWriteIntXY(5,0,ADC_max_min,4);
	LCDWriteIntXY(10,0,ADC_curr_min,4);
	LCDWriteIntXY(10,1,INT0_counter,2);
	ADC_curr_min = 1023;
 8e6:	80 e1       	ldi	r24, 0x10	; 16
 8e8:	92 e0       	ldi	r25, 0x02	; 2
 8ea:	0e 94 75 08 	call	0x10ea	; 0x10ea <initLink>
 8ee:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <ADC_curr_min>
 8f2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <ADC_curr_min+0x1>
 8f6:	82 38       	cpi	r24, 0x82	; 130
 8f8:	93 40       	sbci	r25, 0x03	; 3
 8fa:	58 f0       	brcs	.+22     	; 0x912 <categorize+0x2c>
 8fc:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 900:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 904:	10 82       	st	Z, r1
 906:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <queue_black_counter>
 90a:	8f 5f       	subi	r24, 0xFF	; 255
 90c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <queue_black_counter>
 910:	31 c0       	rjmp	.+98     	; 0x974 <categorize+0x8e>
 912:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <ADC_curr_min>
 916:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <ADC_curr_min+0x1>
 91a:	8c 3b       	cpi	r24, 0xBC	; 188
 91c:	92 40       	sbci	r25, 0x02	; 2
 91e:	60 f0       	brcs	.+24     	; 0x938 <categorize+0x52>
 920:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 924:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	80 83       	st	Z, r24
 92c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <queue_white_counter>
 930:	8f 5f       	subi	r24, 0xFF	; 255
 932:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <queue_white_counter>
 936:	1e c0       	rjmp	.+60     	; 0x974 <categorize+0x8e>
 938:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <ADC_curr_min>
 93c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <ADC_curr_min+0x1>
 940:	84 36       	cpi	r24, 0x64	; 100
 942:	91 05       	cpc	r25, r1
 944:	60 f0       	brcs	.+24     	; 0x95e <categorize+0x78>
 946:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 94a:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	80 83       	st	Z, r24
 952:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <queue_steel_counter>
 956:	8f 5f       	subi	r24, 0xFF	; 255
 958:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <queue_steel_counter>
 95c:	0b c0       	rjmp	.+22     	; 0x974 <categorize+0x8e>
 95e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <newLink>
 962:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <newLink+0x1>
 966:	83 e0       	ldi	r24, 0x03	; 3
 968:	80 83       	st	Z, r24
 96a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <queue_aluminum_counter>
 96e:	8f 5f       	subi	r24, 0xFF	; 255
 970:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <queue_aluminum_counter>
 974:	40 e1       	ldi	r20, 0x10	; 16
 976:	52 e0       	ldi	r21, 0x02	; 2
 978:	68 e0       	ldi	r22, 0x08	; 8
 97a:	72 e0       	ldi	r23, 0x02	; 2
 97c:	8a e0       	ldi	r24, 0x0A	; 10
 97e:	92 e0       	ldi	r25, 0x02	; 2
 980:	0e 94 7e 07 	call	0xefc	; 0xefc <enqueue>
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	93 e0       	ldi	r25, 0x03	; 3
 988:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <ADC_curr_min+0x1>
 98c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <ADC_curr_min>
 990:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ADC_counter+0x1>
 994:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ADC_counter>
 998:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <in_OR_flag>
 99c:	08 95       	ret

Disassembly of section .text.main:

0000016e <main>:
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	e1 e6       	ldi	r30, 0x61	; 97
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	80 83       	st	Z, r24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
 182:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <STATE>
 186:	f8 94       	cli
 188:	80 ef       	ldi	r24, 0xF0	; 240
 18a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 24 05 	call	0xa48	; 0xa48 <InitLCD>
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 27 06 	call	0xc4e	; 0xc4e <LCDByte>
 19c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <init_sensors>
 1a0:	0e 94 84 08 	call	0x1108	; 0x1108 <init_adc>
 1a4:	8d e7       	ldi	r24, 0x7D	; 125
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 3f 08 	call	0x107e	; 0x107e <init_pwm>
 1ac:	0e 94 64 08 	call	0x10c8	; 0x10c8 <init_dc_motor>
 1b0:	0e 94 30 07 	call	0xe60	; 0xe60 <init_stepper_motor>
 1b4:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <current_plate>
 1b8:	68 e0       	ldi	r22, 0x08	; 8
 1ba:	72 e0       	ldi	r23, 0x02	; 2
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	0e 94 c9 08 	call	0x1192	; 0x1192 <setup>
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 1cc:	66 e6       	ldi	r22, 0x66	; 102
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <LCDWriteString>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 1de:	68 e6       	ldi	r22, 0x68	; 104
 1e0:	71 e0       	ldi	r23, 0x01	; 1
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <LCDWriteString>
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 1f0:	6a e6       	ldi	r22, 0x6A	; 106
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <LCDWriteString>
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	89 e0       	ldi	r24, 0x09	; 9
 1fe:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 202:	6c e6       	ldi	r22, 0x6C	; 108
 204:	71 e0       	ldi	r23, 0x01	; 1
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <LCDWriteString>
 20c:	78 94       	sei
 20e:	80 e1       	ldi	r24, 0x10	; 16
 210:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 214:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <run_dc_motor>
 218:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <in_OR_flag>
 21c:	88 23       	and	r24, r24
 21e:	29 f0       	breq	.+10     	; 0x22a <main+0xbc>
 220:	0e 94 d7 08 	call	0x11ae	; 0x11ae <start_conversion>
 224:	1c 9b       	sbis	0x03, 4	; 3
 226:	0e 94 73 04 	call	0x8e6	; 0x8e6 <categorize>
 22a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <item_counter>
 22e:	80 33       	cpi	r24, 0x30	; 48
 230:	39 f4       	brne	.+14     	; 0x240 <main+0xd2>
 232:	88 ec       	ldi	r24, 0xC8	; 200
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <STATE>
 240:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ramp_down_flag>
 244:	88 23       	and	r24, r24
 246:	99 f0       	breq	.+38     	; 0x26e <main+0x100>
 248:	68 e0       	ldi	r22, 0x08	; 8
 24a:	72 e0       	ldi	r23, 0x02	; 2
 24c:	8a e0       	ldi	r24, 0x0A	; 10
 24e:	92 e0       	ldi	r25, 0x02	; 2
 250:	0e 94 a0 08 	call	0x1140	; 0x1140 <size>
 254:	89 2b       	or	r24, r25
 256:	59 f4       	brne	.+22     	; 0x26e <main+0x100>
 258:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <BUCKET_counter>
 25c:	88 23       	and	r24, r24
 25e:	39 f0       	breq	.+14     	; 0x26e <main+0x100>
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <STATE>
 26c:	d8 c0       	rjmp	.+432    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 26e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <STATE>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	09 f4       	brne	.+2      	; 0x278 <main+0x10a>
 276:	d3 c0       	rjmp	.+422    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 278:	18 f4       	brcc	.+6      	; 0x280 <main+0x112>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	41 f0       	breq	.+16     	; 0x28e <main+0x120>
 27e:	c7 cf       	rjmp	.-114    	; 0x20e <main+0xa0>
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	09 f4       	brne	.+2      	; 0x286 <main+0x118>
 284:	19 c1       	rjmp	.+562    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 286:	85 30       	cpi	r24, 0x05	; 5
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x11e>
 28a:	6b c1       	rjmp	.+726    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 28c:	c0 cf       	rjmp	.-128    	; 0x20e <main+0xa0>
 28e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <STATE>
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 298:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <BUCKET_counter>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <BUCKET_counter>
 2a2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <in_OR_flag>
 2a6:	88 23       	and	r24, r24
 2a8:	29 f0       	breq	.+10     	; 0x2b4 <main+0x146>
 2aa:	0e 94 d7 08 	call	0x11ae	; 0x11ae <start_conversion>
 2ae:	1c 9b       	sbis	0x03, 4	; 3
 2b0:	0e 94 73 04 	call	0x8e6	; 0x8e6 <categorize>
 2b4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <brake_dc_motor>
 2b8:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <head>
 2bc:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <head+0x1>
 2c0:	80 81       	ld	r24, Z
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	f1 f0       	breq	.+60     	; 0x302 <main+0x194>
 2c6:	08 f4       	brcc	.+2      	; 0x2ca <main+0x15c>
 2c8:	4a c0       	rjmp	.+148    	; 0x35e <main+0x1f0>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	89 f1       	breq	.+98     	; 0x330 <main+0x1c2>
 2ce:	83 30       	cpi	r24, 0x03	; 3
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <main+0x166>
 2d2:	5a c0       	rjmp	.+180    	; 0x388 <main+0x21a>
 2d4:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	e8 9f       	mul	r30, r24
 2dc:	f0 01       	movw	r30, r0
 2de:	11 24       	eor	r1, r1
 2e0:	e1 5e       	subi	r30, 0xE1	; 225
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	83 81       	ldd	r24, Z+3	; 0x03
 2e6:	08 2e       	mov	r0, r24
 2e8:	00 0c       	add	r0, r0
 2ea:	99 0b       	sbc	r25, r25
 2ec:	0e 94 92 08 	call	0x1124	; 0x1124 <StepperMotor_Rotate>
 2f0:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <aluminum_counter>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <aluminum_counter>
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <current_plate>
 300:	43 c0       	rjmp	.+134    	; 0x388 <main+0x21a>
 302:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	e8 9f       	mul	r30, r24
 30a:	f0 01       	movw	r30, r0
 30c:	11 24       	eor	r1, r1
 30e:	e1 5e       	subi	r30, 0xE1	; 225
 310:	fd 4f       	sbci	r31, 0xFD	; 253
 312:	81 81       	ldd	r24, Z+1	; 0x01
 314:	08 2e       	mov	r0, r24
 316:	00 0c       	add	r0, r0
 318:	99 0b       	sbc	r25, r25
 31a:	0e 94 92 08 	call	0x1124	; 0x1124 <StepperMotor_Rotate>
 31e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <steel_counter>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <steel_counter>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <current_plate>
 32e:	2c c0       	rjmp	.+88     	; 0x388 <main+0x21a>
 330:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	e8 9f       	mul	r30, r24
 338:	f0 01       	movw	r30, r0
 33a:	11 24       	eor	r1, r1
 33c:	e1 5e       	subi	r30, 0xE1	; 225
 33e:	fd 4f       	sbci	r31, 0xFD	; 253
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	08 2e       	mov	r0, r24
 344:	00 0c       	add	r0, r0
 346:	99 0b       	sbc	r25, r25
 348:	0e 94 92 08 	call	0x1124	; 0x1124 <StepperMotor_Rotate>
 34c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <white_counter>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <white_counter>
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <current_plate>
 35c:	15 c0       	rjmp	.+42     	; 0x388 <main+0x21a>
 35e:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <current_plate>
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	e8 9f       	mul	r30, r24
 366:	f0 01       	movw	r30, r0
 368:	11 24       	eor	r1, r1
 36a:	e1 5e       	subi	r30, 0xE1	; 225
 36c:	fd 4f       	sbci	r31, 0xFD	; 253
 36e:	80 81       	ld	r24, Z
 370:	08 2e       	mov	r0, r24
 372:	00 0c       	add	r0, r0
 374:	99 0b       	sbc	r25, r25
 376:	0e 94 92 08 	call	0x1124	; 0x1124 <StepperMotor_Rotate>
 37a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <black_counter>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <black_counter>
 384:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <current_plate>
 388:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <run_dc_motor>
 38c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <in_OR_flag>
 390:	88 23       	and	r24, r24
 392:	29 f0       	breq	.+10     	; 0x39e <main+0x230>
 394:	0e 94 d7 08 	call	0x11ae	; 0x11ae <start_conversion>
 398:	1c 9b       	sbis	0x03, 4	; 3
 39a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <categorize>
 39e:	44 e0       	ldi	r20, 0x04	; 4
 3a0:	52 e0       	ldi	r21, 0x02	; 2
 3a2:	68 e0       	ldi	r22, 0x08	; 8
 3a4:	72 e0       	ldi	r23, 0x02	; 2
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dequeue>
 3ae:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rtnLink>
 3b2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rtnLink+0x1>
 3b6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__simple_free>
 3ba:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <item_counter>
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <item_counter>
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 3cc:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <aluminum_counter>
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 3e2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <steel_counter>
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 3f8:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <white_counter>
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	89 e0       	ldi	r24, 0x09	; 9
 40a:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 40e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <black_counter>
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 41c:	f8 ce       	rjmp	.-528    	; 0x20e <main+0xa0>
 41e:	80 ec       	ldi	r24, 0xC0	; 192
 420:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 424:	0e 94 ee 08 	call	0x11dc	; 0x11dc <brake_dc_motor>
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 430:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <aluminum_counter>
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 446:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <steel_counter>
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 45c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <white_counter>
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	89 e0       	ldi	r24, 0x09	; 9
 46e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 472:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <black_counter>
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 480:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <aluminum_counter>
 484:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <steel_counter>
 488:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <white_counter>
 48c:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <black_counter>
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	93 e0       	ldi	r25, 0x03	; 3
 494:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <ADC_curr_min+0x1>
 498:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <ADC_curr_min>
 49c:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ADC_counter+0x1>
 4a0:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ADC_counter>
 4a4:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <INT0_counter>
 4a8:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <INT1_counter>
 4ac:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <INT4_counter>
 4b0:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <INT5_counter>
 4b4:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <STATE>
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 4be:	0e 94 ee 08 	call	0x11dc	; 0x11dc <brake_dc_motor>
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 4ca:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <queue_aluminum_counter>
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 4e0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <queue_steel_counter>
 4e4:	62 e0       	ldi	r22, 0x02	; 2
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 4f6:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <queue_white_counter>
 4fa:	62 e0       	ldi	r22, 0x02	; 2
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	89 e0       	ldi	r24, 0x09	; 9
 508:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCDGotoXY>
 50c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <queue_black_counter>
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 b0 03 	call	0x760	; 0x760 <LCDWriteInt>
 51a:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <queue_aluminum_counter>
 51e:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <queue_steel_counter>
 522:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <queue_white_counter>
 526:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <queue_black_counter>
 52a:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <aluminum_counter>
 52e:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <steel_counter>
 532:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <white_counter>
 536:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <black_counter>
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	93 e0       	ldi	r25, 0x03	; 3
 53e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <ADC_curr_min+0x1>
 542:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <ADC_curr_min>
 546:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <ADC_counter+0x1>
 54a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <ADC_counter>
 54e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <INT0_counter>
 552:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <INT1_counter>
 556:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <INT4_counter>
 55a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <INT5_counter>
 55e:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <STATE>
 562:	0e 94 dd 08 	call	0x11ba	; 0x11ba <disable_adc>
 566:	0e 94 c1 08 	call	0x1182	; 0x1182 <disable_dc_motor>
 56a:	f8 94       	cli
 56c:	c0 e0       	ldi	r28, 0x00	; 0
 56e:	d0 e0       	ldi	r29, 0x00	; 0
 570:	10 c0       	rjmp	.+32     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 572:	0b e0       	ldi	r16, 0x0B	; 11
 574:	11 e0       	ldi	r17, 0x01	; 1
 576:	80 ef       	ldi	r24, 0xF0	; 240
 578:	f8 01       	movw	r30, r16
 57a:	80 83       	st	Z, r24
 57c:	84 ef       	ldi	r24, 0xF4	; 244
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 584:	f8 01       	movw	r30, r16
 586:	10 82       	st	Z, r1
 588:	84 ef       	ldi	r24, 0xF4	; 244
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 590:	21 96       	adiw	r28, 0x01	; 1
 592:	ca 30       	cpi	r28, 0x0A	; 10
 594:	d1 05       	cpc	r29, r1
 596:	6c f3       	brlt	.-38     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

Disassembly of section .text.__vector_default:

000011ec <__vector_default>:
}

/* Interrupt Service Routine*/
EMPTY_INTERRUPT(BADISR_vect);
    11ec:	18 95       	reti

Disassembly of section .text.__vector_29:

00000ad0 <__vector_29>:
	in_OR_flag = 0;
	LCDWriteIntXY(0,0,ADC_min_min,4);
	LCDWriteIntXY(5,0,ADC_max_min,4);
	LCDWriteIntXY(10,0,ADC_curr_min,4);
	LCDWriteIntXY(10,1,INT0_counter,2);
	ADC_curr_min = 1023;
 ad0:	1f 92       	push	r1
 ad2:	0f 92       	push	r0
 ad4:	0f b6       	in	r0, 0x3f	; 63
 ad6:	0f 92       	push	r0
 ad8:	11 24       	eor	r1, r1
 ada:	2f 93       	push	r18
 adc:	3f 93       	push	r19
 ade:	8f 93       	push	r24
 ae0:	9f 93       	push	r25
 ae2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 ae6:	22 95       	swap	r18
 ae8:	26 95       	lsr	r18
 aea:	26 95       	lsr	r18
 aec:	23 70       	andi	r18, 0x03	; 3
 aee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	82 0f       	add	r24, r18
 afe:	91 1d       	adc	r25, r1
 b00:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <ADC_result+0x1>
 b04:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <ADC_result>
 b08:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <ADC_result>
 b0c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <ADC_result+0x1>
 b10:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <ADC_curr_min>
 b14:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <ADC_curr_min+0x1>
 b18:	28 17       	cp	r18, r24
 b1a:	39 07       	cpc	r19, r25
 b1c:	40 f4       	brcc	.+16     	; 0xb2e <__vector_29+0x5e>
 b1e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <ADC_result>
 b22:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <ADC_result+0x1>
 b26:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <ADC_curr_min+0x1>
 b2a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <ADC_curr_min>
 b2e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <ADC_counter>
 b32:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <ADC_counter+0x1>
 b36:	01 96       	adiw	r24, 0x01	; 1
 b38:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <ADC_counter+0x1>
 b3c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <ADC_counter>
 b40:	81 e0       	ldi	r24, 0x01	; 1
 b42:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <in_OR_flag>
 b46:	9f 91       	pop	r25
 b48:	8f 91       	pop	r24
 b4a:	3f 91       	pop	r19
 b4c:	2f 91       	pop	r18
 b4e:	0f 90       	pop	r0
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	0f 90       	pop	r0
 b54:	1f 90       	pop	r1
 b56:	18 95       	reti

Disassembly of section .text.__vector_1:

00000e02 <__vector_1>:
 e02:	1f 92       	push	r1
 e04:	0f 92       	push	r0
 e06:	0f b6       	in	r0, 0x3f	; 63
 e08:	0f 92       	push	r0
 e0a:	11 24       	eor	r1, r1
 e0c:	0b b6       	in	r0, 0x3b	; 59
 e0e:	0f 92       	push	r0
 e10:	2f 93       	push	r18
 e12:	3f 93       	push	r19
 e14:	4f 93       	push	r20
 e16:	5f 93       	push	r21
 e18:	6f 93       	push	r22
 e1a:	7f 93       	push	r23
 e1c:	8f 93       	push	r24
 e1e:	9f 93       	push	r25
 e20:	af 93       	push	r26
 e22:	bf 93       	push	r27
 e24:	ef 93       	push	r30
 e26:	ff 93       	push	r31
 e28:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <enable_adc>
 e2c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <start_conversion>
 e30:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <INT0_counter>
 e34:	8f 5f       	subi	r24, 0xFF	; 255
 e36:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <INT0_counter>
 e3a:	ff 91       	pop	r31
 e3c:	ef 91       	pop	r30
 e3e:	bf 91       	pop	r27
 e40:	af 91       	pop	r26
 e42:	9f 91       	pop	r25
 e44:	8f 91       	pop	r24
 e46:	7f 91       	pop	r23
 e48:	6f 91       	pop	r22
 e4a:	5f 91       	pop	r21
 e4c:	4f 91       	pop	r20
 e4e:	3f 91       	pop	r19
 e50:	2f 91       	pop	r18
 e52:	0f 90       	pop	r0
 e54:	0b be       	out	0x3b, r0	; 59
 e56:	0f 90       	pop	r0
 e58:	0f be       	out	0x3f, r0	; 63
 e5a:	0f 90       	pop	r0
 e5c:	1f 90       	pop	r1
 e5e:	18 95       	reti

Disassembly of section .text.__vector_2:

00001006 <__vector_2>:
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	8f 93       	push	r24
    1012:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <INT1_counter>
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <INT1_counter>
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <STATE>
    1022:	8f 91       	pop	r24
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

Disassembly of section .text.__vector_5:

00000d9c <__vector_5>:
 d9c:	1f 92       	push	r1
 d9e:	0f 92       	push	r0
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	0f 92       	push	r0
 da4:	11 24       	eor	r1, r1
 da6:	0b b6       	in	r0, 0x3b	; 59
 da8:	0f 92       	push	r0
 daa:	2f 93       	push	r18
 dac:	3f 93       	push	r19
 dae:	4f 93       	push	r20
 db0:	5f 93       	push	r21
 db2:	6f 93       	push	r22
 db4:	7f 93       	push	r23
 db6:	8f 93       	push	r24
 db8:	9f 93       	push	r25
 dba:	af 93       	push	r26
 dbc:	bf 93       	push	r27
 dbe:	ef 93       	push	r30
 dc0:	ff 93       	push	r31
 dc2:	89 e1       	ldi	r24, 0x19	; 25
 dc4:	90 e0       	ldi	r25, 0x00	; 0
 dc6:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 dca:	60 9b       	sbis	0x0c, 0	; 12
 dcc:	fe cf       	rjmp	.-4      	; 0xdca <__vector_5+0x2e>
 dce:	89 e1       	ldi	r24, 0x19	; 25
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 dd6:	84 e0       	ldi	r24, 0x04	; 4
 dd8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <STATE>
 ddc:	ff 91       	pop	r31
 dde:	ef 91       	pop	r30
 de0:	bf 91       	pop	r27
 de2:	af 91       	pop	r26
 de4:	9f 91       	pop	r25
 de6:	8f 91       	pop	r24
 de8:	7f 91       	pop	r23
 dea:	6f 91       	pop	r22
 dec:	5f 91       	pop	r21
 dee:	4f 91       	pop	r20
 df0:	3f 91       	pop	r19
 df2:	2f 91       	pop	r18
 df4:	0f 90       	pop	r0
 df6:	0b be       	out	0x3b, r0	; 59
 df8:	0f 90       	pop	r0
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	0f 90       	pop	r0
 dfe:	1f 90       	pop	r1
 e00:	18 95       	reti

Disassembly of section .text.__vector_6:

00000cbe <__vector_6>:
 cbe:	1f 92       	push	r1
 cc0:	0f 92       	push	r0
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	0f 92       	push	r0
 cc6:	11 24       	eor	r1, r1
 cc8:	0b b6       	in	r0, 0x3b	; 59
 cca:	0f 92       	push	r0
 ccc:	2f 93       	push	r18
 cce:	3f 93       	push	r19
 cd0:	4f 93       	push	r20
 cd2:	5f 93       	push	r21
 cd4:	6f 93       	push	r22
 cd6:	7f 93       	push	r23
 cd8:	8f 93       	push	r24
 cda:	9f 93       	push	r25
 cdc:	af 93       	push	r26
 cde:	bf 93       	push	r27
 ce0:	ef 93       	push	r30
 ce2:	ff 93       	push	r31
 ce4:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <INT5_counter>
 ce8:	8f 5f       	subi	r24, 0xFF	; 255
 cea:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <INT5_counter>
 cee:	89 e1       	ldi	r24, 0x19	; 25
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 cf6:	61 9b       	sbis	0x0c, 1	; 12
 cf8:	fe cf       	rjmp	.-4      	; 0xcf6 <__vector_6+0x38>
 cfa:	89 e1       	ldi	r24, 0x19	; 25
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 d02:	81 e0       	ldi	r24, 0x01	; 1
 d04:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <ramp_down_flag>
 d08:	ff 91       	pop	r31
 d0a:	ef 91       	pop	r30
 d0c:	bf 91       	pop	r27
 d0e:	af 91       	pop	r26
 d10:	9f 91       	pop	r25
 d12:	8f 91       	pop	r24
 d14:	7f 91       	pop	r23
 d16:	6f 91       	pop	r22
 d18:	5f 91       	pop	r21
 d1a:	4f 91       	pop	r20
 d1c:	3f 91       	pop	r19
 d1e:	2f 91       	pop	r18
 d20:	0f 90       	pop	r0
 d22:	0b be       	out	0x3b, r0	; 59
 d24:	0f 90       	pop	r0
 d26:	0f be       	out	0x3f, r0	; 63
 d28:	0f 90       	pop	r0
 d2a:	1f 90       	pop	r1
 d2c:	18 95       	reti

Disassembly of section .text.init_pwm:

0000107e <init_pwm>:

/****** PWM ******/

void init_pwm(int num){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
    107e:	94 b5       	in	r25, 0x24	; 36
    1080:	93 60       	ori	r25, 0x03	; 3
    1082:	94 bd       	out	0x24, r25	; 36
	
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
    1084:	ee e6       	ldi	r30, 0x6E	; 110
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	90 81       	ld	r25, Z
    108a:	92 60       	ori	r25, 0x02	; 2
    108c:	90 83       	st	Z, r25
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
    108e:	94 b5       	in	r25, 0x24	; 36
    1090:	90 68       	ori	r25, 0x80	; 128
    1092:	94 bd       	out	0x24, r25	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
    1094:	95 b5       	in	r25, 0x25	; 37
    1096:	92 60       	ori	r25, 0x02	; 2
    1098:	95 bd       	out	0x25, r25	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = num;
    109a:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
    109c:	84 b1       	in	r24, 0x04	; 4
    109e:	80 68       	ori	r24, 0x80	; 128
    10a0:	84 b9       	out	0x04, r24	; 4
    10a2:	08 95       	ret

Disassembly of section .text.init_sensors:

000010a4 <init_sensors>:
#include "sensor.h"
#include "timer.h"

void init_sensors(){
  // OR
  EIMSK |= (_BV(INT0));
    10a4:	8d b3       	in	r24, 0x1d	; 29
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	8d bb       	out	0x1d, r24	; 29
  EICRA |= (_BV(ISC01) | _BV(ISC00)); // rising edge
    10aa:	e9 e6       	ldi	r30, 0x69	; 105
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	83 60       	ori	r24, 0x03	; 3
    10b2:	80 83       	st	Z, r24

  // EX
  EIMSK |= (_BV(INT1));		
    10b4:	8d b3       	in	r24, 0x1d	; 29
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC11));  // falling edge
    10ba:	80 81       	ld	r24, Z
    10bc:	88 60       	ori	r24, 0x08	; 8
    10be:	80 83       	st	Z, r24

  // GPIO
  DDRB &= ~(_BV(DDB6) | _BV(DDB5) | _BV(DDB4));
    10c0:	84 b1       	in	r24, 0x04	; 4
    10c2:	8f 78       	andi	r24, 0x8F	; 143
    10c4:	84 b9       	out	0x04, r24	; 4
    10c6:	08 95       	ret

Disassembly of section .text.init_stepper_motor:

00000e60 <init_stepper_motor>:
																	  {2, 1, 0, 3},
																	  {3, 2, 1, 0}};


/* Initialize Stepper Motor to Black */
void init_stepper_motor(){
 e60:	cf 93       	push	r28
 e62:	df 93       	push	r29
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
 e64:	81 b1       	in	r24, 0x01	; 1
 e66:	8f 63       	ori	r24, 0x3F	; 63
 e68:	81 b9       	out	0x01, r24	; 1
	PORTL = 0xF0;
 e6a:	80 ef       	ldi	r24, 0xF0	; 240
 e6c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	int i = 0;
 e70:	c0 e0       	ldi	r28, 0x00	; 0
 e72:	d0 e0       	ldi	r29, 0x00	; 0

	while(HE){ // HE: active low
 e74:	1a c0       	rjmp	.+52     	; 0xeaa <init_stepper_motor+0x4a>
		temp_step = i % 4;
 e76:	ce 01       	movw	r24, r28
 e78:	83 70       	andi	r24, 0x03	; 3
 e7a:	90 78       	andi	r25, 0x80	; 128
 e7c:	99 23       	and	r25, r25
 e7e:	24 f4       	brge	.+8      	; 0xe88 <init_stepper_motor+0x28>
 e80:	01 97       	sbiw	r24, 0x01	; 1
 e82:	8c 6f       	ori	r24, 0xFC	; 252
 e84:	9f 6f       	ori	r25, 0xFF	; 255
 e86:	01 96       	adiw	r24, 0x01	; 1
 e88:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 e8c:	82 b1       	in	r24, 0x02	; 2
 e8e:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <temp_step>
 e92:	f0 e0       	ldi	r31, 0x00	; 0
 e94:	ea 5a       	subi	r30, 0xAA	; 170
 e96:	fd 4f       	sbci	r31, 0xFD	; 253
 e98:	90 81       	ld	r25, Z
 e9a:	80 7c       	andi	r24, 0xC0	; 192
 e9c:	89 2b       	or	r24, r25
 e9e:	82 b9       	out	0x02, r24	; 2
		mTimer(18);
 ea0:	82 e1       	ldi	r24, 0x12	; 18
 ea2:	90 e0       	ldi	r25, 0x00	; 0
 ea4:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
		i += 1;
 ea8:	21 96       	adiw	r28, 0x01	; 1
void init_stepper_motor(){
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
	PORTL = 0xF0;
	int i = 0;

	while(HE){ // HE: active low
 eaa:	1e 99       	sbic	0x03, 6	; 3
 eac:	e4 cf       	rjmp	.-56     	; 0xe76 <init_stepper_motor+0x16>
		temp_step = i % 4;
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
		mTimer(18);
		i += 1;
	}
	current_step = temp_step;
 eae:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <temp_step>
 eb2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <current_step>
}
 eb6:	df 91       	pop	r29
 eb8:	cf 91       	pop	r28
 eba:	08 95       	ret

Disassembly of section .text.StepperMotor_CW:

0000099e <StepperMotor_CW>:
		StepperMotor_CW(-num_steps);
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
 99e:	ef 92       	push	r14
 9a0:	ff 92       	push	r15
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 9ac:	c0 e0       	ldi	r28, 0x00	; 0
 9ae:	d0 e0       	ldi	r29, 0x00	; 0
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
 9b0:	00 e0       	ldi	r16, 0x00	; 0
 9b2:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < num_steps; i++){
 9b4:	3b c0       	rjmp	.+118    	; 0xa2c <StepperMotor_CW+0x8e>
		temp_step = (current_step + i + 1) % 4;
 9b6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <current_step>
 9ba:	9e 01       	movw	r18, r28
 9bc:	28 0f       	add	r18, r24
 9be:	31 1d       	adc	r19, r1
 9c0:	c9 01       	movw	r24, r18
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	83 70       	andi	r24, 0x03	; 3
 9c6:	90 78       	andi	r25, 0x80	; 128
 9c8:	99 23       	and	r25, r25
 9ca:	24 f4       	brge	.+8      	; 0x9d4 <StepperMotor_CW+0x36>
 9cc:	01 97       	sbiw	r24, 0x01	; 1
 9ce:	8c 6f       	ori	r24, 0xFC	; 252
 9d0:	9f 6f       	ori	r25, 0xFF	; 255
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 9d8:	82 b1       	in	r24, 0x02	; 2
 9da:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <temp_step>
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	ea 5a       	subi	r30, 0xAA	; 170
 9e2:	fd 4f       	sbci	r31, 0xFD	; 253
 9e4:	90 81       	ld	r25, Z
 9e6:	80 7c       	andi	r24, 0xC0	; 192
 9e8:	89 2b       	or	r24, r25
 9ea:	82 b9       	out	0x02, r24	; 2

		// mTimer(18);

		/* Acceleration and Deceleration Profile */
		if((i) < ACCEL_TOTAL_STEPS){ 
 9ec:	ce 30       	cpi	r28, 0x0E	; 14
 9ee:	d1 05       	cpc	r29, r1
 9f0:	44 f4       	brge	.+16     	; 0xa02 <StepperMotor_CW+0x64>
			mTimer(accel_speed[i]);
 9f2:	fe 01       	movw	r30, r28
 9f4:	e1 5c       	subi	r30, 0xC1	; 193
 9f6:	fd 4f       	sbci	r31, 0xFD	; 253
 9f8:	80 81       	ld	r24, Z
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 a00:	14 c0       	rjmp	.+40     	; 0xa2a <StepperMotor_CW+0x8c>
		} else if ((i) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 a02:	c7 01       	movw	r24, r14
 a04:	0a 97       	sbiw	r24, 0x0a	; 10
 a06:	8c 17       	cp	r24, r28
 a08:	9d 07       	cpc	r25, r29
 a0a:	54 f4       	brge	.+20     	; 0xa20 <StepperMotor_CW+0x82>
			mTimer(decel_speed[j]);
 a0c:	f8 01       	movw	r30, r16
 a0e:	e3 5b       	subi	r30, 0xB3	; 179
 a10:	fd 4f       	sbci	r31, 0xFD	; 253
 a12:	80 81       	ld	r24, Z
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
			j += 1;
 a1a:	0f 5f       	subi	r16, 0xFF	; 255
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
 a1e:	05 c0       	rjmp	.+10     	; 0xa2a <StepperMotor_CW+0x8c>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 a20:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <accel_speed+0xd>
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 a2a:	21 96       	adiw	r28, 0x01	; 1
 a2c:	ce 15       	cp	r28, r14
 a2e:	df 05       	cpc	r29, r15
 a30:	14 f2       	brlt	.-124    	; 0x9b6 <StepperMotor_CW+0x18>
		}
		/* End of Accel/Deccel Profile */

	}
	
	current_step = temp_step;
 a32:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <temp_step>
 a36:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <current_step>

}
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	1f 91       	pop	r17
 a40:	0f 91       	pop	r16
 a42:	ff 90       	pop	r15
 a44:	ef 90       	pop	r14
 a46:	08 95       	ret

Disassembly of section .text.StepperMotor_CCW:

00000824 <StepperMotor_CCW>:

void StepperMotor_CCW(int num_steps){
 824:	ef 92       	push	r14
 826:	ff 92       	push	r15
 828:	0f 93       	push	r16
 82a:	1f 93       	push	r17
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	50 e0       	ldi	r21, 0x00	; 0
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
 836:	00 e0       	ldi	r16, 0x00	; 0
 838:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < num_steps; i++){
 83a:	46 c0       	rjmp	.+140    	; 0x8c8 <StepperMotor_CCW+0xa4>
		temp_step = ind[current_step][(i+1)%4];
 83c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <current_step>
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	ea 01       	movw	r28, r20
 844:	21 96       	adiw	r28, 0x01	; 1
 846:	9e 01       	movw	r18, r28
 848:	23 70       	andi	r18, 0x03	; 3
 84a:	30 78       	andi	r19, 0x80	; 128
 84c:	33 23       	and	r19, r19
 84e:	34 f4       	brge	.+12     	; 0x85c <StepperMotor_CCW+0x38>
 850:	21 50       	subi	r18, 0x01	; 1
 852:	31 09       	sbc	r19, r1
 854:	2c 6f       	ori	r18, 0xFC	; 252
 856:	3f 6f       	ori	r19, 0xFF	; 255
 858:	2f 5f       	subi	r18, 0xFF	; 255
 85a:	3f 4f       	sbci	r19, 0xFF	; 255
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	81 5d       	subi	r24, 0xD1	; 209
 866:	9d 4f       	sbci	r25, 0xFD	; 253
 868:	fc 01       	movw	r30, r24
 86a:	e2 0f       	add	r30, r18
 86c:	f3 1f       	adc	r31, r19
 86e:	80 81       	ld	r24, Z
 870:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 874:	82 b1       	in	r24, 0x02	; 2
 876:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <temp_step>
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	ea 5a       	subi	r30, 0xAA	; 170
 87e:	fd 4f       	sbci	r31, 0xFD	; 253
 880:	90 81       	ld	r25, Z
 882:	80 7c       	andi	r24, 0xC0	; 192
 884:	89 2b       	or	r24, r25
 886:	82 b9       	out	0x02, r24	; 2
		
		// mTimer(18);

		// /* Acceleration and Deceleration Profile */
		if((i) < ACCEL_TOTAL_STEPS){ 
 888:	4e 30       	cpi	r20, 0x0E	; 14
 88a:	51 05       	cpc	r21, r1
 88c:	44 f4       	brge	.+16     	; 0x89e <StepperMotor_CCW+0x7a>
			mTimer(accel_speed[i]);
 88e:	fa 01       	movw	r30, r20
 890:	e1 5c       	subi	r30, 0xC1	; 193
 892:	fd 4f       	sbci	r31, 0xFD	; 253
 894:	80 81       	ld	r24, Z
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
 89c:	14 c0       	rjmp	.+40     	; 0x8c6 <StepperMotor_CCW+0xa2>
		} else if ((i) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 89e:	c7 01       	movw	r24, r14
 8a0:	0a 97       	sbiw	r24, 0x0a	; 10
 8a2:	84 17       	cp	r24, r20
 8a4:	95 07       	cpc	r25, r21
 8a6:	54 f4       	brge	.+20     	; 0x8bc <StepperMotor_CCW+0x98>
			mTimer(decel_speed[j]);
 8a8:	f8 01       	movw	r30, r16
 8aa:	e3 5b       	subi	r30, 0xB3	; 179
 8ac:	fd 4f       	sbci	r31, 0xFD	; 253
 8ae:	80 81       	ld	r24, Z
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
			j += 1;
 8b6:	0f 5f       	subi	r16, 0xFF	; 255
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <StepperMotor_CCW+0xa2>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 8bc:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <accel_speed+0xd>
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 5e 07 	call	0xebc	; 0xebc <mTimer>
	
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
 8c6:	ae 01       	movw	r20, r28
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 8c8:	4e 15       	cp	r20, r14
 8ca:	5f 05       	cpc	r21, r15
 8cc:	0c f4       	brge	.+2      	; 0x8d0 <StepperMotor_CCW+0xac>
 8ce:	b6 cf       	rjmp	.-148    	; 0x83c <StepperMotor_CCW+0x18>
		}
		/* End of Accel/Deccel Profile */			

	}

	current_step = temp_step;
 8d0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <temp_step>
 8d4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <current_step>

 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

Disassembly of section .text.StepperMotor_Rotate:

00001124 <StepperMotor_Rotate>:
	current_step = temp_step;
}


void StepperMotor_Rotate(int num_steps){
	if(num_steps > 0){
    1124:	18 16       	cp	r1, r24
    1126:	19 06       	cpc	r1, r25
    1128:	1c f4       	brge	.+6      	; 0x1130 <StepperMotor_Rotate+0xc>
		StepperMotor_CCW(num_steps);
    112a:	0e 94 12 04 	call	0x824	; 0x824 <StepperMotor_CCW>
    112e:	08 95       	ret
	} else if (num_steps < 0) {
    1130:	99 23       	and	r25, r25
    1132:	2c f4       	brge	.+10     	; 0x113e <StepperMotor_Rotate+0x1a>
		StepperMotor_CW(-num_steps);
    1134:	91 95       	neg	r25
    1136:	81 95       	neg	r24
    1138:	91 09       	sbc	r25, r1
    113a:	0e 94 cf 04 	call	0x99e	; 0x99e <StepperMotor_CW>
    113e:	08 95       	ret

Disassembly of section .text.mTimer:

00000ebc <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 ebc:	e1 e8       	ldi	r30, 0x81	; 129
 ebe:	f0 e0       	ldi	r31, 0x00	; 0
 ec0:	20 81       	ld	r18, Z
 ec2:	2a 60       	ori	r18, 0x0A	; 10
 ec4:	20 83       	st	Z, r18
	OCR1A = 0x03E8; // Set output compare register for 1000 ticks which equals to 1ms
 ec6:	28 ee       	ldi	r18, 0xE8	; 232
 ec8:	33 e0       	ldi	r19, 0x03	; 3
 eca:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 ece:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
 ed2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 ed6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 eda:	26 b3       	in	r18, 0x16	; 22
 edc:	22 60       	ori	r18, 0x02	; 2
 ede:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 ee0:	20 e0       	ldi	r18, 0x00	; 0
 ee2:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 ee4:	07 c0       	rjmp	.+14     	; 0xef4 <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 ee6:	b1 9b       	sbis	0x16, 1	; 22
 ee8:	05 c0       	rjmp	.+10     	; 0xef4 <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 eea:	46 b3       	in	r20, 0x16	; 22
 eec:	42 60       	ori	r20, 0x02	; 2
 eee:	46 bb       	out	0x16, r20	; 22
			i++;
 ef0:	2f 5f       	subi	r18, 0xFF	; 255
 ef2:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000; // Sets initial value of timer counter to 0
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 ef4:	28 17       	cp	r18, r24
 ef6:	39 07       	cpc	r19, r25
 ef8:	b4 f3       	brlt	.-20     	; 0xee6 <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
}
 efa:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000102e <__divmodhi4>:
    102e:	97 fb       	bst	r25, 7
    1030:	07 2e       	mov	r0, r23
    1032:	16 f4       	brtc	.+4      	; 0x1038 <__divmodhi4+0xa>
    1034:	00 94       	com	r0
    1036:	07 d0       	rcall	.+14     	; 0x1046 <__divmodhi4_neg1>
    1038:	77 fd       	sbrc	r23, 7
    103a:	09 d0       	rcall	.+18     	; 0x104e <__divmodhi4_neg2>
    103c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__udivmodhi4>
    1040:	07 fc       	sbrc	r0, 7
    1042:	05 d0       	rcall	.+10     	; 0x104e <__divmodhi4_neg2>
    1044:	3e f4       	brtc	.+14     	; 0x1054 <__divmodhi4_exit>

00001046 <__divmodhi4_neg1>:
    1046:	90 95       	com	r25
    1048:	81 95       	neg	r24
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	08 95       	ret

0000104e <__divmodhi4_neg2>:
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255

00001054 <__divmodhi4_exit>:
    1054:	08 95       	ret

Disassembly of section .text.libgcc:

000011a0 <__xload_1>:
    11a0:	57 fd       	sbrc	r21, 7
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <__xload_1+0xa>
    11a4:	5b bf       	out	0x3b, r21	; 59
    11a6:	67 91       	elpm	r22, Z+
    11a8:	08 95       	ret
    11aa:	60 81       	ld	r22, Z
    11ac:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001056 <__udivmodhi4>:
    1056:	aa 1b       	sub	r26, r26
    1058:	bb 1b       	sub	r27, r27
    105a:	51 e1       	ldi	r21, 0x11	; 17
    105c:	07 c0       	rjmp	.+14     	; 0x106c <__udivmodhi4_ep>

0000105e <__udivmodhi4_loop>:
    105e:	aa 1f       	adc	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	a6 17       	cp	r26, r22
    1064:	b7 07       	cpc	r27, r23
    1066:	10 f0       	brcs	.+4      	; 0x106c <__udivmodhi4_ep>
    1068:	a6 1b       	sub	r26, r22
    106a:	b7 0b       	sbc	r27, r23

0000106c <__udivmodhi4_ep>:
    106c:	88 1f       	adc	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	5a 95       	dec	r21
    1072:	a9 f7       	brne	.-22     	; 0x105e <__udivmodhi4_loop>
    1074:	80 95       	com	r24
    1076:	90 95       	com	r25
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000011ee <_fini>:
    11ee:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000011f0 <__funcs_on_exit>:
    11f0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000011f2 <__simulator_exit>:
    11f2:	08 95       	ret

Disassembly of section .text.exit:

0000115a <exit>:
    115a:	ec 01       	movw	r28, r24
    115c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__funcs_on_exit>
    1160:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_fini>
    1164:	ce 01       	movw	r24, r28
    1166:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__simulator_exit>
    116a:	ce 01       	movw	r24, r28
    116c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <_Exit>

Disassembly of section .text.__simple_search_fl:

000005a6 <__simple_search_fl>:
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <__freelist>
 5b6:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <__freelist+0x1>
 5ba:	61 15       	cp	r22, r1
 5bc:	71 05       	cpc	r23, r1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <__simple_search_fl+0x1c>
 5c0:	5b c0       	rjmp	.+182    	; 0x678 <__simple_search_fl+0xd2>
 5c2:	fb 01       	movw	r30, r22
 5c4:	a0 e0       	ldi	r26, 0x00	; 0
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	c0 e0       	ldi	r28, 0x00	; 0
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	00 81       	ld	r16, Z
 5d2:	11 81       	ldd	r17, Z+1	; 0x01
 5d4:	22 81       	ldd	r18, Z+2	; 0x02
 5d6:	33 81       	ldd	r19, Z+3	; 0x03
 5d8:	08 17       	cp	r16, r24
 5da:	19 07       	cpc	r17, r25
 5dc:	71 f4       	brne	.+28     	; 0x5fa <__simple_search_fl+0x54>
 5de:	10 97       	sbiw	r26, 0x00	; 0
 5e0:	29 f0       	breq	.+10     	; 0x5ec <__simple_search_fl+0x46>
 5e2:	13 96       	adiw	r26, 0x03	; 3
 5e4:	3c 93       	st	X, r19
 5e6:	2e 93       	st	-X, r18
 5e8:	12 97       	sbiw	r26, 0x02	; 2
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <__simple_search_fl+0x4e>
 5ec:	30 93 5d 02 	sts	0x025D, r19	; 0x80025d <__freelist+0x1>
 5f0:	20 93 5c 02 	sts	0x025C, r18	; 0x80025c <__freelist>
 5f4:	cf 01       	movw	r24, r30
 5f6:	02 96       	adiw	r24, 0x02	; 2
 5f8:	41 c0       	rjmp	.+130    	; 0x67c <__simple_search_fl+0xd6>
 5fa:	80 17       	cp	r24, r16
 5fc:	91 07       	cpc	r25, r17
 5fe:	48 f4       	brcc	.+18     	; 0x612 <__simple_search_fl+0x6c>
 600:	20 97       	sbiw	r28, 0x00	; 0
 602:	29 f0       	breq	.+10     	; 0x60e <__simple_search_fl+0x68>
 604:	e8 80       	ld	r14, Y
 606:	f9 80       	ldd	r15, Y+1	; 0x01
 608:	0e 15       	cp	r16, r14
 60a:	1f 05       	cpc	r17, r15
 60c:	10 f4       	brcc	.+4      	; 0x612 <__simple_search_fl+0x6c>
 60e:	ad 01       	movw	r20, r26
 610:	ef 01       	movw	r28, r30
 612:	df 01       	movw	r26, r30
 614:	21 15       	cp	r18, r1
 616:	31 05       	cpc	r19, r1
 618:	11 f0       	breq	.+4      	; 0x61e <__simple_search_fl+0x78>
 61a:	f9 01       	movw	r30, r18
 61c:	d9 cf       	rjmp	.-78     	; 0x5d0 <__simple_search_fl+0x2a>
 61e:	20 97       	sbiw	r28, 0x00	; 0
 620:	59 f1       	breq	.+86     	; 0x678 <__simple_search_fl+0xd2>
 622:	0a 81       	ldd	r16, Y+2	; 0x02
 624:	1b 81       	ldd	r17, Y+3	; 0x03
 626:	fe 01       	movw	r30, r28
 628:	21 91       	ld	r18, Z+
 62a:	31 91       	ld	r19, Z+
 62c:	28 1b       	sub	r18, r24
 62e:	39 0b       	sbc	r19, r25
 630:	25 30       	cpi	r18, 0x05	; 5
 632:	31 05       	cpc	r19, r1
 634:	88 f0       	brcs	.+34     	; 0x658 <__simple_search_fl+0xb2>
 636:	99 83       	std	Y+1, r25	; 0x01
 638:	88 83       	st	Y, r24
 63a:	df 01       	movw	r26, r30
 63c:	a8 0f       	add	r26, r24
 63e:	b9 1f       	adc	r27, r25
 640:	22 50       	subi	r18, 0x02	; 2
 642:	31 09       	sbc	r19, r1
 644:	11 96       	adiw	r26, 0x01	; 1
 646:	3c 93       	st	X, r19
 648:	2e 93       	st	-X, r18
 64a:	12 96       	adiw	r26, 0x02	; 2
 64c:	0c 93       	st	X, r16
 64e:	12 97       	sbiw	r26, 0x02	; 2
 650:	13 96       	adiw	r26, 0x03	; 3
 652:	1c 93       	st	X, r17
 654:	13 97       	sbiw	r26, 0x03	; 3
 656:	8d 01       	movw	r16, r26
 658:	c6 17       	cp	r28, r22
 65a:	d7 07       	cpc	r29, r23
 65c:	29 f4       	brne	.+10     	; 0x668 <__simple_search_fl+0xc2>
 65e:	00 93 5c 02 	sts	0x025C, r16	; 0x80025c <__freelist>
 662:	10 93 5d 02 	sts	0x025D, r17	; 0x80025d <__freelist+0x1>
 666:	06 c0       	rjmp	.+12     	; 0x674 <__simple_search_fl+0xce>
 668:	da 01       	movw	r26, r20
 66a:	12 96       	adiw	r26, 0x02	; 2
 66c:	0c 93       	st	X, r16
 66e:	12 97       	sbiw	r26, 0x02	; 2
 670:	13 96       	adiw	r26, 0x03	; 3
 672:	1c 93       	st	X, r17
 674:	cf 01       	movw	r24, r30
 676:	02 c0       	rjmp	.+4      	; 0x67c <__simple_search_fl+0xd6>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	e6 e0       	ldi	r30, 0x06	; 6
 682:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00000bd6 <__simple_free>:
 bd6:	00 97       	sbiw	r24, 0x00	; 0
 bd8:	c9 f1       	breq	.+114    	; 0xc4c <__simple_free+0x76>
 bda:	fc 01       	movw	r30, r24
 bdc:	32 97       	sbiw	r30, 0x02	; 2
 bde:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <__freelist>
 be2:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <__freelist+0x1>
 be6:	10 97       	sbiw	r26, 0x00	; 0
 be8:	59 f1       	breq	.+86     	; 0xc40 <__simple_free+0x6a>
 bea:	40 81       	ld	r20, Z
 bec:	51 81       	ldd	r21, Z+1	; 0x01
 bee:	9c 01       	movw	r18, r24
 bf0:	24 0f       	add	r18, r20
 bf2:	35 1f       	adc	r19, r21
 bf4:	a2 17       	cp	r26, r18
 bf6:	b3 07       	cpc	r27, r19
 bf8:	79 f4       	brne	.+30     	; 0xc18 <__simple_free+0x42>
 bfa:	12 96       	adiw	r26, 0x02	; 2
 bfc:	8d 91       	ld	r24, X+
 bfe:	9c 91       	ld	r25, X
 c00:	13 97       	sbiw	r26, 0x03	; 3
 c02:	93 83       	std	Z+3, r25	; 0x03
 c04:	82 83       	std	Z+2, r24	; 0x02
 c06:	2d 91       	ld	r18, X+
 c08:	3c 91       	ld	r19, X
 c0a:	ca 01       	movw	r24, r20
 c0c:	82 0f       	add	r24, r18
 c0e:	93 1f       	adc	r25, r19
 c10:	02 96       	adiw	r24, 0x02	; 2
 c12:	91 83       	std	Z+1, r25	; 0x01
 c14:	80 83       	st	Z, r24
 c16:	16 c0       	rjmp	.+44     	; 0xc44 <__simple_free+0x6e>
 c18:	8d 91       	ld	r24, X+
 c1a:	9c 91       	ld	r25, X
 c1c:	11 97       	sbiw	r26, 0x01	; 1
 c1e:	9c 01       	movw	r18, r24
 c20:	2e 5f       	subi	r18, 0xFE	; 254
 c22:	3f 4f       	sbci	r19, 0xFF	; 255
 c24:	2a 0f       	add	r18, r26
 c26:	3b 1f       	adc	r19, r27
 c28:	e2 17       	cp	r30, r18
 c2a:	f3 07       	cpc	r31, r19
 c2c:	31 f4       	brne	.+12     	; 0xc3a <__simple_free+0x64>
 c2e:	84 0f       	add	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	02 96       	adiw	r24, 0x02	; 2
 c34:	8d 93       	st	X+, r24
 c36:	9c 93       	st	X, r25
 c38:	08 95       	ret
 c3a:	b3 83       	std	Z+3, r27	; 0x03
 c3c:	a2 83       	std	Z+2, r26	; 0x02
 c3e:	02 c0       	rjmp	.+4      	; 0xc44 <__simple_free+0x6e>
 c40:	13 82       	std	Z+3, r1	; 0x03
 c42:	12 82       	std	Z+2, r1	; 0x02
 c44:	f0 93 5d 02 	sts	0x025D, r31	; 0x80025d <__freelist+0x1>
 c48:	e0 93 5c 02 	sts	0x025C, r30	; 0x80025c <__freelist>
 c4c:	08 95       	ret

Disassembly of section .text.__simple_malloc:

00000686 <__simple_malloc>:
 686:	a2 e0       	ldi	r26, 0x02	; 2
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e9 e4       	ldi	r30, 0x49	; 73
 68c:	f3 e0       	ldi	r31, 0x03	; 3
 68e:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__prologue_saves__+0x14>
 692:	8c 01       	movw	r16, r24
 694:	8b ee       	ldi	r24, 0xEB	; 235
 696:	95 e0       	ldi	r25, 0x05	; 5
 698:	01 15       	cp	r16, r1
 69a:	11 05       	cpc	r17, r1
 69c:	09 f4       	brne	.+2      	; 0x6a0 <__simple_malloc+0x1a>
 69e:	55 c0       	rjmp	.+170    	; 0x74a <__simple_malloc+0xc4>
 6a0:	89 2b       	or	r24, r25
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <__simple_malloc+0x3c>
 6a4:	02 30       	cpi	r16, 0x02	; 2
 6a6:	11 05       	cpc	r17, r1
 6a8:	10 f4       	brcc	.+4      	; 0x6ae <__simple_malloc+0x28>
 6aa:	02 e0       	ldi	r16, 0x02	; 2
 6ac:	10 e0       	ldi	r17, 0x00	; 0
 6ae:	c8 01       	movw	r24, r16
 6b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__simple_search_fl>
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	09 f0       	breq	.+2      	; 0x6ba <__simple_malloc+0x34>
 6b8:	4f c0       	rjmp	.+158    	; 0x758 <__simple_malloc+0xd2>
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	e9 2e       	mov	r14, r25
 6be:	f1 2c       	mov	r15, r1
 6c0:	04 c0       	rjmp	.+8      	; 0x6ca <__simple_malloc+0x44>
 6c2:	8b ee       	ldi	r24, 0xEB	; 235
 6c4:	e8 2e       	mov	r14, r24
 6c6:	85 e0       	ldi	r24, 0x05	; 5
 6c8:	f8 2e       	mov	r15, r24
 6ca:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <end.1483>
 6ce:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <end.1483+0x1>
 6d2:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <cur.1482>
 6d6:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <cur.1482+0x1>
 6da:	82 1b       	sub	r24, r18
 6dc:	93 0b       	sbc	r25, r19
 6de:	67 01       	movw	r12, r14
 6e0:	c0 0e       	add	r12, r16
 6e2:	d1 1e       	adc	r13, r17
 6e4:	80 17       	cp	r24, r16
 6e6:	91 07       	cpc	r25, r17
 6e8:	f0 f4       	brcc	.+60     	; 0x726 <__simple_malloc+0xa0>
 6ea:	da 82       	std	Y+2, r13	; 0x02
 6ec:	c9 82       	std	Y+1, r12	; 0x01
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	0e 94 97 06 	call	0xd2e	; 0xd2e <__expand_heap>
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	19 f4       	brne	.+6      	; 0x700 <__simple_malloc+0x7a>
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	2c c0       	rjmp	.+88     	; 0x758 <__simple_malloc+0xd2>
 700:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <end.1483>
 704:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <end.1483+0x1>
 708:	82 17       	cp	r24, r18
 70a:	93 07       	cpc	r25, r19
 70c:	21 f0       	breq	.+8      	; 0x716 <__simple_malloc+0x90>
 70e:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <cur.1482+0x1>
 712:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <cur.1482>
 716:	29 81       	ldd	r18, Y+1	; 0x01
 718:	3a 81       	ldd	r19, Y+2	; 0x02
 71a:	82 0f       	add	r24, r18
 71c:	93 1f       	adc	r25, r19
 71e:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <end.1483+0x1>
 722:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <end.1483>
 726:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <cur.1482>
 72a:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <cur.1482+0x1>
 72e:	cf 01       	movw	r24, r30
 730:	e1 14       	cp	r14, r1
 732:	f1 04       	cpc	r15, r1
 734:	19 f0       	breq	.+6      	; 0x73c <__simple_malloc+0xb6>
 736:	02 96       	adiw	r24, 0x02	; 2
 738:	11 83       	std	Z+1, r17	; 0x01
 73a:	00 83       	st	Z, r16
 73c:	ce 0e       	add	r12, r30
 73e:	df 1e       	adc	r13, r31
 740:	d0 92 61 02 	sts	0x0261, r13	; 0x800261 <cur.1482+0x1>
 744:	c0 92 60 02 	sts	0x0260, r12	; 0x800260 <cur.1482>
 748:	07 c0       	rjmp	.+14     	; 0x758 <__simple_malloc+0xd2>
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	09 f0       	breq	.+2      	; 0x750 <__simple_malloc+0xca>
 74e:	ad cf       	rjmp	.-166    	; 0x6aa <__simple_malloc+0x24>
 750:	7c 01       	movw	r14, r24
 752:	01 e0       	ldi	r16, 0x01	; 1
 754:	10 e0       	ldi	r17, 0x00	; 0
 756:	b9 cf       	rjmp	.-142    	; 0x6ca <__simple_malloc+0x44>
 758:	22 96       	adiw	r28, 0x02	; 2
 75a:	e8 e0       	ldi	r30, 0x08	; 8
 75c:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

000011e8 <_Exit>:
    11e8:	0e 94 b1 00 	call	0x162	; 0x162 <_exit>

Disassembly of section .text.__expand_heap:

00000d2e <__expand_heap>:
 d2e:	fc 01       	movw	r30, r24
 d30:	40 81       	ld	r20, Z
 d32:	51 81       	ldd	r21, Z+1	; 0x01
 d34:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <__brkval>
 d38:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <__brkval+0x1>
 d3c:	89 2b       	or	r24, r25
 d3e:	41 f4       	brne	.+16     	; 0xd50 <__expand_heap+0x22>
 d40:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__malloc_heap_start>
 d44:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <__malloc_heap_start+0x1>
 d48:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <__brkval+0x1>
 d4c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <__brkval>
 d50:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__malloc_heap_end>
 d54:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <__malloc_heap_end+0x1>
 d58:	00 97       	sbiw	r24, 0x00	; 0
 d5a:	19 f4       	brne	.+6      	; 0xd62 <__expand_heap+0x34>
 d5c:	8d b7       	in	r24, 0x3d	; 61
 d5e:	9e b7       	in	r25, 0x3e	; 62
 d60:	80 97       	sbiw	r24, 0x20	; 32
 d62:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <__brkval>
 d66:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <__brkval+0x1>
 d6a:	28 17       	cp	r18, r24
 d6c:	39 07       	cpc	r19, r25
 d6e:	48 f0       	brcs	.+18     	; 0xd82 <__expand_heap+0x54>
 d70:	8c e0       	ldi	r24, 0x0C	; 12
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__errno_val+0x1>
 d78:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__errno_val>
 d7c:	80 e0       	ldi	r24, 0x00	; 0
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	08 95       	ret
 d82:	82 1b       	sub	r24, r18
 d84:	93 0b       	sbc	r25, r19
 d86:	84 17       	cp	r24, r20
 d88:	95 07       	cpc	r25, r21
 d8a:	90 f3       	brcs	.-28     	; 0xd70 <__expand_heap+0x42>
 d8c:	42 0f       	add	r20, r18
 d8e:	53 1f       	adc	r21, r19
 d90:	50 93 63 02 	sts	0x0263, r21	; 0x800263 <__brkval+0x1>
 d94:	40 93 62 02 	sts	0x0262, r20	; 0x800262 <__brkval>
 d98:	c9 01       	movw	r24, r18
 d9a:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000f38 <__prologue_saves__>:
 f38:	2f 92       	push	r2
 f3a:	3f 92       	push	r3
 f3c:	4f 92       	push	r4
 f3e:	5f 92       	push	r5
 f40:	6f 92       	push	r6
 f42:	7f 92       	push	r7
 f44:	8f 92       	push	r8
 f46:	9f 92       	push	r9
 f48:	af 92       	push	r10
 f4a:	bf 92       	push	r11
 f4c:	cf 92       	push	r12
 f4e:	df 92       	push	r13
 f50:	ef 92       	push	r14
 f52:	ff 92       	push	r15
 f54:	0f 93       	push	r16
 f56:	1f 93       	push	r17
 f58:	cf 93       	push	r28
 f5a:	df 93       	push	r29
 f5c:	cd b7       	in	r28, 0x3d	; 61
 f5e:	de b7       	in	r29, 0x3e	; 62
 f60:	ca 1b       	sub	r28, r26
 f62:	db 0b       	sbc	r29, r27
 f64:	0f b6       	in	r0, 0x3f	; 63
 f66:	f8 94       	cli
 f68:	de bf       	out	0x3e, r29	; 62
 f6a:	0f be       	out	0x3f, r0	; 63
 f6c:	cd bf       	out	0x3d, r28	; 61
 f6e:	19 94       	eijmp

Disassembly of section .text.libgcc.prologue:

00000f70 <__epilogue_restores__>:
 f70:	2a 88       	ldd	r2, Y+18	; 0x12
 f72:	39 88       	ldd	r3, Y+17	; 0x11
 f74:	48 88       	ldd	r4, Y+16	; 0x10
 f76:	5f 84       	ldd	r5, Y+15	; 0x0f
 f78:	6e 84       	ldd	r6, Y+14	; 0x0e
 f7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f80:	aa 84       	ldd	r10, Y+10	; 0x0a
 f82:	b9 84       	ldd	r11, Y+9	; 0x09
 f84:	c8 84       	ldd	r12, Y+8	; 0x08
 f86:	df 80       	ldd	r13, Y+7	; 0x07
 f88:	ee 80       	ldd	r14, Y+6	; 0x06
 f8a:	fd 80       	ldd	r15, Y+5	; 0x05
 f8c:	0c 81       	ldd	r16, Y+4	; 0x04
 f8e:	1b 81       	ldd	r17, Y+3	; 0x03
 f90:	aa 81       	ldd	r26, Y+2	; 0x02
 f92:	b9 81       	ldd	r27, Y+1	; 0x01
 f94:	ce 0f       	add	r28, r30
 f96:	d1 1d       	adc	r29, r1
 f98:	0f b6       	in	r0, 0x3f	; 63
 f9a:	f8 94       	cli
 f9c:	de bf       	out	0x3e, r29	; 62
 f9e:	0f be       	out	0x3f, r0	; 63
 fa0:	cd bf       	out	0x3d, r28	; 61
 fa2:	ed 01       	movw	r28, r26
 fa4:	08 95       	ret
