
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000013cf  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  000013cf  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e42  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b6  00000000  00000000  000054a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e0  00000000  00000000  0000675e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000524  00000000  00000000  00007b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109d  00000000  00000000  0000855a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000095f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000120a  0000120a  0000137e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000097d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_adc 0000001c  00001112  00001112  00001286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.start_conversion 0000000c  000011d4  000011d4  00001348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.disable_adc 0000000c  000011e0  000011e0  00001354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.enable_adc 0000000c  000011ec  000011ec  00001360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.disable_dc_motor 00000010  000011a8  000011a8  0000131c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.run_dc_motor 0000000a  000011f8  000011f8  0000136c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.brake_dc_motor 00000008  00001202  00001202  00001376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_dc_motor 0000001c  0000112e  0000112e  000012a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCDBusyLoop 0000007e  00000ba0  00000ba0  00000d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCDByte 00000070  00000d08  00000d08  00000e7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.InitLCD 00000088  00000a0c  00000a0c  00000b80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.LCDWriteString 00000030  00000f8a  00000f8a  000010fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LCDWriteInt 000000c4  0000074c  0000074c  000008c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.LCDGotoXY 00000012  00001196  00001196  0000130a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.setup   0000000e  000011b8  000011b8  0000132c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.initLink 0000001e  000010d6  000010d6  0000124a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.enqueue 0000003c  00000ee0  00000ee0  00001054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.dequeue 00000030  00000fba  00000fba  0000112e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.size    0000001a  00001166  00001166  000012da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.categorize 00000090  0000097c  0000097c  00000af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .progmemx.data 0000000b  00000172  00000172  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 36 .text.main    00000414  0000017e  0000017e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_default 00000002  00001212  00001212  00001386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__vector_29 00000088  00000a94  00000a94  00000c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_1 0000005e  00000de6  00000de6  00000f5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_2 00000028  00001014  00001014  00001188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__vector_5 00000084  00000b1c  00000b1c  00000c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_6 00000072  00000c96  00000c96  00000e0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_32 0000001e  000010f4  000010f4  00001268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .data.rotations 00000010  00800214  0000121a  0000138e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 45 .bss.black_counter 00000001  0080025f  0080025f  000013cf  2**0
                  ALLOC
 46 .bss.white_counter 00000001  00800260  00800260  000013cf  2**0
                  ALLOC
 47 .bss.steel_counter 00000001  00800261  00800261  000013cf  2**0
                  ALLOC
 48 .bss.aluminum_counter 00000001  00800262  00800262  000013cf  2**0
                  ALLOC
 49 .bss.BUCKET_counter 00000001  00800263  00800263  000013cf  2**0
                  ALLOC
 50 .bss.item_counter 00000001  00800264  00800264  000013cf  2**0
                  ALLOC
 51 .bss.ADC_counter 00000002  0080024f  0080024f  000013cf  2**0
                  ALLOC
 52 .bss.INT5_counter 00000001  00800265  00800265  000013cf  2**0
                  ALLOC
 53 .bss.INT4_counter 00000001  00800266  00800266  000013cf  2**0
                  ALLOC
 54 .bss.INT1_counter 00000001  00800267  00800267  000013cf  2**0
                  ALLOC
 55 .bss.INT0_counter 00000001  00800268  00800268  000013cf  2**0
                  ALLOC
 56 .bss.pause_flag 00000001  00800269  00800269  000013cf  2**0
                  ALLOC
 57 .bss.ramp_down_flag 00000001  0080026a  0080026a  000013cf  2**0
                  ALLOC
 58 .bss.in_OR_flag 00000001  0080026b  0080026b  000013cf  2**0
                  ALLOC
 59 .bss.STATE    00000001  0080026c  0080026c  000013cf  2**0
                  ALLOC
 60 .data.ADC_curr_min 00000002  00800251  00001255  000013c9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 61 .text.init_pwm 00000026  0000108c  0000108c  00001200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.init_sensors 00000024  000010b2  000010b2  00001226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.init_stepper_motor 0000005c  00000e44  00000e44  00000fb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.StepperMotor_CW 000000aa  000008d2  000008d2  00000a46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.StepperMotor_CCW 000000c2  00000810  00000810  00000984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.StepperMotor_Rotate 0000001c  0000114a  0000114a  000012be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .data.ind     00000010  00800224  0000122a  0000139e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 68 .data.decel_speed 00000009  00800242  00001248  000013bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 69 .data.accel_speed 0000000e  00800234  0000123a  000013ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 70 .data.steps   00000004  0080024b  00001251  000013c5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 71 .text.mTimer  00000040  00000ea0  00000ea0  00001014  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.intTimer 0000002a  00000fea  00000fea  0000115e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc.div 00000028  0000103c  0000103c  000011b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc  0000000e  000011c6  000011c6  0000133a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.libgcc.div 00000028  00001064  00001064  000011d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__dummy_fini 00000002  00001214  00001214  00001388  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__dummy_funcs_on_exit 00000002  00001216  00001216  0000138a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__dummy_simulator_exit 00000002  00001218  00001218  0000138c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.exit    00000016  00001180  00001180  000012f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__simple_search_fl 000000e0  00000592  00000592  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__simple_free 00000078  00000c1e  00000c1e  00000d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .bss.__freelist 00000002  00800253  00800253  000013cf  2**0
                  ALLOC
 83 .text.__simple_malloc 000000da  00000672  00000672  000007e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .bss.end.1483 00000002  00800255  00800255  000013cf  2**0
                  ALLOC
 85 .bss.cur.1482 00000002  00800257  00800257  000013cf  2**0
                  ALLOC
 86 .text._Exit   00000004  0000120e  0000120e  00001382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__expand_heap 0000006e  00000d78  00000d78  00000eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .bss.__brkval 00000002  00800259  00800259  000013cf  2**0
                  ALLOC
 89 .data.__malloc_heap_end 00000002  0080025b  00001257  000013cb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 90 .data.__malloc_heap_start 00000002  0080025d  00001259  000013cd  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 91 .text.libgcc.prologue 00000038  00000f1c  00000f1c  00001090  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.libgcc.prologue 00000036  00000f54  00000f54  000010c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
   4:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_1>
   8:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_2>
   c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  10:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  14:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_5>
  18:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__vector_6>
  1c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  20:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  24:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  28:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  2c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  30:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  34:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  38:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  3c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  40:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  44:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  48:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  4c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  50:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  54:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  58:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  5c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  60:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  64:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  68:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  6c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  70:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  74:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_29>
  78:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  7c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  80:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_32>
  84:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  88:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  8c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  90:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  94:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  98:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  9c:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  a0:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  a4:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  a8:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  ac:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  b0:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  b4:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  b8:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  bc:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  c0:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  c4:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  c8:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  cc:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  d0:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  d4:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  d8:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  dc:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>
  e0:	0c 94 05 09 	jmp	0x120a	; 0x120a <__bad_interrupt>

000000e4 <.dinit>:
  e4:	02 00       	.word	0x0002	; ????
  e6:	02 14       	cp	r0, r2
  e8:	80 02       	muls	r24, r16
  ea:	14 02       	muls	r17, r20
  ec:	4f 00       	.word	0x004f	; ????
  ee:	12 1a       	sub	r1, r18
  f0:	02 4f       	sbci	r16, 0xF2	; 242
  f2:	02 51       	subi	r16, 0x12	; 18
  f4:	80 02       	muls	r24, r16
  f6:	51 02       	muls	r21, r17
  f8:	53 00       	.word	0x0053	; ????
  fa:	12 55       	subi	r17, 0x52	; 82
  fc:	02 53       	subi	r16, 0x32	; 50
  fe:	02 5b       	subi	r16, 0xB2	; 178
 100:	80 02       	muls	r24, r16
 102:	5b 02       	muls	r21, r27
 104:	5f 00       	.word	0x005f	; ????
 106:	12 57       	subi	r17, 0x72	; 114
 108:	02 5f       	subi	r16, 0xF2	; 242
 10a:	02 6d       	ori	r16, 0xD2	; 210
 10c:	80 00       	.word	0x0080	; ????

0000010e <__trampolines_start>:
 10e:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__simple_malloc+0xc>
 112:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__simple_free>

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d1 e2       	ldi	r29, 0x21	; 33
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0c bf       	out	0x3c, r16	; 60

00000126 <__do_copy_data>:
 126:	e4 ee       	ldi	r30, 0xE4	; 228
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	19 c0       	rjmp	.+50     	; 0x160 <__do_clear_bss+0x8>
 12e:	b7 91       	elpm	r27, Z+
 130:	a7 91       	elpm	r26, Z+
 132:	37 91       	elpm	r19, Z+
 134:	27 91       	elpm	r18, Z+
 136:	07 91       	elpm	r16, Z+
 138:	07 fd       	sbrc	r16, 7
 13a:	0e c0       	rjmp	.+28     	; 0x158 <__do_clear_bss>
 13c:	97 91       	elpm	r25, Z+
 13e:	87 91       	elpm	r24, Z+
 140:	ef 01       	movw	r28, r30
 142:	f9 2f       	mov	r31, r25
 144:	e8 2f       	mov	r30, r24
 146:	0b bf       	out	0x3b, r16	; 59
 148:	07 90       	elpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a2 17       	cp	r26, r18
 14e:	b3 07       	cpc	r27, r19
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x22>
 152:	fe 01       	movw	r30, r28
 154:	1b be       	out	0x3b, r1	; 59
 156:	04 c0       	rjmp	.+8      	; 0x160 <__do_clear_bss+0x8>

00000158 <__do_clear_bss>:
 158:	1d 92       	st	X+, r1
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e1 f7       	brne	.-8      	; 0x158 <__do_clear_bss>
 160:	ed 30       	cpi	r30, 0x0D	; 13
 162:	f4 07       	cpc	r31, r20
 164:	21 f7       	brne	.-56     	; 0x12e <__do_copy_data+0x8>
 166:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
 16a:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <exit>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>

Disassembly of section .text:

0000120a <__bad_interrupt>:
    120a:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__vector_default>

Disassembly of section .text.init_adc:

00001112 <init_adc>:
void stop_conversion(){
	ADCSRA &= ~(_BV(ADSC));				// clear ADSC
}// end stop_adc

void free_running_adc(){
	ADCSRA |= _BV(ADATE);					// ADATE: ADC Auto Trigger Enable
    1112:	ea e7       	ldi	r30, 0x7A	; 122
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	80 83       	st	Z, r24
    111c:	80 81       	ld	r24, Z
    111e:	88 60       	ori	r24, 0x08	; 8
    1120:	80 83       	st	Z, r24
    1122:	ec e7       	ldi	r30, 0x7C	; 124
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 66       	ori	r24, 0x60	; 96
    112a:	80 83       	st	Z, r24
    112c:	08 95       	ret

Disassembly of section .text.start_conversion:

000011d4 <start_conversion>:
    11d4:	ea e7       	ldi	r30, 0x7A	; 122
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 64       	ori	r24, 0x40	; 64
    11dc:	80 83       	st	Z, r24
    11de:	08 95       	ret

Disassembly of section .text.disable_adc:

000011e0 <disable_adc>:
}

void disable_adc(){
	ADCSRA &= ~_BV(ADEN);
    11e0:	ea e7       	ldi	r30, 0x7A	; 122
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	80 83       	st	Z, r24
    11ea:	08 95       	ret

Disassembly of section .text.enable_adc:

000011ec <enable_adc>:
}

void enable_adc(){
	ADCSRA |= _BV(ADEN);
    11ec:	ea e7       	ldi	r30, 0x7A	; 122
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	80 68       	ori	r24, 0x80	; 128
    11f4:	80 83       	st	Z, r24
    11f6:	08 95       	ret

Disassembly of section .text.disable_dc_motor:

000011a8 <disable_dc_motor>:
	brake_dc_motor();
}

/* Disable DC Motor */
void disable_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_DISABLE;
    11a8:	85 b1       	in	r24, 0x05	; 5
    11aa:	80 7f       	andi	r24, 0xF0	; 240
    11ac:	85 b9       	out	0x05, r24	; 5
	mTimer(5);
    11ae:	85 e0       	ldi	r24, 0x05	; 5
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
    11b6:	08 95       	ret

Disassembly of section .text.run_dc_motor:

000011f8 <run_dc_motor>:
}

void run_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_FORWARD;
    11f8:	85 b1       	in	r24, 0x05	; 5
    11fa:	80 7f       	andi	r24, 0xF0	; 240
    11fc:	8b 60       	ori	r24, 0x0B	; 11
    11fe:	85 b9       	out	0x05, r24	; 5
    1200:	08 95       	ret

Disassembly of section .text.brake_dc_motor:

00001202 <brake_dc_motor>:
}

void brake_dc_motor(){
	DC_MOTOR_PORT = (DC_MOTOR_PORT & ~DC_MOTOR_MASK) | DC_BRAKE;
    1202:	85 b1       	in	r24, 0x05	; 5
    1204:	8f 60       	ori	r24, 0x0F	; 15
    1206:	85 b9       	out	0x05, r24	; 5
    1208:	08 95       	ret

Disassembly of section .text.init_dc_motor:

0000112e <init_dc_motor>:


/* Initialize DC motor */
void init_dc_motor(){
	// Enable switch button interrupt
	EIMSK |= (_BV(INT4) | _BV(INT5));
    112e:	8d b3       	in	r24, 0x1d	; 29
    1130:	80 63       	ori	r24, 0x30	; 48
    1132:	8d bb       	out	0x1d, r24	; 29
	EICRB |= (_BV(ISC41)| _BV(ISC51));		// falling edge trigger
    1134:	ea e6       	ldi	r30, 0x6A	; 106
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8a 60       	ori	r24, 0x0A	; 10
    113c:	80 83       	st	Z, r24

	DDRB |= (_BV(DDB0) | _BV(DDB1) | _BV(DDB2) | _BV(DDB3));	// set as output pins to control DC motor
    113e:	84 b1       	in	r24, 0x04	; 4
    1140:	8f 60       	ori	r24, 0x0F	; 15
    1142:	84 b9       	out	0x04, r24	; 4
	brake_dc_motor();
    1144:	0e 94 01 09 	call	0x1202	; 0x1202 <brake_dc_motor>
    1148:	08 95       	ret

Disassembly of section .text.LCDBusyLoop:

00000ba0 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 ba0:	87 b1       	in	r24, 0x07	; 7
 ba2:	80 7f       	andi	r24, 0xF0	; 240
 ba4:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 ba6:	88 b1       	in	r24, 0x08	; 8
 ba8:	80 62       	ori	r24, 0x20	; 32
 baa:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();		//Read status
 bac:	88 b1       	in	r24, 0x08	; 8
 bae:	8f 7b       	andi	r24, 0xBF	; 191
 bb0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bb2:	82 e0       	ldi	r24, 0x02	; 2
 bb4:	8a 95       	dec	r24
 bb6:	f1 f7       	brne	.-4      	; 0xbb4 <LCDBusyLoop+0x14>
 bb8:	00 c0       	rjmp	.+0      	; 0xbba <LCDBusyLoop+0x1a>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 bba:	88 b1       	in	r24, 0x08	; 8
 bbc:	80 68       	ori	r24, 0x80	; 128
 bbe:	88 b9       	out	0x08, r24	; 8
 bc0:	92 e0       	ldi	r25, 0x02	; 2
 bc2:	9a 95       	dec	r25
 bc4:	f1 f7       	brne	.-4      	; 0xbc2 <LCDBusyLoop+0x22>
 bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <LCDBusyLoop+0x28>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 bc8:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 bca:	82 95       	swap	r24
 bcc:	80 7f       	andi	r24, 0xF0	; 240
 bce:	92 e0       	ldi	r25, 0x02	; 2
 bd0:	9a 95       	dec	r25
 bd2:	f1 f7       	brne	.-4      	; 0xbd0 <LCDBusyLoop+0x30>
 bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <LCDBusyLoop+0x36>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 bd6:	98 b1       	in	r25, 0x08	; 8
 bd8:	9f 77       	andi	r25, 0x7F	; 127
 bda:	98 b9       	out	0x08, r25	; 8
 bdc:	95 e0       	ldi	r25, 0x05	; 5
 bde:	9a 95       	dec	r25
 be0:	f1 f7       	brne	.-4      	; 0xbde <LCDBusyLoop+0x3e>
 be2:	00 00       	nop
		_delay_us(1);	//tEL
		
		SET_E();
 be4:	98 b1       	in	r25, 0x08	; 8
 be6:	90 68       	ori	r25, 0x80	; 128
 be8:	98 b9       	out	0x08, r25	; 8
 bea:	92 e0       	ldi	r25, 0x02	; 2
 bec:	9a 95       	dec	r25
 bee:	f1 f7       	brne	.-4      	; 0xbec <LCDBusyLoop+0x4c>
 bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <LCDBusyLoop+0x52>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 bf2:	96 b1       	in	r25, 0x06	; 6
		temp&=0x0F;

		status=status|temp;

		busy=status & 0b10000000;
 bf4:	80 78       	andi	r24, 0x80	; 128
 bf6:	92 e0       	ldi	r25, 0x02	; 2
 bf8:	9a 95       	dec	r25
 bfa:	f1 f7       	brne	.-4      	; 0xbf8 <LCDBusyLoop+0x58>
 bfc:	00 c0       	rjmp	.+0      	; 0xbfe <LCDBusyLoop+0x5e>

		_delay_us(0.5);
		
		CLEAR_E();
 bfe:	98 b1       	in	r25, 0x08	; 8
 c00:	9f 77       	andi	r25, 0x7F	; 127
 c02:	98 b9       	out	0x08, r25	; 8
 c04:	95 e0       	ldi	r25, 0x05	; 5
 c06:	9a 95       	dec	r25
 c08:	f1 f7       	brne	.-4      	; 0xc06 <LCDBusyLoop+0x66>
 c0a:	00 00       	nop
		_delay_us(1);	//tEL
		
	}while(busy);
 c0c:	81 11       	cpse	r24, r1
 c0e:	d5 cf       	rjmp	.-86     	; 0xbba <LCDBusyLoop+0x1a>

	CLEAR_RW();		//write mode
 c10:	88 b1       	in	r24, 0x08	; 8
 c12:	8f 7d       	andi	r24, 0xDF	; 223
 c14:	88 b9       	out	0x08, r24	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 c16:	87 b1       	in	r24, 0x07	; 7
 c18:	8f 60       	ori	r24, 0x0F	; 15
 c1a:	87 b9       	out	0x07, r24	; 7
 c1c:	08 95       	ret

Disassembly of section .text.LCDByte:

00000d08 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 d08:	28 2f       	mov	r18, r24
 d0a:	22 95       	swap	r18
 d0c:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 d0e:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 d10:	61 11       	cpse	r22, r1
 d12:	04 c0       	rjmp	.+8      	; 0xd1c <LCDByte+0x14>
	CLEAR_RS();
 d14:	98 b1       	in	r25, 0x08	; 8
 d16:	9f 7b       	andi	r25, 0xBF	; 191
 d18:	98 b9       	out	0x08, r25	; 8
 d1a:	03 c0       	rjmp	.+6      	; 0xd22 <LCDByte+0x1a>
else
	SET_RS();
 d1c:	98 b1       	in	r25, 0x08	; 8
 d1e:	90 64       	ori	r25, 0x40	; 64
 d20:	98 b9       	out	0x08, r25	; 8
 d22:	92 e0       	ldi	r25, 0x02	; 2
 d24:	9a 95       	dec	r25
 d26:	f1 f7       	brne	.-4      	; 0xd24 <LCDByte+0x1c>
 d28:	00 c0       	rjmp	.+0      	; 0xd2a <LCDByte+0x22>

_delay_us(0.500);		//tAS


SET_E();
 d2a:	98 b1       	in	r25, 0x08	; 8
 d2c:	90 68       	ori	r25, 0x80	; 128
 d2e:	98 b9       	out	0x08, r25	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 d30:	98 b1       	in	r25, 0x08	; 8
 d32:	90 7f       	andi	r25, 0xF0	; 240
 d34:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 d36:	98 b9       	out	0x08, r25	; 8
 d38:	95 e0       	ldi	r25, 0x05	; 5
 d3a:	9a 95       	dec	r25
 d3c:	f1 f7       	brne	.-4      	; 0xd3a <LCDByte+0x32>
 d3e:	00 00       	nop
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 d40:	98 b1       	in	r25, 0x08	; 8
 d42:	9f 77       	andi	r25, 0x7F	; 127
 d44:	98 b9       	out	0x08, r25	; 8
 d46:	95 e0       	ldi	r25, 0x05	; 5
 d48:	9a 95       	dec	r25
 d4a:	f1 f7       	brne	.-4      	; 0xd48 <LCDByte+0x40>
 d4c:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
 d4e:	98 b1       	in	r25, 0x08	; 8
 d50:	90 68       	ori	r25, 0x80	; 128
 d52:	98 b9       	out	0x08, r25	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 d54:	98 b1       	in	r25, 0x08	; 8
 d56:	90 7f       	andi	r25, 0xF0	; 240
 d58:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 d5a:	88 b9       	out	0x08, r24	; 8
 d5c:	85 e0       	ldi	r24, 0x05	; 5
 d5e:	8a 95       	dec	r24
 d60:	f1 f7       	brne	.-4      	; 0xd5e <LCDByte+0x56>
 d62:	00 00       	nop
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 d64:	88 b1       	in	r24, 0x08	; 8
 d66:	8f 77       	andi	r24, 0x7F	; 127
 d68:	88 b9       	out	0x08, r24	; 8
 d6a:	95 e0       	ldi	r25, 0x05	; 5
 d6c:	9a 95       	dec	r25
 d6e:	f1 f7       	brne	.-4      	; 0xd6c <LCDByte+0x64>
 d70:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 d72:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCDBusyLoop>
 d76:	08 95       	ret

Disassembly of section .text.InitLCD:

00000a0c <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 a0c:	cf 93       	push	r28
 a0e:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a10:	2f ef       	ldi	r18, 0xFF	; 255
 a12:	86 e7       	ldi	r24, 0x76	; 118
 a14:	91 e0       	ldi	r25, 0x01	; 1
 a16:	21 50       	subi	r18, 0x01	; 1
 a18:	80 40       	sbci	r24, 0x00	; 0
 a1a:	90 40       	sbci	r25, 0x00	; 0
 a1c:	e1 f7       	brne	.-8      	; 0xa16 <InitLCD+0xa>
 a1e:	00 c0       	rjmp	.+0      	; 0xa20 <InitLCD+0x14>
 a20:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 a22:	87 b1       	in	r24, 0x07	; 7
 a24:	8f 60       	ori	r24, 0x0F	; 15
 a26:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 a28:	87 b1       	in	r24, 0x07	; 7
 a2a:	80 68       	ori	r24, 0x80	; 128
 a2c:	87 b9       	out	0x07, r24	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 a2e:	87 b1       	in	r24, 0x07	; 7
 a30:	80 64       	ori	r24, 0x40	; 64
 a32:	87 b9       	out	0x07, r24	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 a34:	87 b1       	in	r24, 0x07	; 7
 a36:	80 62       	ori	r24, 0x20	; 32
 a38:	87 b9       	out	0x07, r24	; 7

	LCD_DATA_PORT&=0XF0;
 a3a:	88 b1       	in	r24, 0x08	; 8
 a3c:	80 7f       	andi	r24, 0xF0	; 240
 a3e:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 a40:	88 b1       	in	r24, 0x08	; 8
 a42:	8f 77       	andi	r24, 0x7F	; 127
 a44:	88 b9       	out	0x08, r24	; 8
	CLEAR_RW();
 a46:	88 b1       	in	r24, 0x08	; 8
 a48:	8f 7d       	andi	r24, 0xDF	; 223
 a4a:	88 b9       	out	0x08, r24	; 8
	CLEAR_RS();
 a4c:	88 b1       	in	r24, 0x08	; 8
 a4e:	8f 7b       	andi	r24, 0xBF	; 191
 a50:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a52:	00 c0       	rjmp	.+0      	; 0xa54 <InitLCD+0x48>
 a54:	00 c0       	rjmp	.+0      	; 0xa56 <InitLCD+0x4a>
 a56:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 a58:	88 b1       	in	r24, 0x08	; 8
 a5a:	80 68       	ori	r24, 0x80	; 128
 a5c:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 a5e:	88 b1       	in	r24, 0x08	; 8
 a60:	82 60       	ori	r24, 0x02	; 2
 a62:	88 b9       	out	0x08, r24	; 8
 a64:	25 e0       	ldi	r18, 0x05	; 5
 a66:	2a 95       	dec	r18
 a68:	f1 f7       	brne	.-4      	; 0xa66 <InitLCD+0x5a>
 a6a:	00 00       	nop
	_delay_us(1);
	
	CLEAR_E();
 a6c:	88 b1       	in	r24, 0x08	; 8
 a6e:	8f 77       	andi	r24, 0x7F	; 127
 a70:	88 b9       	out	0x08, r24	; 8
 a72:	85 e0       	ldi	r24, 0x05	; 5
 a74:	8a 95       	dec	r24
 a76:	f1 f7       	brne	.-4      	; 0xa74 <InitLCD+0x68>
 a78:	00 00       	nop
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 a7a:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	8c 2f       	mov	r24, r28
 a82:	8c 60       	ori	r24, 0x0C	; 12
 a84:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 a88:	60 e0       	ldi	r22, 0x00	; 0
 a8a:	88 e2       	ldi	r24, 0x28	; 40
 a8c:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
}
 a90:	cf 91       	pop	r28
 a92:	08 95       	ret

Disassembly of section .text.LCDWriteString:

00000f8a <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 f8a:	cf 92       	push	r12
 f8c:	df 92       	push	r13
 f8e:	ef 92       	push	r14
 f90:	6b 01       	movw	r12, r22
 f92:	e8 2e       	mov	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 f94:	07 c0       	rjmp	.+14     	; 0xfa4 <LCDWriteString+0x1a>
 {
	LCDData(*msg);
 f96:	61 e0       	ldi	r22, 0x01	; 1
 f98:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
	msg++;
 f9c:	8f ef       	ldi	r24, 0xFF	; 255
 f9e:	c8 1a       	sub	r12, r24
 fa0:	d8 0a       	sbc	r13, r24
 fa2:	e8 0a       	sbc	r14, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 fa4:	f6 01       	movw	r30, r12
 fa6:	5e 2d       	mov	r21, r14
 fa8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__xload_1>
 fac:	86 2f       	mov	r24, r22
 fae:	61 11       	cpse	r22, r1
 fb0:	f2 cf       	rjmp	.-28     	; 0xf96 <LCDWriteString+0xc>
 {
	LCDData(*msg);
	msg++;
 }
}
 fb2:	ef 90       	pop	r14
 fb4:	df 90       	pop	r13
 fb6:	cf 90       	pop	r12
 fb8:	08 95       	ret

Disassembly of section .text.LCDWriteInt:

0000074c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 74c:	ef 92       	push	r14
 74e:	ff 92       	push	r15
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	00 d0       	rcall	.+0      	; 0x75a <LCDWriteInt+0xe>
 75a:	0f 92       	push	r0
 75c:	0f 92       	push	r0
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 764:	fe 01       	movw	r30, r28
 766:	31 96       	adiw	r30, 0x01	; 1
 768:	25 e0       	ldi	r18, 0x05	; 5
 76a:	df 01       	movw	r26, r30
 76c:	1d 92       	st	X+, r1
 76e:	2a 95       	dec	r18
 770:	e9 f7       	brne	.-6      	; 0x76c <LCDWriteInt+0x20>
	int i=4,j=0;
 772:	24 e0       	ldi	r18, 0x04	; 4
 774:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 776:	0f c0       	rjmp	.+30     	; 0x796 <LCDWriteInt+0x4a>
	{
	str[i]=val%10;
 778:	6a e0       	ldi	r22, 0x0A	; 10
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
 780:	e1 e0       	ldi	r30, 0x01	; 1
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	ec 0f       	add	r30, r28
 786:	fd 1f       	adc	r31, r29
 788:	e2 0f       	add	r30, r18
 78a:	f3 1f       	adc	r31, r19
 78c:	80 83       	st	Z, r24
	val=val/10;
 78e:	86 2f       	mov	r24, r22
 790:	97 2f       	mov	r25, r23
	i--;
 792:	21 50       	subi	r18, 0x01	; 1
 794:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 796:	00 97       	sbiw	r24, 0x00	; 0
 798:	79 f7       	brne	.-34     	; 0x778 <LCDWriteInt+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 79a:	bf ef       	ldi	r27, 0xFF	; 255
 79c:	eb 16       	cp	r14, r27
 79e:	fb 06       	cpc	r15, r27
 7a0:	81 f4       	brne	.+32     	; 0x7c2 <LCDWriteInt+0x76>
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <LCDWriteInt+0x5e>
		while(str[j]==0) j++;
 7a4:	0f 5f       	subi	r16, 0xFF	; 255
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <LCDWriteInt+0x62>
 7aa:	00 e0       	ldi	r16, 0x00	; 0
 7ac:	10 e0       	ldi	r17, 0x00	; 0
 7ae:	e1 e0       	ldi	r30, 0x01	; 1
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	ec 0f       	add	r30, r28
 7b4:	fd 1f       	adc	r31, r29
 7b6:	e0 0f       	add	r30, r16
 7b8:	f1 1f       	adc	r31, r17
 7ba:	20 81       	ld	r18, Z
 7bc:	22 23       	and	r18, r18
 7be:	91 f3       	breq	.-28     	; 0x7a4 <LCDWriteInt+0x58>
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 7c2:	05 e0       	ldi	r16, 0x05	; 5
 7c4:	10 e0       	ldi	r17, 0x00	; 0
 7c6:	0e 19       	sub	r16, r14
 7c8:	1f 09       	sbc	r17, r15

	if(val<0) LCDData('-');
 7ca:	99 23       	and	r25, r25
 7cc:	94 f4       	brge	.+36     	; 0x7f2 <LCDWriteInt+0xa6>
 7ce:	61 e0       	ldi	r22, 0x01	; 1
 7d0:	8d e2       	ldi	r24, 0x2D	; 45
 7d2:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
 7d6:	0d c0       	rjmp	.+26     	; 0x7f2 <LCDWriteInt+0xa6>
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 7d8:	e1 e0       	ldi	r30, 0x01	; 1
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	ec 0f       	add	r30, r28
 7de:	fd 1f       	adc	r31, r29
 7e0:	e0 0f       	add	r30, r16
 7e2:	f1 1f       	adc	r31, r17
 7e4:	80 81       	ld	r24, Z
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	80 5d       	subi	r24, 0xD0	; 208
 7ea:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 7ee:	0f 5f       	subi	r16, 0xFF	; 255
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	05 30       	cpi	r16, 0x05	; 5
 7f4:	11 05       	cpc	r17, r1
 7f6:	84 f3       	brlt	.-32     	; 0x7d8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	ff 90       	pop	r15
 80c:	ef 90       	pop	r14
 80e:	08 95       	ret

Disassembly of section .text.LCDGotoXY:

00001196 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
    1196:	88 32       	cpi	r24, 0x28	; 40
    1198:	30 f4       	brcc	.+12     	; 0x11a6 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
    119a:	61 11       	cpse	r22, r1
    119c:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
    11a6:	08 95       	ret

Disassembly of section .text.setup:

000011b8 <setup>:
* DESC: initializes the linked queue to 'NULL' status
* INPUT: the head and tail pointers by reference
*/

void setup(link **h,link **t){
	*h = NULL;		/* Point the head to NOTHING (NULL) */
    11b8:	fc 01       	movw	r30, r24
    11ba:	11 82       	std	Z+1, r1	; 0x01
    11bc:	10 82       	st	Z, r1
	*t = NULL;		/* Point the tail to NOTHING (NULL) */
    11be:	fb 01       	movw	r30, r22
    11c0:	11 82       	std	Z+1, r1	; 0x01
    11c2:	10 82       	st	Z, r1
    11c4:	08 95       	ret

Disassembly of section .text.initLink:

000010d6 <initLink>:
*/
/* Check to see if the queue is empty */
char isEmpty(link **h){
	/* ENTER YOUR CODE HERE */
	return(*h == NULL);
}/*isEmpty*/
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 39 03 	call	0x672	; 0x672 <__simple_malloc>
    10e4:	99 83       	std	Y+1, r25	; 0x01
    10e6:	88 83       	st	Y, r24
    10e8:	fc 01       	movw	r30, r24
    10ea:	12 82       	std	Z+2, r1	; 0x02
    10ec:	11 82       	std	Z+1, r1	; 0x01
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

Disassembly of section .text.enqueue:

00000ee0 <enqueue>:
 ee0:	db 01       	movw	r26, r22
 ee2:	ed 91       	ld	r30, X+
 ee4:	fc 91       	ld	r31, X
 ee6:	30 97       	sbiw	r30, 0x00	; 0
 ee8:	61 f0       	breq	.+24     	; 0xf02 <enqueue+0x22>
 eea:	da 01       	movw	r26, r20
 eec:	8d 91       	ld	r24, X+
 eee:	9c 91       	ld	r25, X
 ef0:	11 97       	sbiw	r26, 0x01	; 1
 ef2:	92 83       	std	Z+2, r25	; 0x02
 ef4:	81 83       	std	Z+1, r24	; 0x01
 ef6:	8d 91       	ld	r24, X+
 ef8:	9c 91       	ld	r25, X
 efa:	fb 01       	movw	r30, r22
 efc:	91 83       	std	Z+1, r25	; 0x01
 efe:	80 83       	st	Z, r24
 f00:	08 95       	ret
 f02:	da 01       	movw	r26, r20
 f04:	2d 91       	ld	r18, X+
 f06:	3c 91       	ld	r19, X
 f08:	11 97       	sbiw	r26, 0x01	; 1
 f0a:	fc 01       	movw	r30, r24
 f0c:	31 83       	std	Z+1, r19	; 0x01
 f0e:	20 83       	st	Z, r18
 f10:	8d 91       	ld	r24, X+
 f12:	9c 91       	ld	r25, X
 f14:	db 01       	movw	r26, r22
 f16:	8d 93       	st	X+, r24
 f18:	9c 93       	st	X, r25
 f1a:	08 95       	ret

Disassembly of section .text.dequeue:

00000fba <dequeue>:
 fba:	fc 01       	movw	r30, r24
 fbc:	80 81       	ld	r24, Z
 fbe:	91 81       	ldd	r25, Z+1	; 0x01
 fc0:	da 01       	movw	r26, r20
 fc2:	8d 93       	st	X+, r24
 fc4:	9c 93       	st	X, r25
 fc6:	a0 81       	ld	r26, Z
 fc8:	b1 81       	ldd	r27, Z+1	; 0x01
 fca:	10 97       	sbiw	r26, 0x00	; 0
 fcc:	31 f0       	breq	.+12     	; 0xfda <dequeue+0x20>
 fce:	11 96       	adiw	r26, 0x01	; 1
 fd0:	8d 91       	ld	r24, X+
 fd2:	9c 91       	ld	r25, X
 fd4:	12 97       	sbiw	r26, 0x02	; 2
 fd6:	91 83       	std	Z+1, r25	; 0x01
 fd8:	80 83       	st	Z, r24
 fda:	80 81       	ld	r24, Z
 fdc:	91 81       	ldd	r25, Z+1	; 0x01
 fde:	89 2b       	or	r24, r25
 fe0:	19 f4       	brne	.+6      	; 0xfe8 <dequeue+0x2e>
 fe2:	fb 01       	movw	r30, r22
 fe4:	11 82       	std	Z+1, r1	; 0x01
 fe6:	10 82       	st	Z, r1
 fe8:	08 95       	ret

Disassembly of section .text.size:

00001166 <size>:
	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;

	temp = *h;			/* point to the first item in the list */
    1166:	dc 01       	movw	r26, r24
    1168:	ed 91       	ld	r30, X+
    116a:	fc 91       	ld	r31, X
int size(link **h, link **t){

	link 	*temp;			/* will store the link while traversing the queue */
	int 	numElements;

	numElements = 0;
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
    1170:	04 c0       	rjmp	.+8      	; 0x117a <size+0x14>
		numElements++;
    1172:	01 96       	adiw	r24, 0x01	; 1
		temp = temp->next;
    1174:	01 80       	ldd	r0, Z+1	; 0x01
    1176:	f2 81       	ldd	r31, Z+2	; 0x02
    1178:	e0 2d       	mov	r30, r0

	numElements = 0;

	temp = *h;			/* point to the first item in the list */

	while(temp != NULL){
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	d1 f7       	brne	.-12     	; 0x1172 <size+0xc>
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
    117e:	08 95       	ret

Disassembly of section .text.categorize:

0000097c <categorize>:
	in_OR_flag = 0;
	LCDWriteIntXY(0,0,ADC_min_min,4);
	LCDWriteIntXY(5,0,ADC_max_min,4);
	LCDWriteIntXY(10,0,ADC_curr_min,4);
	LCDWriteIntXY(10,1,INT0_counter,2);
	ADC_curr_min = 1023;
 97c:	8c e0       	ldi	r24, 0x0C	; 12
 97e:	92 e0       	ldi	r25, 0x02	; 2
 980:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <initLink>
 984:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 988:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 98c:	82 38       	cpi	r24, 0x82	; 130
 98e:	93 40       	sbci	r25, 0x03	; 3
 990:	30 f0       	brcs	.+12     	; 0x99e <categorize+0x22>
 992:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 996:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 99a:	10 82       	st	Z, r1
 99c:	22 c0       	rjmp	.+68     	; 0x9e2 <categorize+0x66>
 99e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 9a2:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 9a6:	8c 3b       	cpi	r24, 0xBC	; 188
 9a8:	92 40       	sbci	r25, 0x02	; 2
 9aa:	38 f0       	brcs	.+14     	; 0x9ba <categorize+0x3e>
 9ac:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 9b0:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	80 83       	st	Z, r24
 9b8:	14 c0       	rjmp	.+40     	; 0x9e2 <categorize+0x66>
 9ba:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 9be:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 9c2:	84 36       	cpi	r24, 0x64	; 100
 9c4:	91 05       	cpc	r25, r1
 9c6:	38 f0       	brcs	.+14     	; 0x9d6 <categorize+0x5a>
 9c8:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 9cc:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	80 83       	st	Z, r24
 9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <categorize+0x66>
 9d6:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <newLink>
 9da:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <newLink+0x1>
 9de:	83 e0       	ldi	r24, 0x03	; 3
 9e0:	80 83       	st	Z, r24
 9e2:	4c e0       	ldi	r20, 0x0C	; 12
 9e4:	52 e0       	ldi	r21, 0x02	; 2
 9e6:	66 e0       	ldi	r22, 0x06	; 6
 9e8:	72 e0       	ldi	r23, 0x02	; 2
 9ea:	88 e0       	ldi	r24, 0x08	; 8
 9ec:	92 e0       	ldi	r25, 0x02	; 2
 9ee:	0e 94 70 07 	call	0xee0	; 0xee0 <enqueue>
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	93 e0       	ldi	r25, 0x03	; 3
 9f6:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <ADC_curr_min+0x1>
 9fa:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ADC_curr_min>
 9fe:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <ADC_counter+0x1>
 a02:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <ADC_counter>
 a06:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <in_OR_flag>
 a0a:	08 95       	ret

Disassembly of section .text.main:

0000017e <main>:
 17e:	e1 e6       	ldi	r30, 0x61	; 97
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	80 83       	st	Z, r24
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 83       	st	Z, r24
 18a:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <STATE>
 18e:	f8 94       	cli
 190:	80 ef       	ldi	r24, 0xF0	; 240
 192:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 06 05 	call	0xa0c	; 0xa0c <InitLCD>
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 84 06 	call	0xd08	; 0xd08 <LCDByte>
 1a4:	0e 94 59 08 	call	0x10b2	; 0x10b2 <init_sensors>
 1a8:	0e 94 89 08 	call	0x1112	; 0x1112 <init_adc>
 1ac:	8d e7       	ldi	r24, 0x7D	; 125
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 46 08 	call	0x108c	; 0x108c <init_pwm>
 1b4:	0e 94 97 08 	call	0x112e	; 0x112e <init_dc_motor>
 1b8:	0e 94 22 07 	call	0xe44	; 0xe44 <init_stepper_motor>
 1bc:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <current_plate>
 1c0:	66 e0       	ldi	r22, 0x06	; 6
 1c2:	72 e0       	ldi	r23, 0x02	; 2
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	92 e0       	ldi	r25, 0x02	; 2
 1c8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <setup>
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 1d4:	62 e7       	ldi	r22, 0x72	; 114
 1d6:	71 e0       	ldi	r23, 0x01	; 1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 c5 07 	call	0xf8a	; 0xf8a <LCDWriteString>
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 1e6:	64 e7       	ldi	r22, 0x74	; 116
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 c5 07 	call	0xf8a	; 0xf8a <LCDWriteString>
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 1f8:	66 e7       	ldi	r22, 0x76	; 118
 1fa:	71 e0       	ldi	r23, 0x01	; 1
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 c5 07 	call	0xf8a	; 0xf8a <LCDWriteString>
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	89 e0       	ldi	r24, 0x09	; 9
 206:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 20a:	68 e7       	ldi	r22, 0x78	; 120
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 c5 07 	call	0xf8a	; 0xf8a <LCDWriteString>
 214:	78 94       	sei
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 21c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pause_flag>
 220:	81 11       	cpse	r24, r1
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0xaa>
 224:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <run_dc_motor>
 228:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <in_OR_flag>
 22c:	88 23       	and	r24, r24
 22e:	29 f0       	breq	.+10     	; 0x23a <main+0xbc>
 230:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <start_conversion>
 234:	1c 9b       	sbis	0x03, 4	; 3
 236:	0e 94 be 04 	call	0x97c	; 0x97c <categorize>
 23a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <item_counter>
 23e:	80 33       	cpi	r24, 0x30	; 48
 240:	39 f4       	brne	.+14     	; 0x250 <main+0xd2>
 242:	88 ec       	ldi	r24, 0xC8	; 200
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
 250:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <ramp_down_flag>
 254:	88 23       	and	r24, r24
 256:	59 f0       	breq	.+22     	; 0x26e <main+0xf0>
 258:	66 e0       	ldi	r22, 0x06	; 6
 25a:	72 e0       	ldi	r23, 0x02	; 2
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	0e 94 b3 08 	call	0x1166	; 0x1166 <size>
 264:	89 2b       	or	r24, r25
 266:	19 f4       	brne	.+6      	; 0x26e <main+0xf0>
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
 26e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <STATE>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	09 f4       	brne	.+2      	; 0x278 <main+0xfa>
 276:	e6 c0       	rjmp	.+460    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 278:	18 f4       	brcc	.+6      	; 0x280 <main+0x102>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	41 f0       	breq	.+16     	; 0x28e <main+0x110>
 27e:	cb cf       	rjmp	.-106    	; 0x216 <main+0x98>
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	09 f4       	brne	.+2      	; 0x286 <main+0x108>
 284:	31 c1       	rjmp	.+610    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 286:	85 30       	cpi	r24, 0x05	; 5
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x10e>
 28a:	79 c1       	rjmp	.+754    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 28c:	c4 cf       	rjmp	.-120    	; 0x216 <main+0x98>
 28e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <STATE>
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 298:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <BUCKET_counter>
 29c:	8f 5f       	subi	r24, 0xFF	; 255
 29e:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <BUCKET_counter>
 2a2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <in_OR_flag>
 2a6:	88 23       	and	r24, r24
 2a8:	29 f0       	breq	.+10     	; 0x2b4 <main+0x136>
 2aa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <start_conversion>
 2ae:	1c 9b       	sbis	0x03, 4	; 3
 2b0:	0e 94 be 04 	call	0x97c	; 0x97c <categorize>
 2b4:	0e 94 01 09 	call	0x1202	; 0x1202 <brake_dc_motor>
 2b8:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <head>
 2bc:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <head+0x1>
 2c0:	80 81       	ld	r24, Z
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	f1 f0       	breq	.+60     	; 0x302 <main+0x184>
 2c6:	08 f4       	brcc	.+2      	; 0x2ca <main+0x14c>
 2c8:	4a c0       	rjmp	.+148    	; 0x35e <main+0x1e0>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	89 f1       	breq	.+98     	; 0x330 <main+0x1b2>
 2ce:	83 30       	cpi	r24, 0x03	; 3
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <main+0x156>
 2d2:	5a c0       	rjmp	.+180    	; 0x388 <main+0x20a>
 2d4:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	e8 9f       	mul	r30, r24
 2dc:	f0 01       	movw	r30, r0
 2de:	11 24       	eor	r1, r1
 2e0:	ec 5e       	subi	r30, 0xEC	; 236
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	83 81       	ldd	r24, Z+3	; 0x03
 2e6:	08 2e       	mov	r0, r24
 2e8:	00 0c       	add	r0, r0
 2ea:	99 0b       	sbc	r25, r25
 2ec:	0e 94 a5 08 	call	0x114a	; 0x114a <StepperMotor_Rotate>
 2f0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <aluminum_counter>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <aluminum_counter>
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
 300:	43 c0       	rjmp	.+134    	; 0x388 <main+0x20a>
 302:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 306:	84 e0       	ldi	r24, 0x04	; 4
 308:	e8 9f       	mul	r30, r24
 30a:	f0 01       	movw	r30, r0
 30c:	11 24       	eor	r1, r1
 30e:	ec 5e       	subi	r30, 0xEC	; 236
 310:	fd 4f       	sbci	r31, 0xFD	; 253
 312:	81 81       	ldd	r24, Z+1	; 0x01
 314:	08 2e       	mov	r0, r24
 316:	00 0c       	add	r0, r0
 318:	99 0b       	sbc	r25, r25
 31a:	0e 94 a5 08 	call	0x114a	; 0x114a <StepperMotor_Rotate>
 31e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <steel_counter>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <steel_counter>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
 32e:	2c c0       	rjmp	.+88     	; 0x388 <main+0x20a>
 330:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	e8 9f       	mul	r30, r24
 338:	f0 01       	movw	r30, r0
 33a:	11 24       	eor	r1, r1
 33c:	ec 5e       	subi	r30, 0xEC	; 236
 33e:	fd 4f       	sbci	r31, 0xFD	; 253
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	08 2e       	mov	r0, r24
 344:	00 0c       	add	r0, r0
 346:	99 0b       	sbc	r25, r25
 348:	0e 94 a5 08 	call	0x114a	; 0x114a <StepperMotor_Rotate>
 34c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <white_counter>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <white_counter>
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <current_plate>
 35c:	15 c0       	rjmp	.+42     	; 0x388 <main+0x20a>
 35e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <current_plate>
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	e8 9f       	mul	r30, r24
 366:	f0 01       	movw	r30, r0
 368:	11 24       	eor	r1, r1
 36a:	ec 5e       	subi	r30, 0xEC	; 236
 36c:	fd 4f       	sbci	r31, 0xFD	; 253
 36e:	80 81       	ld	r24, Z
 370:	08 2e       	mov	r0, r24
 372:	00 0c       	add	r0, r0
 374:	99 0b       	sbc	r25, r25
 376:	0e 94 a5 08 	call	0x114a	; 0x114a <StepperMotor_Rotate>
 37a:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <black_counter>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <black_counter>
 384:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <current_plate>
 388:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <run_dc_motor>
 38c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <in_OR_flag>
 390:	88 23       	and	r24, r24
 392:	29 f0       	breq	.+10     	; 0x39e <main+0x220>
 394:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <start_conversion>
 398:	1c 9b       	sbis	0x03, 4	; 3
 39a:	0e 94 be 04 	call	0x97c	; 0x97c <categorize>
 39e:	43 e0       	ldi	r20, 0x03	; 3
 3a0:	52 e0       	ldi	r21, 0x02	; 2
 3a2:	66 e0       	ldi	r22, 0x06	; 6
 3a4:	72 e0       	ldi	r23, 0x02	; 2
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	0e 94 dd 07 	call	0xfba	; 0xfba <dequeue>
 3ae:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rtnLink>
 3b2:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rtnLink+0x1>
 3b6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__simple_free>
 3ba:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <item_counter>
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <item_counter>
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 3cc:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <aluminum_counter>
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 3e2:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <steel_counter>
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 3f8:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <white_counter>
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	89 e0       	ldi	r24, 0x09	; 9
 40a:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 40e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <black_counter>
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 41c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <INT4_counter>
 420:	88 23       	and	r24, r24
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	f8 ce       	rjmp	.-528    	; 0x216 <main+0x98>
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	8e e0       	ldi	r24, 0x0E	; 14
 42a:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 42e:	66 e0       	ldi	r22, 0x06	; 6
 430:	72 e0       	ldi	r23, 0x02	; 2
 432:	88 e0       	ldi	r24, 0x08	; 8
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	0e 94 b3 08 	call	0x1166	; 0x1166 <size>
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 442:	e9 ce       	rjmp	.-558    	; 0x216 <main+0x98>
 444:	80 eb       	ldi	r24, 0xB0	; 176
 446:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 44a:	88 ec       	ldi	r24, 0xC8	; 200
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 452:	0e 94 01 09 	call	0x1202	; 0x1202 <brake_dc_motor>
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 45e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <aluminum_counter>
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 474:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <steel_counter>
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 48a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <white_counter>
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	89 e0       	ldi	r24, 0x09	; 9
 49c:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 4a0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <black_counter>
 4a4:	62 e0       	ldi	r22, 0x02	; 2
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 4ae:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <aluminum_counter>
 4b2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <steel_counter>
 4b6:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <white_counter>
 4ba:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <black_counter>
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	93 e0       	ldi	r25, 0x03	; 3
 4c2:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <ADC_curr_min+0x1>
 4c6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ADC_curr_min>
 4ca:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <ADC_counter+0x1>
 4ce:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <ADC_counter>
 4d2:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <INT0_counter>
 4d6:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <INT1_counter>
 4da:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <INT4_counter>
 4de:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <INT5_counter>
 4e2:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <ramp_down_flag>
 4e6:	4b c0       	rjmp	.+150    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 4e8:	80 ec       	ldi	r24, 0xC0	; 192
 4ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
 4ee:	0e 94 01 09 	call	0x1202	; 0x1202 <brake_dc_motor>
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 4fa:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <aluminum_counter>
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 510:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <steel_counter>
 514:	62 e0       	ldi	r22, 0x02	; 2
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	86 e0       	ldi	r24, 0x06	; 6
 522:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 526:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <white_counter>
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	89 e0       	ldi	r24, 0x09	; 9
 538:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 53c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <black_counter>
 540:	62 e0       	ldi	r22, 0x02	; 2
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	8e e0       	ldi	r24, 0x0E	; 14
 54e:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 552:	6a e7       	ldi	r22, 0x7A	; 122
 554:	71 e0       	ldi	r23, 0x01	; 1
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0e 94 c5 07 	call	0xf8a	; 0xf8a <LCDWriteString>
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	8e e0       	ldi	r24, 0x0E	; 14
 560:	0e 94 cb 08 	call	0x1196	; 0x1196 <LCDGotoXY>
 564:	66 e0       	ldi	r22, 0x06	; 6
 566:	72 e0       	ldi	r23, 0x02	; 2
 568:	88 e0       	ldi	r24, 0x08	; 8
 56a:	92 e0       	ldi	r25, 0x02	; 2
 56c:	0e 94 b3 08 	call	0x1166	; 0x1166 <size>
 570:	62 e0       	ldi	r22, 0x02	; 2
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	0e 94 a6 03 	call	0x74c	; 0x74c <LCDWriteInt>
 578:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <STATE>
 57c:	4c ce       	rjmp	.-872    	; 0x216 <main+0x98>
 57e:	0e 94 01 09 	call	0x1202	; 0x1202 <brake_dc_motor>
 582:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <disable_adc>
 586:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <disable_dc_motor>
 58a:	f8 94       	cli
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	08 95       	ret

Disassembly of section .text.__vector_default:

00001212 <__vector_default>:
}

/* Interrupt Service Routine*/
EMPTY_INTERRUPT(BADISR_vect);
    1212:	18 95       	reti

Disassembly of section .text.__vector_29:

00000a94 <__vector_29>:
	in_OR_flag = 0;
	LCDWriteIntXY(0,0,ADC_min_min,4);
	LCDWriteIntXY(5,0,ADC_max_min,4);
	LCDWriteIntXY(10,0,ADC_curr_min,4);
	LCDWriteIntXY(10,1,INT0_counter,2);
	ADC_curr_min = 1023;
 a94:	1f 92       	push	r1
 a96:	0f 92       	push	r0
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	0f 92       	push	r0
 a9c:	11 24       	eor	r1, r1
 a9e:	2f 93       	push	r18
 aa0:	3f 93       	push	r19
 aa2:	8f 93       	push	r24
 aa4:	9f 93       	push	r25
 aa6:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 aaa:	22 95       	swap	r18
 aac:	26 95       	lsr	r18
 aae:	26 95       	lsr	r18
 ab0:	23 70       	andi	r18, 0x03	; 3
 ab2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	88 0f       	add	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	82 0f       	add	r24, r18
 ac2:	91 1d       	adc	r25, r1
 ac4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <ADC_result+0x1>
 ac8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ADC_result>
 acc:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <ADC_result>
 ad0:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <ADC_result+0x1>
 ad4:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ADC_curr_min>
 ad8:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <ADC_curr_min+0x1>
 adc:	28 17       	cp	r18, r24
 ade:	39 07       	cpc	r19, r25
 ae0:	40 f4       	brcc	.+16     	; 0xaf2 <__vector_29+0x5e>
 ae2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <ADC_result>
 ae6:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <ADC_result+0x1>
 aea:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <ADC_curr_min+0x1>
 aee:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ADC_curr_min>
 af2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <ADC_counter>
 af6:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <ADC_counter+0x1>
 afa:	01 96       	adiw	r24, 0x01	; 1
 afc:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <ADC_counter+0x1>
 b00:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <ADC_counter>
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <in_OR_flag>
 b0a:	9f 91       	pop	r25
 b0c:	8f 91       	pop	r24
 b0e:	3f 91       	pop	r19
 b10:	2f 91       	pop	r18
 b12:	0f 90       	pop	r0
 b14:	0f be       	out	0x3f, r0	; 63
 b16:	0f 90       	pop	r0
 b18:	1f 90       	pop	r1
 b1a:	18 95       	reti

Disassembly of section .text.__vector_1:

00000de6 <__vector_1>:
 de6:	1f 92       	push	r1
 de8:	0f 92       	push	r0
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	0f 92       	push	r0
 dee:	11 24       	eor	r1, r1
 df0:	0b b6       	in	r0, 0x3b	; 59
 df2:	0f 92       	push	r0
 df4:	2f 93       	push	r18
 df6:	3f 93       	push	r19
 df8:	4f 93       	push	r20
 dfa:	5f 93       	push	r21
 dfc:	6f 93       	push	r22
 dfe:	7f 93       	push	r23
 e00:	8f 93       	push	r24
 e02:	9f 93       	push	r25
 e04:	af 93       	push	r26
 e06:	bf 93       	push	r27
 e08:	ef 93       	push	r30
 e0a:	ff 93       	push	r31
 e0c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <enable_adc>
 e10:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <start_conversion>
 e14:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <INT0_counter>
 e18:	8f 5f       	subi	r24, 0xFF	; 255
 e1a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <INT0_counter>
 e1e:	ff 91       	pop	r31
 e20:	ef 91       	pop	r30
 e22:	bf 91       	pop	r27
 e24:	af 91       	pop	r26
 e26:	9f 91       	pop	r25
 e28:	8f 91       	pop	r24
 e2a:	7f 91       	pop	r23
 e2c:	6f 91       	pop	r22
 e2e:	5f 91       	pop	r21
 e30:	4f 91       	pop	r20
 e32:	3f 91       	pop	r19
 e34:	2f 91       	pop	r18
 e36:	0f 90       	pop	r0
 e38:	0b be       	out	0x3b, r0	; 59
 e3a:	0f 90       	pop	r0
 e3c:	0f be       	out	0x3f, r0	; 63
 e3e:	0f 90       	pop	r0
 e40:	1f 90       	pop	r1
 e42:	18 95       	reti

Disassembly of section .text.__vector_2:

00001014 <__vector_2>:
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	8f 93       	push	r24
    1020:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <INT1_counter>
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <INT1_counter>
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
    1030:	8f 91       	pop	r24
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

Disassembly of section .text.__vector_5:

00000b1c <__vector_5>:
 b1c:	1f 92       	push	r1
 b1e:	0f 92       	push	r0
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	0f 92       	push	r0
 b24:	11 24       	eor	r1, r1
 b26:	0b b6       	in	r0, 0x3b	; 59
 b28:	0f 92       	push	r0
 b2a:	2f 93       	push	r18
 b2c:	3f 93       	push	r19
 b2e:	4f 93       	push	r20
 b30:	5f 93       	push	r21
 b32:	6f 93       	push	r22
 b34:	7f 93       	push	r23
 b36:	8f 93       	push	r24
 b38:	9f 93       	push	r25
 b3a:	af 93       	push	r26
 b3c:	bf 93       	push	r27
 b3e:	ef 93       	push	r30
 b40:	ff 93       	push	r31
 b42:	84 e1       	ldi	r24, 0x14	; 20
 b44:	90 e0       	ldi	r25, 0x00	; 0
 b46:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 b4a:	64 99       	sbic	0x0c, 4	; 12
 b4c:	16 c0       	rjmp	.+44     	; 0xb7a <__vector_5+0x5e>
 b4e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <INT4_counter>
 b52:	8f 5f       	subi	r24, 0xFF	; 255
 b54:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <INT4_counter>
 b58:	80 ff       	sbrs	r24, 0
 b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__vector_5+0x48>
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pause_flag>
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <__vector_5+0x4c>
 b64:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pause_flag>
 b68:	84 e0       	ldi	r24, 0x04	; 4
 b6a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <STATE>
 b6e:	64 9b       	sbis	0x0c, 4	; 12
 b70:	fe cf       	rjmp	.-4      	; 0xb6e <__vector_5+0x52>
 b72:	84 e1       	ldi	r24, 0x14	; 20
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 b7a:	ff 91       	pop	r31
 b7c:	ef 91       	pop	r30
 b7e:	bf 91       	pop	r27
 b80:	af 91       	pop	r26
 b82:	9f 91       	pop	r25
 b84:	8f 91       	pop	r24
 b86:	7f 91       	pop	r23
 b88:	6f 91       	pop	r22
 b8a:	5f 91       	pop	r21
 b8c:	4f 91       	pop	r20
 b8e:	3f 91       	pop	r19
 b90:	2f 91       	pop	r18
 b92:	0f 90       	pop	r0
 b94:	0b be       	out	0x3b, r0	; 59
 b96:	0f 90       	pop	r0
 b98:	0f be       	out	0x3f, r0	; 63
 b9a:	0f 90       	pop	r0
 b9c:	1f 90       	pop	r1
 b9e:	18 95       	reti

Disassembly of section .text.__vector_6:

00000c96 <__vector_6>:
 c96:	1f 92       	push	r1
 c98:	0f 92       	push	r0
 c9a:	0f b6       	in	r0, 0x3f	; 63
 c9c:	0f 92       	push	r0
 c9e:	11 24       	eor	r1, r1
 ca0:	0b b6       	in	r0, 0x3b	; 59
 ca2:	0f 92       	push	r0
 ca4:	2f 93       	push	r18
 ca6:	3f 93       	push	r19
 ca8:	4f 93       	push	r20
 caa:	5f 93       	push	r21
 cac:	6f 93       	push	r22
 cae:	7f 93       	push	r23
 cb0:	8f 93       	push	r24
 cb2:	9f 93       	push	r25
 cb4:	af 93       	push	r26
 cb6:	bf 93       	push	r27
 cb8:	ef 93       	push	r30
 cba:	ff 93       	push	r31
 cbc:	84 e1       	ldi	r24, 0x14	; 20
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 cc4:	65 99       	sbic	0x0c, 5	; 12
 cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__vector_6+0x4c>
 cc8:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <INT5_counter>
 ccc:	8f 5f       	subi	r24, 0xFF	; 255
 cce:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <INT5_counter>
 cd2:	65 9b       	sbis	0x0c, 5	; 12
 cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <__vector_6+0x3c>
 cd6:	84 e1       	ldi	r24, 0x14	; 20
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 cde:	0e 94 f5 07 	call	0xfea	; 0xfea <intTimer>
 ce2:	ff 91       	pop	r31
 ce4:	ef 91       	pop	r30
 ce6:	bf 91       	pop	r27
 ce8:	af 91       	pop	r26
 cea:	9f 91       	pop	r25
 cec:	8f 91       	pop	r24
 cee:	7f 91       	pop	r23
 cf0:	6f 91       	pop	r22
 cf2:	5f 91       	pop	r21
 cf4:	4f 91       	pop	r20
 cf6:	3f 91       	pop	r19
 cf8:	2f 91       	pop	r18
 cfa:	0f 90       	pop	r0
 cfc:	0b be       	out	0x3b, r0	; 59
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	0f 90       	pop	r0
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti

Disassembly of section .text.__vector_32:

000010f4 <__vector_32>:
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	8f 93       	push	r24
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <ramp_down_flag>
    1106:	8f 91       	pop	r24
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

Disassembly of section .text.init_pwm:

0000108c <init_pwm>:

/****** PWM ******/

void init_pwm(int num){
	/* Step 1: Set Timer 0 to Fast PWM mode */
	TCCR0A |= (_BV(WGM01) | _BV(WGM00));	// OCRA0 updated at TOP | TOV Flag set on MAX | TOP = 0xFF
    108c:	94 b5       	in	r25, 0x24	; 36
    108e:	93 60       	ori	r25, 0x03	; 3
    1090:	94 bd       	out	0x24, r25	; 36
	
	TIMSK0 |= _BV(OCIE0A);					// can change OCR0A value in ISR if needed
    1092:	ee e6       	ldi	r30, 0x6E	; 110
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	90 81       	ld	r25, Z
    1098:	92 60       	ori	r25, 0x02	; 2
    109a:	90 83       	st	Z, r25
	
	/* Step 3: Set the compare match output mode to clear on a compare match */
	TCCR0A |= _BV(COM0A1);					// non-inverting mode
    109c:	94 b5       	in	r25, 0x24	; 36
    109e:	90 68       	ori	r25, 0x80	; 128
    10a0:	94 bd       	out	0x24, r25	; 36
	
	/* Step 4: Set the PWM frequency to 3.9 kHz */
	TCCR0B |= _BV(CS01);					// prescaler = 8  -----> 8MHz / 8 / 256 ~= 3.9kHz (Timer0 is a 8 bit timer, page 120)
    10a2:	95 b5       	in	r25, 0x25	; 37
    10a4:	92 60       	ori	r25, 0x02	; 2
    10a6:	95 bd       	out	0x25, r25	; 37
	
	/* Step 5: Set OCR0A to determine duty cycle */
	OCR0A = num;
    10a8:	87 bd       	out	0x27, r24	; 39
	
	/* Step 6: set OC0A as output (page 76) */
	DDRB |= _BV(DDB7);						// OC0A: PORTB pin 7 is the PWM output A for Timer/Counter 0
    10aa:	84 b1       	in	r24, 0x04	; 4
    10ac:	80 68       	ori	r24, 0x80	; 128
    10ae:	84 b9       	out	0x04, r24	; 4
    10b0:	08 95       	ret

Disassembly of section .text.init_sensors:

000010b2 <init_sensors>:
#include "sensor.h"
#include "timer.h"

void init_sensors(){
  // OR
  EIMSK |= (_BV(INT0));
    10b2:	8d b3       	in	r24, 0x1d	; 29
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	8d bb       	out	0x1d, r24	; 29
  EICRA |= (_BV(ISC01) | _BV(ISC00)); // rising edge
    10b8:	e9 e6       	ldi	r30, 0x69	; 105
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	83 60       	ori	r24, 0x03	; 3
    10c0:	80 83       	st	Z, r24

  // EX
  EIMSK |= (_BV(INT1));		
    10c2:	8d b3       	in	r24, 0x1d	; 29
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (_BV(ISC11));  // falling edge
    10c8:	80 81       	ld	r24, Z
    10ca:	88 60       	ori	r24, 0x08	; 8
    10cc:	80 83       	st	Z, r24

  // GPIO
  DDRB &= ~(_BV(DDB6) | _BV(DDB5) | _BV(DDB4));
    10ce:	84 b1       	in	r24, 0x04	; 4
    10d0:	8f 78       	andi	r24, 0x8F	; 143
    10d2:	84 b9       	out	0x04, r24	; 4
    10d4:	08 95       	ret

Disassembly of section .text.init_stepper_motor:

00000e44 <init_stepper_motor>:
																	  {2, 1, 0, 3},
																	  {3, 2, 1, 0}};


/* Initialize Stepper Motor to Black */
void init_stepper_motor(){
 e44:	cf 93       	push	r28
 e46:	df 93       	push	r29
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
 e48:	81 b1       	in	r24, 0x01	; 1
 e4a:	8f 63       	ori	r24, 0x3F	; 63
 e4c:	81 b9       	out	0x01, r24	; 1
	PORTL = 0xF0;
 e4e:	80 ef       	ldi	r24, 0xF0	; 240
 e50:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	int i = 0;
 e54:	c0 e0       	ldi	r28, 0x00	; 0
 e56:	d0 e0       	ldi	r29, 0x00	; 0

	while(HE){ // HE: active low
 e58:	1a c0       	rjmp	.+52     	; 0xe8e <init_stepper_motor+0x4a>
		temp_step = i % 4;
 e5a:	ce 01       	movw	r24, r28
 e5c:	83 70       	andi	r24, 0x03	; 3
 e5e:	90 78       	andi	r25, 0x80	; 128
 e60:	99 23       	and	r25, r25
 e62:	24 f4       	brge	.+8      	; 0xe6c <init_stepper_motor+0x28>
 e64:	01 97       	sbiw	r24, 0x01	; 1
 e66:	8c 6f       	ori	r24, 0xFC	; 252
 e68:	9f 6f       	ori	r25, 0xFF	; 255
 e6a:	01 96       	adiw	r24, 0x01	; 1
 e6c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 e70:	82 b1       	in	r24, 0x02	; 2
 e72:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 e76:	f0 e0       	ldi	r31, 0x00	; 0
 e78:	e5 5b       	subi	r30, 0xB5	; 181
 e7a:	fd 4f       	sbci	r31, 0xFD	; 253
 e7c:	90 81       	ld	r25, Z
 e7e:	80 7c       	andi	r24, 0xC0	; 192
 e80:	89 2b       	or	r24, r25
 e82:	82 b9       	out	0x02, r24	; 2
		mTimer(18);
 e84:	82 e1       	ldi	r24, 0x12	; 18
 e86:	90 e0       	ldi	r25, 0x00	; 0
 e88:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
		i += 1;
 e8c:	21 96       	adiw	r28, 0x01	; 1
void init_stepper_motor(){
	DDRA |= (_BV(PA0) | _BV(PA1) | _BV(PA2) | _BV(PA3) | _BV(PA4) | _BV(PA5));
	PORTL = 0xF0;
	int i = 0;

	while(HE){ // HE: active low
 e8e:	1e 99       	sbic	0x03, 6	; 3
 e90:	e4 cf       	rjmp	.-56     	; 0xe5a <init_stepper_motor+0x16>
		temp_step = i % 4;
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
		mTimer(18);
		i += 1;
	}
	current_step = temp_step;
 e92:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 e96:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>
}
 e9a:	df 91       	pop	r29
 e9c:	cf 91       	pop	r28
 e9e:	08 95       	ret

Disassembly of section .text.StepperMotor_CW:

000008d2 <StepperMotor_CW>:
		StepperMotor_CW(-num_steps);
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
 8d2:	ef 92       	push	r14
 8d4:	ff 92       	push	r15
 8d6:	0f 93       	push	r16
 8d8:	1f 93       	push	r17
 8da:	cf 93       	push	r28
 8dc:	df 93       	push	r29
 8de:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 8e0:	c0 e0       	ldi	r28, 0x00	; 0
 8e2:	d0 e0       	ldi	r29, 0x00	; 0
	} // do nothing if num_steps = 0
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
 8e4:	00 e0       	ldi	r16, 0x00	; 0
 8e6:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < num_steps; i++){
 8e8:	3b c0       	rjmp	.+118    	; 0x960 <StepperMotor_CW+0x8e>
		temp_step = (current_step + i + 1) % 4;
 8ea:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <current_step>
 8ee:	9e 01       	movw	r18, r28
 8f0:	28 0f       	add	r18, r24
 8f2:	31 1d       	adc	r19, r1
 8f4:	c9 01       	movw	r24, r18
 8f6:	01 96       	adiw	r24, 0x01	; 1
 8f8:	83 70       	andi	r24, 0x03	; 3
 8fa:	90 78       	andi	r25, 0x80	; 128
 8fc:	99 23       	and	r25, r25
 8fe:	24 f4       	brge	.+8      	; 0x908 <StepperMotor_CW+0x36>
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	8c 6f       	ori	r24, 0xFC	; 252
 904:	9f 6f       	ori	r25, 0xFF	; 255
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 90c:	82 b1       	in	r24, 0x02	; 2
 90e:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	e5 5b       	subi	r30, 0xB5	; 181
 916:	fd 4f       	sbci	r31, 0xFD	; 253
 918:	90 81       	ld	r25, Z
 91a:	80 7c       	andi	r24, 0xC0	; 192
 91c:	89 2b       	or	r24, r25
 91e:	82 b9       	out	0x02, r24	; 2

		// mTimer(18);

		/* Acceleration and Deceleration Profile */
		if((i) < ACCEL_TOTAL_STEPS){ 
 920:	ce 30       	cpi	r28, 0x0E	; 14
 922:	d1 05       	cpc	r29, r1
 924:	44 f4       	brge	.+16     	; 0x936 <StepperMotor_CW+0x64>
			mTimer(accel_speed[i]);
 926:	fe 01       	movw	r30, r28
 928:	ec 5c       	subi	r30, 0xCC	; 204
 92a:	fd 4f       	sbci	r31, 0xFD	; 253
 92c:	80 81       	ld	r24, Z
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 934:	14 c0       	rjmp	.+40     	; 0x95e <StepperMotor_CW+0x8c>
		} else if ((i) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 936:	c7 01       	movw	r24, r14
 938:	0a 97       	sbiw	r24, 0x0a	; 10
 93a:	8c 17       	cp	r24, r28
 93c:	9d 07       	cpc	r25, r29
 93e:	54 f4       	brge	.+20     	; 0x954 <StepperMotor_CW+0x82>
			mTimer(decel_speed[j]);
 940:	f8 01       	movw	r30, r16
 942:	ee 5b       	subi	r30, 0xBE	; 190
 944:	fd 4f       	sbci	r31, 0xFD	; 253
 946:	80 81       	ld	r24, Z
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
			j += 1;
 94e:	0f 5f       	subi	r16, 0xFF	; 255
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	05 c0       	rjmp	.+10     	; 0x95e <StepperMotor_CW+0x8c>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 954:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <accel_speed+0xd>
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
}


void StepperMotor_CW(int num_steps){ //50 100
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 95e:	21 96       	adiw	r28, 0x01	; 1
 960:	ce 15       	cp	r28, r14
 962:	df 05       	cpc	r29, r15
 964:	14 f2       	brlt	.-124    	; 0x8ea <StepperMotor_CW+0x18>
		}
		/* End of Accel/Deccel Profile */

	}
	
	current_step = temp_step;
 966:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 96a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>

}
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	ff 90       	pop	r15
 978:	ef 90       	pop	r14
 97a:	08 95       	ret

Disassembly of section .text.StepperMotor_CCW:

00000810 <StepperMotor_CCW>:

void StepperMotor_CCW(int num_steps){
 810:	ef 92       	push	r14
 812:	ff 92       	push	r15
 814:	0f 93       	push	r16
 816:	1f 93       	push	r17
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	7c 01       	movw	r14, r24
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	50 e0       	ldi	r21, 0x00	; 0
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
	int j = 0;
 822:	00 e0       	ldi	r16, 0x00	; 0
 824:	10 e0       	ldi	r17, 0x00	; 0
	for(int i = 0; i < num_steps; i++){
 826:	46 c0       	rjmp	.+140    	; 0x8b4 <StepperMotor_CCW+0xa4>
		temp_step = ind[current_step][(i+1)%4];
 828:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <current_step>
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	ea 01       	movw	r28, r20
 830:	21 96       	adiw	r28, 0x01	; 1
 832:	9e 01       	movw	r18, r28
 834:	23 70       	andi	r18, 0x03	; 3
 836:	30 78       	andi	r19, 0x80	; 128
 838:	33 23       	and	r19, r19
 83a:	34 f4       	brge	.+12     	; 0x848 <StepperMotor_CCW+0x38>
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	31 09       	sbc	r19, r1
 840:	2c 6f       	ori	r18, 0xFC	; 252
 842:	3f 6f       	ori	r19, 0xFF	; 255
 844:	2f 5f       	subi	r18, 0xFF	; 255
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	8c 5d       	subi	r24, 0xDC	; 220
 852:	9d 4f       	sbci	r25, 0xFD	; 253
 854:	fc 01       	movw	r30, r24
 856:	e2 0f       	add	r30, r18
 858:	f3 1f       	adc	r31, r19
 85a:	80 81       	ld	r24, Z
 85c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <temp_step>
		STEPPER_MOTOR_PORT = (STEPPER_MOTOR_PORT & ~STEPPER_MOTOR_MASK) | steps[temp_step];
 860:	82 b1       	in	r24, 0x02	; 2
 862:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <temp_step>
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	e5 5b       	subi	r30, 0xB5	; 181
 86a:	fd 4f       	sbci	r31, 0xFD	; 253
 86c:	90 81       	ld	r25, Z
 86e:	80 7c       	andi	r24, 0xC0	; 192
 870:	89 2b       	or	r24, r25
 872:	82 b9       	out	0x02, r24	; 2
		
		// mTimer(18);

		// /* Acceleration and Deceleration Profile */
		if((i) < ACCEL_TOTAL_STEPS){ 
 874:	4e 30       	cpi	r20, 0x0E	; 14
 876:	51 05       	cpc	r21, r1
 878:	44 f4       	brge	.+16     	; 0x88a <StepperMotor_CCW+0x7a>
			mTimer(accel_speed[i]);
 87a:	fa 01       	movw	r30, r20
 87c:	ec 5c       	subi	r30, 0xCC	; 204
 87e:	fd 4f       	sbci	r31, 0xFD	; 253
 880:	80 81       	ld	r24, Z
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
 888:	14 c0       	rjmp	.+40     	; 0x8b2 <StepperMotor_CCW+0xa2>
		} else if ((i) > (num_steps - DECCEL_TOTAL_STEPS - 1)) {
 88a:	c7 01       	movw	r24, r14
 88c:	0a 97       	sbiw	r24, 0x0a	; 10
 88e:	84 17       	cp	r24, r20
 890:	95 07       	cpc	r25, r21
 892:	54 f4       	brge	.+20     	; 0x8a8 <StepperMotor_CCW+0x98>
			mTimer(decel_speed[j]);
 894:	f8 01       	movw	r30, r16
 896:	ee 5b       	subi	r30, 0xBE	; 190
 898:	fd 4f       	sbci	r31, 0xFD	; 253
 89a:	80 81       	ld	r24, Z
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
			j += 1;
 8a2:	0f 5f       	subi	r16, 0xFF	; 255
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	05 c0       	rjmp	.+10     	; 0x8b2 <StepperMotor_CCW+0xa2>
		} else {
			mTimer(accel_speed[ACCEL_TOTAL_STEPS - 1]);
 8a8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <accel_speed+0xd>
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 50 07 	call	0xea0	; 0xea0 <mTimer>
	
	current_step = temp_step;

}

void StepperMotor_CCW(int num_steps){
 8b2:	ae 01       	movw	r20, r28
	int j = 0;
	for(int i = 0; i < num_steps; i++){
 8b4:	4e 15       	cp	r20, r14
 8b6:	5f 05       	cpc	r21, r15
 8b8:	0c f4       	brge	.+2      	; 0x8bc <StepperMotor_CCW+0xac>
 8ba:	b6 cf       	rjmp	.-148    	; 0x828 <StepperMotor_CCW+0x18>
		}
		/* End of Accel/Deccel Profile */			

	}

	current_step = temp_step;
 8bc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <temp_step>
 8c0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <current_step>

 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	08 95       	ret

Disassembly of section .text.StepperMotor_Rotate:

0000114a <StepperMotor_Rotate>:
	current_step = temp_step;
}


void StepperMotor_Rotate(int num_steps){
	if(num_steps > 0){
    114a:	18 16       	cp	r1, r24
    114c:	19 06       	cpc	r1, r25
    114e:	1c f4       	brge	.+6      	; 0x1156 <StepperMotor_Rotate+0xc>
		StepperMotor_CCW(num_steps);
    1150:	0e 94 08 04 	call	0x810	; 0x810 <StepperMotor_CCW>
    1154:	08 95       	ret
	} else if (num_steps < 0) {
    1156:	99 23       	and	r25, r25
    1158:	2c f4       	brge	.+10     	; 0x1164 <StepperMotor_Rotate+0x1a>
		StepperMotor_CW(-num_steps);
    115a:	91 95       	neg	r25
    115c:	81 95       	neg	r24
    115e:	91 09       	sbc	r25, r1
    1160:	0e 94 69 04 	call	0x8d2	; 0x8d2 <StepperMotor_CW>
    1164:	08 95       	ret

Disassembly of section .text.mTimer:

00000ea0 <mTimer>:

void mTimer(int count){
	int i;
	i = 0;

	TCCR1B |= (_BV(CS11) | _BV(WGM12)); // Setting bit 3 in the timer/counter 1 control register
 ea0:	e1 e8       	ldi	r30, 0x81	; 129
 ea2:	f0 e0       	ldi	r31, 0x00	; 0
 ea4:	20 81       	ld	r18, Z
 ea6:	2a 60       	ori	r18, 0x0A	; 10
 ea8:	20 83       	st	Z, r18
	OCR1A = 0x03E8; // Set output compare register for 1000 ticks which equals to 1ms
 eaa:	28 ee       	ldi	r18, 0xE8	; 232
 eac:	33 e0       	ldi	r19, 0x03	; 3
 eae:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 eb2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TCNT1 = 0x0000;
 eb6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 eba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
 ebe:	26 b3       	in	r18, 0x16	; 22
 ec0:	22 60       	ori	r18, 0x02	; 2
 ec2:	26 bb       	out	0x16, r18	; 22
﻿#include <avr/io.h>

void mTimer(int count){
	int i;
	i = 0;
 ec4:	20 e0       	ldi	r18, 0x00	; 0
 ec6:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000;
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 ec8:	07 c0       	rjmp	.+14     	; 0xed8 <mTimer+0x38>
		if((TIFR1 & 0x02) == 0x02){ // check if the TIFR1 interrupt in bit 1 is raised
 eca:	b1 9b       	sbis	0x16, 1	; 22
 ecc:	05 c0       	rjmp	.+10     	; 0xed8 <mTimer+0x38>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
 ece:	46 b3       	in	r20, 0x16	; 22
 ed0:	42 60       	ori	r20, 0x02	; 2
 ed2:	46 bb       	out	0x16, r20	; 22
			i++;
 ed4:	2f 5f       	subi	r18, 0xFF	; 255
 ed6:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000;
	
	//TIMSK1 |= _BV(OCIE1A); // Setting bit 1 in the timer/counter 1 interrupt mask register
	TIFR1 |= _BV(OCF1A); // clear the interrupt flag in the bit 1 by setting the bit 1
	
	while(i < count){
 ed8:	28 17       	cp	r18, r24
 eda:	39 07       	cpc	r19, r25
 edc:	b4 f3       	brlt	.-20     	; 0xeca <mTimer+0x2a>
			TIFR1 |= _BV(OCF1A); // clear the interrupt flag by written ONE to the bit
			i++;
		}
	}
	return;
}
 ede:	08 95       	ret

Disassembly of section .text.intTimer:

00000fea <intTimer>:

void intTimer(){
	TCCR3B |= (_BV(CS32) | _BV(CS30) | _BV(WGM32));
     fea:	e1 e9       	ldi	r30, 0x91	; 145
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8d 60       	ori	r24, 0x0D	; 13
     ff2:	80 83       	st	Z, r24
	OCR3A = 0x4000;
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e4       	ldi	r25, 0x40	; 64
     ff8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     ffc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
	TCNT3 = 0x0000;
    1000:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    1004:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	TIMSK3 |= _BV(OCIE3A); // Setting bit 1 in the timer/counter 3 interrupt mask register
    1008:	e1 e7       	ldi	r30, 0x71	; 113
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	82 60       	ori	r24, 0x02	; 2
    1010:	80 83       	st	Z, r24
    1012:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000103c <__divmodhi4>:
    103c:	97 fb       	bst	r25, 7
    103e:	07 2e       	mov	r0, r23
    1040:	16 f4       	brtc	.+4      	; 0x1046 <__divmodhi4+0xa>
    1042:	00 94       	com	r0
    1044:	07 d0       	rcall	.+14     	; 0x1054 <__divmodhi4_neg1>
    1046:	77 fd       	sbrc	r23, 7
    1048:	09 d0       	rcall	.+18     	; 0x105c <__divmodhi4_neg2>
    104a:	0e 94 32 08 	call	0x1064	; 0x1064 <__udivmodhi4>
    104e:	07 fc       	sbrc	r0, 7
    1050:	05 d0       	rcall	.+10     	; 0x105c <__divmodhi4_neg2>
    1052:	3e f4       	brtc	.+14     	; 0x1062 <__divmodhi4_exit>

00001054 <__divmodhi4_neg1>:
    1054:	90 95       	com	r25
    1056:	81 95       	neg	r24
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	08 95       	ret

0000105c <__divmodhi4_neg2>:
    105c:	70 95       	com	r23
    105e:	61 95       	neg	r22
    1060:	7f 4f       	sbci	r23, 0xFF	; 255

00001062 <__divmodhi4_exit>:
    1062:	08 95       	ret

Disassembly of section .text.libgcc:

000011c6 <__xload_1>:
    11c6:	57 fd       	sbrc	r21, 7
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <__xload_1+0xa>
    11ca:	5b bf       	out	0x3b, r21	; 59
    11cc:	67 91       	elpm	r22, Z+
    11ce:	08 95       	ret
    11d0:	60 81       	ld	r22, Z
    11d2:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001064 <__udivmodhi4>:
    1064:	aa 1b       	sub	r26, r26
    1066:	bb 1b       	sub	r27, r27
    1068:	51 e1       	ldi	r21, 0x11	; 17
    106a:	07 c0       	rjmp	.+14     	; 0x107a <__udivmodhi4_ep>

0000106c <__udivmodhi4_loop>:
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	a6 17       	cp	r26, r22
    1072:	b7 07       	cpc	r27, r23
    1074:	10 f0       	brcs	.+4      	; 0x107a <__udivmodhi4_ep>
    1076:	a6 1b       	sub	r26, r22
    1078:	b7 0b       	sbc	r27, r23

0000107a <__udivmodhi4_ep>:
    107a:	88 1f       	adc	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	5a 95       	dec	r21
    1080:	a9 f7       	brne	.-22     	; 0x106c <__udivmodhi4_loop>
    1082:	80 95       	com	r24
    1084:	90 95       	com	r25
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001214 <_fini>:
    1214:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001216 <__funcs_on_exit>:
    1216:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001218 <__simulator_exit>:
    1218:	08 95       	ret

Disassembly of section .text.exit:

00001180 <exit>:
    1180:	ec 01       	movw	r28, r24
    1182:	0e 94 0b 09 	call	0x1216	; 0x1216 <__funcs_on_exit>
    1186:	0e 94 0a 09 	call	0x1214	; 0x1214 <_fini>
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 0c 09 	call	0x1218	; 0x1218 <__simulator_exit>
    1190:	ce 01       	movw	r24, r28
    1192:	0e 94 07 09 	call	0x120e	; 0x120e <_Exit>

Disassembly of section .text.__simple_search_fl:

00000592 <__simple_search_fl>:
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	60 91 53 02 	lds	r22, 0x0253	; 0x800253 <__freelist>
 5a2:	70 91 54 02 	lds	r23, 0x0254	; 0x800254 <__freelist+0x1>
 5a6:	61 15       	cp	r22, r1
 5a8:	71 05       	cpc	r23, r1
 5aa:	09 f4       	brne	.+2      	; 0x5ae <__simple_search_fl+0x1c>
 5ac:	5b c0       	rjmp	.+182    	; 0x664 <__simple_search_fl+0xd2>
 5ae:	fb 01       	movw	r30, r22
 5b0:	a0 e0       	ldi	r26, 0x00	; 0
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	c0 e0       	ldi	r28, 0x00	; 0
 5ba:	d0 e0       	ldi	r29, 0x00	; 0
 5bc:	00 81       	ld	r16, Z
 5be:	11 81       	ldd	r17, Z+1	; 0x01
 5c0:	22 81       	ldd	r18, Z+2	; 0x02
 5c2:	33 81       	ldd	r19, Z+3	; 0x03
 5c4:	08 17       	cp	r16, r24
 5c6:	19 07       	cpc	r17, r25
 5c8:	71 f4       	brne	.+28     	; 0x5e6 <__simple_search_fl+0x54>
 5ca:	10 97       	sbiw	r26, 0x00	; 0
 5cc:	29 f0       	breq	.+10     	; 0x5d8 <__simple_search_fl+0x46>
 5ce:	13 96       	adiw	r26, 0x03	; 3
 5d0:	3c 93       	st	X, r19
 5d2:	2e 93       	st	-X, r18
 5d4:	12 97       	sbiw	r26, 0x02	; 2
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__simple_search_fl+0x4e>
 5d8:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <__freelist+0x1>
 5dc:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <__freelist>
 5e0:	cf 01       	movw	r24, r30
 5e2:	02 96       	adiw	r24, 0x02	; 2
 5e4:	41 c0       	rjmp	.+130    	; 0x668 <__simple_search_fl+0xd6>
 5e6:	80 17       	cp	r24, r16
 5e8:	91 07       	cpc	r25, r17
 5ea:	48 f4       	brcc	.+18     	; 0x5fe <__simple_search_fl+0x6c>
 5ec:	20 97       	sbiw	r28, 0x00	; 0
 5ee:	29 f0       	breq	.+10     	; 0x5fa <__simple_search_fl+0x68>
 5f0:	e8 80       	ld	r14, Y
 5f2:	f9 80       	ldd	r15, Y+1	; 0x01
 5f4:	0e 15       	cp	r16, r14
 5f6:	1f 05       	cpc	r17, r15
 5f8:	10 f4       	brcc	.+4      	; 0x5fe <__simple_search_fl+0x6c>
 5fa:	ad 01       	movw	r20, r26
 5fc:	ef 01       	movw	r28, r30
 5fe:	df 01       	movw	r26, r30
 600:	21 15       	cp	r18, r1
 602:	31 05       	cpc	r19, r1
 604:	11 f0       	breq	.+4      	; 0x60a <__simple_search_fl+0x78>
 606:	f9 01       	movw	r30, r18
 608:	d9 cf       	rjmp	.-78     	; 0x5bc <__simple_search_fl+0x2a>
 60a:	20 97       	sbiw	r28, 0x00	; 0
 60c:	59 f1       	breq	.+86     	; 0x664 <__simple_search_fl+0xd2>
 60e:	0a 81       	ldd	r16, Y+2	; 0x02
 610:	1b 81       	ldd	r17, Y+3	; 0x03
 612:	fe 01       	movw	r30, r28
 614:	21 91       	ld	r18, Z+
 616:	31 91       	ld	r19, Z+
 618:	28 1b       	sub	r18, r24
 61a:	39 0b       	sbc	r19, r25
 61c:	25 30       	cpi	r18, 0x05	; 5
 61e:	31 05       	cpc	r19, r1
 620:	88 f0       	brcs	.+34     	; 0x644 <__simple_search_fl+0xb2>
 622:	99 83       	std	Y+1, r25	; 0x01
 624:	88 83       	st	Y, r24
 626:	df 01       	movw	r26, r30
 628:	a8 0f       	add	r26, r24
 62a:	b9 1f       	adc	r27, r25
 62c:	22 50       	subi	r18, 0x02	; 2
 62e:	31 09       	sbc	r19, r1
 630:	11 96       	adiw	r26, 0x01	; 1
 632:	3c 93       	st	X, r19
 634:	2e 93       	st	-X, r18
 636:	12 96       	adiw	r26, 0x02	; 2
 638:	0c 93       	st	X, r16
 63a:	12 97       	sbiw	r26, 0x02	; 2
 63c:	13 96       	adiw	r26, 0x03	; 3
 63e:	1c 93       	st	X, r17
 640:	13 97       	sbiw	r26, 0x03	; 3
 642:	8d 01       	movw	r16, r26
 644:	c6 17       	cp	r28, r22
 646:	d7 07       	cpc	r29, r23
 648:	29 f4       	brne	.+10     	; 0x654 <__simple_search_fl+0xc2>
 64a:	00 93 53 02 	sts	0x0253, r16	; 0x800253 <__freelist>
 64e:	10 93 54 02 	sts	0x0254, r17	; 0x800254 <__freelist+0x1>
 652:	06 c0       	rjmp	.+12     	; 0x660 <__simple_search_fl+0xce>
 654:	da 01       	movw	r26, r20
 656:	12 96       	adiw	r26, 0x02	; 2
 658:	0c 93       	st	X, r16
 65a:	12 97       	sbiw	r26, 0x02	; 2
 65c:	13 96       	adiw	r26, 0x03	; 3
 65e:	1c 93       	st	X, r17
 660:	cf 01       	movw	r24, r30
 662:	02 c0       	rjmp	.+4      	; 0x668 <__simple_search_fl+0xd6>
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
 66c:	e6 e0       	ldi	r30, 0x06	; 6
 66e:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00000c1e <__simple_free>:
 c1e:	00 97       	sbiw	r24, 0x00	; 0
 c20:	c9 f1       	breq	.+114    	; 0xc94 <__simple_free+0x76>
 c22:	fc 01       	movw	r30, r24
 c24:	32 97       	sbiw	r30, 0x02	; 2
 c26:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <__freelist>
 c2a:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <__freelist+0x1>
 c2e:	10 97       	sbiw	r26, 0x00	; 0
 c30:	59 f1       	breq	.+86     	; 0xc88 <__simple_free+0x6a>
 c32:	40 81       	ld	r20, Z
 c34:	51 81       	ldd	r21, Z+1	; 0x01
 c36:	9c 01       	movw	r18, r24
 c38:	24 0f       	add	r18, r20
 c3a:	35 1f       	adc	r19, r21
 c3c:	a2 17       	cp	r26, r18
 c3e:	b3 07       	cpc	r27, r19
 c40:	79 f4       	brne	.+30     	; 0xc60 <__simple_free+0x42>
 c42:	12 96       	adiw	r26, 0x02	; 2
 c44:	8d 91       	ld	r24, X+
 c46:	9c 91       	ld	r25, X
 c48:	13 97       	sbiw	r26, 0x03	; 3
 c4a:	93 83       	std	Z+3, r25	; 0x03
 c4c:	82 83       	std	Z+2, r24	; 0x02
 c4e:	2d 91       	ld	r18, X+
 c50:	3c 91       	ld	r19, X
 c52:	ca 01       	movw	r24, r20
 c54:	82 0f       	add	r24, r18
 c56:	93 1f       	adc	r25, r19
 c58:	02 96       	adiw	r24, 0x02	; 2
 c5a:	91 83       	std	Z+1, r25	; 0x01
 c5c:	80 83       	st	Z, r24
 c5e:	16 c0       	rjmp	.+44     	; 0xc8c <__simple_free+0x6e>
 c60:	8d 91       	ld	r24, X+
 c62:	9c 91       	ld	r25, X
 c64:	11 97       	sbiw	r26, 0x01	; 1
 c66:	9c 01       	movw	r18, r24
 c68:	2e 5f       	subi	r18, 0xFE	; 254
 c6a:	3f 4f       	sbci	r19, 0xFF	; 255
 c6c:	2a 0f       	add	r18, r26
 c6e:	3b 1f       	adc	r19, r27
 c70:	e2 17       	cp	r30, r18
 c72:	f3 07       	cpc	r31, r19
 c74:	31 f4       	brne	.+12     	; 0xc82 <__simple_free+0x64>
 c76:	84 0f       	add	r24, r20
 c78:	95 1f       	adc	r25, r21
 c7a:	02 96       	adiw	r24, 0x02	; 2
 c7c:	8d 93       	st	X+, r24
 c7e:	9c 93       	st	X, r25
 c80:	08 95       	ret
 c82:	b3 83       	std	Z+3, r27	; 0x03
 c84:	a2 83       	std	Z+2, r26	; 0x02
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <__simple_free+0x6e>
 c88:	13 82       	std	Z+3, r1	; 0x03
 c8a:	12 82       	std	Z+2, r1	; 0x02
 c8c:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <__freelist+0x1>
 c90:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <__freelist>
 c94:	08 95       	ret

Disassembly of section .text.__simple_malloc:

00000672 <__simple_malloc>:
 672:	a2 e0       	ldi	r26, 0x02	; 2
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__prologue_saves__+0x14>
 67e:	8c 01       	movw	r16, r24
 680:	8f e0       	ldi	r24, 0x0F	; 15
 682:	96 e0       	ldi	r25, 0x06	; 6
 684:	01 15       	cp	r16, r1
 686:	11 05       	cpc	r17, r1
 688:	09 f4       	brne	.+2      	; 0x68c <__simple_malloc+0x1a>
 68a:	55 c0       	rjmp	.+170    	; 0x736 <__simple_malloc+0xc4>
 68c:	89 2b       	or	r24, r25
 68e:	79 f0       	breq	.+30     	; 0x6ae <__simple_malloc+0x3c>
 690:	02 30       	cpi	r16, 0x02	; 2
 692:	11 05       	cpc	r17, r1
 694:	10 f4       	brcc	.+4      	; 0x69a <__simple_malloc+0x28>
 696:	02 e0       	ldi	r16, 0x02	; 2
 698:	10 e0       	ldi	r17, 0x00	; 0
 69a:	c8 01       	movw	r24, r16
 69c:	0e 94 c9 02 	call	0x592	; 0x592 <__simple_search_fl>
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <__simple_malloc+0x34>
 6a4:	4f c0       	rjmp	.+158    	; 0x744 <__simple_malloc+0xd2>
 6a6:	92 e0       	ldi	r25, 0x02	; 2
 6a8:	e9 2e       	mov	r14, r25
 6aa:	f1 2c       	mov	r15, r1
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__simple_malloc+0x44>
 6ae:	8f e0       	ldi	r24, 0x0F	; 15
 6b0:	e8 2e       	mov	r14, r24
 6b2:	86 e0       	ldi	r24, 0x06	; 6
 6b4:	f8 2e       	mov	r15, r24
 6b6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <end.1483>
 6ba:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <end.1483+0x1>
 6be:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <cur.1482>
 6c2:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <cur.1482+0x1>
 6c6:	82 1b       	sub	r24, r18
 6c8:	93 0b       	sbc	r25, r19
 6ca:	67 01       	movw	r12, r14
 6cc:	c0 0e       	add	r12, r16
 6ce:	d1 1e       	adc	r13, r17
 6d0:	80 17       	cp	r24, r16
 6d2:	91 07       	cpc	r25, r17
 6d4:	f0 f4       	brcc	.+60     	; 0x712 <__simple_malloc+0xa0>
 6d6:	da 82       	std	Y+2, r13	; 0x02
 6d8:	c9 82       	std	Y+1, r12	; 0x01
 6da:	ce 01       	movw	r24, r28
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	0e 94 bc 06 	call	0xd78	; 0xd78 <__expand_heap>
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	19 f4       	brne	.+6      	; 0x6ec <__simple_malloc+0x7a>
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	2c c0       	rjmp	.+88     	; 0x744 <__simple_malloc+0xd2>
 6ec:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <end.1483>
 6f0:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <end.1483+0x1>
 6f4:	82 17       	cp	r24, r18
 6f6:	93 07       	cpc	r25, r19
 6f8:	21 f0       	breq	.+8      	; 0x702 <__simple_malloc+0x90>
 6fa:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <cur.1482+0x1>
 6fe:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <cur.1482>
 702:	29 81       	ldd	r18, Y+1	; 0x01
 704:	3a 81       	ldd	r19, Y+2	; 0x02
 706:	82 0f       	add	r24, r18
 708:	93 1f       	adc	r25, r19
 70a:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <end.1483+0x1>
 70e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <end.1483>
 712:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <cur.1482>
 716:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <cur.1482+0x1>
 71a:	cf 01       	movw	r24, r30
 71c:	e1 14       	cp	r14, r1
 71e:	f1 04       	cpc	r15, r1
 720:	19 f0       	breq	.+6      	; 0x728 <__simple_malloc+0xb6>
 722:	02 96       	adiw	r24, 0x02	; 2
 724:	11 83       	std	Z+1, r17	; 0x01
 726:	00 83       	st	Z, r16
 728:	ce 0e       	add	r12, r30
 72a:	df 1e       	adc	r13, r31
 72c:	d0 92 58 02 	sts	0x0258, r13	; 0x800258 <cur.1482+0x1>
 730:	c0 92 57 02 	sts	0x0257, r12	; 0x800257 <cur.1482>
 734:	07 c0       	rjmp	.+14     	; 0x744 <__simple_malloc+0xd2>
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	09 f0       	breq	.+2      	; 0x73c <__simple_malloc+0xca>
 73a:	ad cf       	rjmp	.-166    	; 0x696 <__simple_malloc+0x24>
 73c:	7c 01       	movw	r14, r24
 73e:	01 e0       	ldi	r16, 0x01	; 1
 740:	10 e0       	ldi	r17, 0x00	; 0
 742:	b9 cf       	rjmp	.-142    	; 0x6b6 <__simple_malloc+0x44>
 744:	22 96       	adiw	r28, 0x02	; 2
 746:	e8 e0       	ldi	r30, 0x08	; 8
 748:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

0000120e <_Exit>:
    120e:	0e 94 b7 00 	call	0x16e	; 0x16e <_exit>

Disassembly of section .text.__expand_heap:

00000d78 <__expand_heap>:
 d78:	fc 01       	movw	r30, r24
 d7a:	40 81       	ld	r20, Z
 d7c:	51 81       	ldd	r21, Z+1	; 0x01
 d7e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <__brkval>
 d82:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <__brkval+0x1>
 d86:	89 2b       	or	r24, r25
 d88:	41 f4       	brne	.+16     	; 0xd9a <__expand_heap+0x22>
 d8a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <__malloc_heap_start>
 d8e:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <__malloc_heap_start+0x1>
 d92:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <__brkval+0x1>
 d96:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <__brkval>
 d9a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <__malloc_heap_end>
 d9e:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <__malloc_heap_end+0x1>
 da2:	00 97       	sbiw	r24, 0x00	; 0
 da4:	19 f4       	brne	.+6      	; 0xdac <__expand_heap+0x34>
 da6:	8d b7       	in	r24, 0x3d	; 61
 da8:	9e b7       	in	r25, 0x3e	; 62
 daa:	80 97       	sbiw	r24, 0x20	; 32
 dac:	20 91 59 02 	lds	r18, 0x0259	; 0x800259 <__brkval>
 db0:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <__brkval+0x1>
 db4:	28 17       	cp	r18, r24
 db6:	39 07       	cpc	r19, r25
 db8:	48 f0       	brcs	.+18     	; 0xdcc <__expand_heap+0x54>
 dba:	8c e0       	ldi	r24, 0x0C	; 12
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__errno_val+0x1>
 dc2:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__errno_val>
 dc6:	80 e0       	ldi	r24, 0x00	; 0
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	08 95       	ret
 dcc:	82 1b       	sub	r24, r18
 dce:	93 0b       	sbc	r25, r19
 dd0:	84 17       	cp	r24, r20
 dd2:	95 07       	cpc	r25, r21
 dd4:	90 f3       	brcs	.-28     	; 0xdba <__expand_heap+0x42>
 dd6:	42 0f       	add	r20, r18
 dd8:	53 1f       	adc	r21, r19
 dda:	50 93 5a 02 	sts	0x025A, r21	; 0x80025a <__brkval+0x1>
 dde:	40 93 59 02 	sts	0x0259, r20	; 0x800259 <__brkval>
 de2:	c9 01       	movw	r24, r18
 de4:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00000f1c <__prologue_saves__>:
 f1c:	2f 92       	push	r2
 f1e:	3f 92       	push	r3
 f20:	4f 92       	push	r4
 f22:	5f 92       	push	r5
 f24:	6f 92       	push	r6
 f26:	7f 92       	push	r7
 f28:	8f 92       	push	r8
 f2a:	9f 92       	push	r9
 f2c:	af 92       	push	r10
 f2e:	bf 92       	push	r11
 f30:	cf 92       	push	r12
 f32:	df 92       	push	r13
 f34:	ef 92       	push	r14
 f36:	ff 92       	push	r15
 f38:	0f 93       	push	r16
 f3a:	1f 93       	push	r17
 f3c:	cf 93       	push	r28
 f3e:	df 93       	push	r29
 f40:	cd b7       	in	r28, 0x3d	; 61
 f42:	de b7       	in	r29, 0x3e	; 62
 f44:	ca 1b       	sub	r28, r26
 f46:	db 0b       	sbc	r29, r27
 f48:	0f b6       	in	r0, 0x3f	; 63
 f4a:	f8 94       	cli
 f4c:	de bf       	out	0x3e, r29	; 62
 f4e:	0f be       	out	0x3f, r0	; 63
 f50:	cd bf       	out	0x3d, r28	; 61
 f52:	19 94       	eijmp

Disassembly of section .text.libgcc.prologue:

00000f54 <__epilogue_restores__>:
 f54:	2a 88       	ldd	r2, Y+18	; 0x12
 f56:	39 88       	ldd	r3, Y+17	; 0x11
 f58:	48 88       	ldd	r4, Y+16	; 0x10
 f5a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f5c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f5e:	7d 84       	ldd	r7, Y+13	; 0x0d
 f60:	8c 84       	ldd	r8, Y+12	; 0x0c
 f62:	9b 84       	ldd	r9, Y+11	; 0x0b
 f64:	aa 84       	ldd	r10, Y+10	; 0x0a
 f66:	b9 84       	ldd	r11, Y+9	; 0x09
 f68:	c8 84       	ldd	r12, Y+8	; 0x08
 f6a:	df 80       	ldd	r13, Y+7	; 0x07
 f6c:	ee 80       	ldd	r14, Y+6	; 0x06
 f6e:	fd 80       	ldd	r15, Y+5	; 0x05
 f70:	0c 81       	ldd	r16, Y+4	; 0x04
 f72:	1b 81       	ldd	r17, Y+3	; 0x03
 f74:	aa 81       	ldd	r26, Y+2	; 0x02
 f76:	b9 81       	ldd	r27, Y+1	; 0x01
 f78:	ce 0f       	add	r28, r30
 f7a:	d1 1d       	adc	r29, r1
 f7c:	0f b6       	in	r0, 0x3f	; 63
 f7e:	f8 94       	cli
 f80:	de bf       	out	0x3e, r29	; 62
 f82:	0f be       	out	0x3f, r0	; 63
 f84:	cd bf       	out	0x3d, r28	; 61
 f86:	ed 01       	movw	r28, r26
 f88:	08 95       	ret
